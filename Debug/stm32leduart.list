
stm32leduart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003d38  08003d38  00013d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003db0  08003db0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003db0  08003db0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003db0  08003db0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003db0  08003db0  00013db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003db4  08003db4  00013db4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003db8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000010  08003dc4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200000d8  08003dc4  000200d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000063fd  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000015cf  00000000  00000000  00026431  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000688  00000000  00000000  00027a00  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005c0  00000000  00000000  00028088  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000bdb5  00000000  00000000  00028648  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000654a  00000000  00000000  000343fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000427fc  00000000  00000000  0003a947  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0007d143  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001774  00000000  00000000  0007d1c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d20 	.word	0x08003d20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003d20 	.word	0x08003d20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_cdrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	1c10      	adds	r0, r2, #0
 8000224:	4662      	mov	r2, ip
 8000226:	468c      	mov	ip, r1
 8000228:	1c19      	adds	r1, r3, #0
 800022a:	4663      	mov	r3, ip
 800022c:	e000      	b.n	8000230 <__aeabi_cdcmpeq>
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_cdcmpeq>:
 8000230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000232:	f000 ff0f 	bl	8001054 <__ledf2>
 8000236:	2800      	cmp	r0, #0
 8000238:	d401      	bmi.n	800023e <__aeabi_cdcmpeq+0xe>
 800023a:	2100      	movs	r1, #0
 800023c:	42c8      	cmn	r0, r1
 800023e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000240 <__aeabi_dcmpeq>:
 8000240:	b510      	push	{r4, lr}
 8000242:	f000 fe67 	bl	8000f14 <__eqdf2>
 8000246:	4240      	negs	r0, r0
 8000248:	3001      	adds	r0, #1
 800024a:	bd10      	pop	{r4, pc}

0800024c <__aeabi_dcmplt>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 ff01 	bl	8001054 <__ledf2>
 8000252:	2800      	cmp	r0, #0
 8000254:	db01      	blt.n	800025a <__aeabi_dcmplt+0xe>
 8000256:	2000      	movs	r0, #0
 8000258:	bd10      	pop	{r4, pc}
 800025a:	2001      	movs	r0, #1
 800025c:	bd10      	pop	{r4, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_dcmple>:
 8000260:	b510      	push	{r4, lr}
 8000262:	f000 fef7 	bl	8001054 <__ledf2>
 8000266:	2800      	cmp	r0, #0
 8000268:	dd01      	ble.n	800026e <__aeabi_dcmple+0xe>
 800026a:	2000      	movs	r0, #0
 800026c:	bd10      	pop	{r4, pc}
 800026e:	2001      	movs	r0, #1
 8000270:	bd10      	pop	{r4, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_dcmpgt>:
 8000274:	b510      	push	{r4, lr}
 8000276:	f000 fe89 	bl	8000f8c <__gedf2>
 800027a:	2800      	cmp	r0, #0
 800027c:	dc01      	bgt.n	8000282 <__aeabi_dcmpgt+0xe>
 800027e:	2000      	movs	r0, #0
 8000280:	bd10      	pop	{r4, pc}
 8000282:	2001      	movs	r0, #1
 8000284:	bd10      	pop	{r4, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_dcmpge>:
 8000288:	b510      	push	{r4, lr}
 800028a:	f000 fe7f 	bl	8000f8c <__gedf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	da01      	bge.n	8000296 <__aeabi_dcmpge+0xe>
 8000292:	2000      	movs	r0, #0
 8000294:	bd10      	pop	{r4, pc}
 8000296:	2001      	movs	r0, #1
 8000298:	bd10      	pop	{r4, pc}
 800029a:	46c0      	nop			; (mov r8, r8)

0800029c <__aeabi_d2uiz>:
 800029c:	b570      	push	{r4, r5, r6, lr}
 800029e:	2200      	movs	r2, #0
 80002a0:	4b0c      	ldr	r3, [pc, #48]	; (80002d4 <__aeabi_d2uiz+0x38>)
 80002a2:	0004      	movs	r4, r0
 80002a4:	000d      	movs	r5, r1
 80002a6:	f7ff ffef 	bl	8000288 <__aeabi_dcmpge>
 80002aa:	2800      	cmp	r0, #0
 80002ac:	d104      	bne.n	80002b8 <__aeabi_d2uiz+0x1c>
 80002ae:	0020      	movs	r0, r4
 80002b0:	0029      	movs	r1, r5
 80002b2:	f001 fa7f 	bl	80017b4 <__aeabi_d2iz>
 80002b6:	bd70      	pop	{r4, r5, r6, pc}
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <__aeabi_d2uiz+0x38>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	0020      	movs	r0, r4
 80002be:	0029      	movs	r1, r5
 80002c0:	f000 ff30 	bl	8001124 <__aeabi_dsub>
 80002c4:	f001 fa76 	bl	80017b4 <__aeabi_d2iz>
 80002c8:	2380      	movs	r3, #128	; 0x80
 80002ca:	061b      	lsls	r3, r3, #24
 80002cc:	469c      	mov	ip, r3
 80002ce:	4460      	add	r0, ip
 80002d0:	e7f1      	b.n	80002b6 <__aeabi_d2uiz+0x1a>
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	41e00000 	.word	0x41e00000

080002d8 <__aeabi_dadd>:
 80002d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002da:	464f      	mov	r7, r9
 80002dc:	4646      	mov	r6, r8
 80002de:	46d6      	mov	lr, sl
 80002e0:	000c      	movs	r4, r1
 80002e2:	0309      	lsls	r1, r1, #12
 80002e4:	b5c0      	push	{r6, r7, lr}
 80002e6:	0a49      	lsrs	r1, r1, #9
 80002e8:	0f47      	lsrs	r7, r0, #29
 80002ea:	005e      	lsls	r6, r3, #1
 80002ec:	4339      	orrs	r1, r7
 80002ee:	031f      	lsls	r7, r3, #12
 80002f0:	0fdb      	lsrs	r3, r3, #31
 80002f2:	469c      	mov	ip, r3
 80002f4:	0065      	lsls	r5, r4, #1
 80002f6:	0a7b      	lsrs	r3, r7, #9
 80002f8:	0f57      	lsrs	r7, r2, #29
 80002fa:	431f      	orrs	r7, r3
 80002fc:	0d6d      	lsrs	r5, r5, #21
 80002fe:	0fe4      	lsrs	r4, r4, #31
 8000300:	0d76      	lsrs	r6, r6, #21
 8000302:	46a1      	mov	r9, r4
 8000304:	00c0      	lsls	r0, r0, #3
 8000306:	46b8      	mov	r8, r7
 8000308:	00d2      	lsls	r2, r2, #3
 800030a:	1bab      	subs	r3, r5, r6
 800030c:	4564      	cmp	r4, ip
 800030e:	d07b      	beq.n	8000408 <__aeabi_dadd+0x130>
 8000310:	2b00      	cmp	r3, #0
 8000312:	dd5f      	ble.n	80003d4 <__aeabi_dadd+0xfc>
 8000314:	2e00      	cmp	r6, #0
 8000316:	d000      	beq.n	800031a <__aeabi_dadd+0x42>
 8000318:	e0a4      	b.n	8000464 <__aeabi_dadd+0x18c>
 800031a:	003e      	movs	r6, r7
 800031c:	4316      	orrs	r6, r2
 800031e:	d100      	bne.n	8000322 <__aeabi_dadd+0x4a>
 8000320:	e112      	b.n	8000548 <__aeabi_dadd+0x270>
 8000322:	1e5e      	subs	r6, r3, #1
 8000324:	2e00      	cmp	r6, #0
 8000326:	d000      	beq.n	800032a <__aeabi_dadd+0x52>
 8000328:	e19e      	b.n	8000668 <__aeabi_dadd+0x390>
 800032a:	1a87      	subs	r7, r0, r2
 800032c:	4643      	mov	r3, r8
 800032e:	42b8      	cmp	r0, r7
 8000330:	4180      	sbcs	r0, r0
 8000332:	2501      	movs	r5, #1
 8000334:	1ac9      	subs	r1, r1, r3
 8000336:	4240      	negs	r0, r0
 8000338:	1a09      	subs	r1, r1, r0
 800033a:	020b      	lsls	r3, r1, #8
 800033c:	d400      	bmi.n	8000340 <__aeabi_dadd+0x68>
 800033e:	e131      	b.n	80005a4 <__aeabi_dadd+0x2cc>
 8000340:	0249      	lsls	r1, r1, #9
 8000342:	0a4e      	lsrs	r6, r1, #9
 8000344:	2e00      	cmp	r6, #0
 8000346:	d100      	bne.n	800034a <__aeabi_dadd+0x72>
 8000348:	e16e      	b.n	8000628 <__aeabi_dadd+0x350>
 800034a:	0030      	movs	r0, r6
 800034c:	f001 faa2 	bl	8001894 <__clzsi2>
 8000350:	0003      	movs	r3, r0
 8000352:	3b08      	subs	r3, #8
 8000354:	2b1f      	cmp	r3, #31
 8000356:	dd00      	ble.n	800035a <__aeabi_dadd+0x82>
 8000358:	e161      	b.n	800061e <__aeabi_dadd+0x346>
 800035a:	2220      	movs	r2, #32
 800035c:	0039      	movs	r1, r7
 800035e:	1ad2      	subs	r2, r2, r3
 8000360:	409e      	lsls	r6, r3
 8000362:	40d1      	lsrs	r1, r2
 8000364:	409f      	lsls	r7, r3
 8000366:	430e      	orrs	r6, r1
 8000368:	429d      	cmp	r5, r3
 800036a:	dd00      	ble.n	800036e <__aeabi_dadd+0x96>
 800036c:	e151      	b.n	8000612 <__aeabi_dadd+0x33a>
 800036e:	1b5d      	subs	r5, r3, r5
 8000370:	1c6b      	adds	r3, r5, #1
 8000372:	2b1f      	cmp	r3, #31
 8000374:	dd00      	ble.n	8000378 <__aeabi_dadd+0xa0>
 8000376:	e17c      	b.n	8000672 <__aeabi_dadd+0x39a>
 8000378:	2120      	movs	r1, #32
 800037a:	1ac9      	subs	r1, r1, r3
 800037c:	003d      	movs	r5, r7
 800037e:	0030      	movs	r0, r6
 8000380:	408f      	lsls	r7, r1
 8000382:	4088      	lsls	r0, r1
 8000384:	40dd      	lsrs	r5, r3
 8000386:	1e79      	subs	r1, r7, #1
 8000388:	418f      	sbcs	r7, r1
 800038a:	0031      	movs	r1, r6
 800038c:	2207      	movs	r2, #7
 800038e:	4328      	orrs	r0, r5
 8000390:	40d9      	lsrs	r1, r3
 8000392:	2500      	movs	r5, #0
 8000394:	4307      	orrs	r7, r0
 8000396:	403a      	ands	r2, r7
 8000398:	2a00      	cmp	r2, #0
 800039a:	d009      	beq.n	80003b0 <__aeabi_dadd+0xd8>
 800039c:	230f      	movs	r3, #15
 800039e:	403b      	ands	r3, r7
 80003a0:	2b04      	cmp	r3, #4
 80003a2:	d005      	beq.n	80003b0 <__aeabi_dadd+0xd8>
 80003a4:	1d3b      	adds	r3, r7, #4
 80003a6:	42bb      	cmp	r3, r7
 80003a8:	41bf      	sbcs	r7, r7
 80003aa:	427f      	negs	r7, r7
 80003ac:	19c9      	adds	r1, r1, r7
 80003ae:	001f      	movs	r7, r3
 80003b0:	020b      	lsls	r3, r1, #8
 80003b2:	d400      	bmi.n	80003b6 <__aeabi_dadd+0xde>
 80003b4:	e226      	b.n	8000804 <__aeabi_dadd+0x52c>
 80003b6:	1c6a      	adds	r2, r5, #1
 80003b8:	4bc6      	ldr	r3, [pc, #792]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80003ba:	0555      	lsls	r5, r2, #21
 80003bc:	0d6d      	lsrs	r5, r5, #21
 80003be:	429a      	cmp	r2, r3
 80003c0:	d100      	bne.n	80003c4 <__aeabi_dadd+0xec>
 80003c2:	e106      	b.n	80005d2 <__aeabi_dadd+0x2fa>
 80003c4:	4ac4      	ldr	r2, [pc, #784]	; (80006d8 <__aeabi_dadd+0x400>)
 80003c6:	08ff      	lsrs	r7, r7, #3
 80003c8:	400a      	ands	r2, r1
 80003ca:	0753      	lsls	r3, r2, #29
 80003cc:	0252      	lsls	r2, r2, #9
 80003ce:	433b      	orrs	r3, r7
 80003d0:	0b12      	lsrs	r2, r2, #12
 80003d2:	e08e      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d000      	beq.n	80003da <__aeabi_dadd+0x102>
 80003d8:	e0b8      	b.n	800054c <__aeabi_dadd+0x274>
 80003da:	1c6b      	adds	r3, r5, #1
 80003dc:	055b      	lsls	r3, r3, #21
 80003de:	0d5b      	lsrs	r3, r3, #21
 80003e0:	2b01      	cmp	r3, #1
 80003e2:	dc00      	bgt.n	80003e6 <__aeabi_dadd+0x10e>
 80003e4:	e130      	b.n	8000648 <__aeabi_dadd+0x370>
 80003e6:	1a87      	subs	r7, r0, r2
 80003e8:	4643      	mov	r3, r8
 80003ea:	42b8      	cmp	r0, r7
 80003ec:	41b6      	sbcs	r6, r6
 80003ee:	1acb      	subs	r3, r1, r3
 80003f0:	4276      	negs	r6, r6
 80003f2:	1b9e      	subs	r6, r3, r6
 80003f4:	0233      	lsls	r3, r6, #8
 80003f6:	d500      	bpl.n	80003fa <__aeabi_dadd+0x122>
 80003f8:	e14c      	b.n	8000694 <__aeabi_dadd+0x3bc>
 80003fa:	003b      	movs	r3, r7
 80003fc:	4333      	orrs	r3, r6
 80003fe:	d1a1      	bne.n	8000344 <__aeabi_dadd+0x6c>
 8000400:	2200      	movs	r2, #0
 8000402:	2400      	movs	r4, #0
 8000404:	2500      	movs	r5, #0
 8000406:	e070      	b.n	80004ea <__aeabi_dadd+0x212>
 8000408:	2b00      	cmp	r3, #0
 800040a:	dc00      	bgt.n	800040e <__aeabi_dadd+0x136>
 800040c:	e0e5      	b.n	80005da <__aeabi_dadd+0x302>
 800040e:	2e00      	cmp	r6, #0
 8000410:	d100      	bne.n	8000414 <__aeabi_dadd+0x13c>
 8000412:	e083      	b.n	800051c <__aeabi_dadd+0x244>
 8000414:	4eaf      	ldr	r6, [pc, #700]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000416:	42b5      	cmp	r5, r6
 8000418:	d060      	beq.n	80004dc <__aeabi_dadd+0x204>
 800041a:	2680      	movs	r6, #128	; 0x80
 800041c:	0436      	lsls	r6, r6, #16
 800041e:	4337      	orrs	r7, r6
 8000420:	46b8      	mov	r8, r7
 8000422:	2b38      	cmp	r3, #56	; 0x38
 8000424:	dc00      	bgt.n	8000428 <__aeabi_dadd+0x150>
 8000426:	e13e      	b.n	80006a6 <__aeabi_dadd+0x3ce>
 8000428:	4643      	mov	r3, r8
 800042a:	4313      	orrs	r3, r2
 800042c:	001f      	movs	r7, r3
 800042e:	1e7a      	subs	r2, r7, #1
 8000430:	4197      	sbcs	r7, r2
 8000432:	183f      	adds	r7, r7, r0
 8000434:	4287      	cmp	r7, r0
 8000436:	4180      	sbcs	r0, r0
 8000438:	4240      	negs	r0, r0
 800043a:	1809      	adds	r1, r1, r0
 800043c:	020b      	lsls	r3, r1, #8
 800043e:	d400      	bmi.n	8000442 <__aeabi_dadd+0x16a>
 8000440:	e0b0      	b.n	80005a4 <__aeabi_dadd+0x2cc>
 8000442:	4ba4      	ldr	r3, [pc, #656]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000444:	3501      	adds	r5, #1
 8000446:	429d      	cmp	r5, r3
 8000448:	d100      	bne.n	800044c <__aeabi_dadd+0x174>
 800044a:	e0c3      	b.n	80005d4 <__aeabi_dadd+0x2fc>
 800044c:	4aa2      	ldr	r2, [pc, #648]	; (80006d8 <__aeabi_dadd+0x400>)
 800044e:	087b      	lsrs	r3, r7, #1
 8000450:	400a      	ands	r2, r1
 8000452:	2101      	movs	r1, #1
 8000454:	400f      	ands	r7, r1
 8000456:	431f      	orrs	r7, r3
 8000458:	0851      	lsrs	r1, r2, #1
 800045a:	07d3      	lsls	r3, r2, #31
 800045c:	2207      	movs	r2, #7
 800045e:	431f      	orrs	r7, r3
 8000460:	403a      	ands	r2, r7
 8000462:	e799      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000464:	4e9b      	ldr	r6, [pc, #620]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000466:	42b5      	cmp	r5, r6
 8000468:	d038      	beq.n	80004dc <__aeabi_dadd+0x204>
 800046a:	2680      	movs	r6, #128	; 0x80
 800046c:	0436      	lsls	r6, r6, #16
 800046e:	4337      	orrs	r7, r6
 8000470:	46b8      	mov	r8, r7
 8000472:	2b38      	cmp	r3, #56	; 0x38
 8000474:	dd00      	ble.n	8000478 <__aeabi_dadd+0x1a0>
 8000476:	e0dc      	b.n	8000632 <__aeabi_dadd+0x35a>
 8000478:	2b1f      	cmp	r3, #31
 800047a:	dc00      	bgt.n	800047e <__aeabi_dadd+0x1a6>
 800047c:	e130      	b.n	80006e0 <__aeabi_dadd+0x408>
 800047e:	001e      	movs	r6, r3
 8000480:	4647      	mov	r7, r8
 8000482:	3e20      	subs	r6, #32
 8000484:	40f7      	lsrs	r7, r6
 8000486:	46bc      	mov	ip, r7
 8000488:	2b20      	cmp	r3, #32
 800048a:	d004      	beq.n	8000496 <__aeabi_dadd+0x1be>
 800048c:	2640      	movs	r6, #64	; 0x40
 800048e:	1af3      	subs	r3, r6, r3
 8000490:	4646      	mov	r6, r8
 8000492:	409e      	lsls	r6, r3
 8000494:	4332      	orrs	r2, r6
 8000496:	0017      	movs	r7, r2
 8000498:	4663      	mov	r3, ip
 800049a:	1e7a      	subs	r2, r7, #1
 800049c:	4197      	sbcs	r7, r2
 800049e:	431f      	orrs	r7, r3
 80004a0:	e0cc      	b.n	800063c <__aeabi_dadd+0x364>
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d100      	bne.n	80004a8 <__aeabi_dadd+0x1d0>
 80004a6:	e204      	b.n	80008b2 <__aeabi_dadd+0x5da>
 80004a8:	4643      	mov	r3, r8
 80004aa:	4313      	orrs	r3, r2
 80004ac:	d100      	bne.n	80004b0 <__aeabi_dadd+0x1d8>
 80004ae:	e159      	b.n	8000764 <__aeabi_dadd+0x48c>
 80004b0:	074b      	lsls	r3, r1, #29
 80004b2:	08c0      	lsrs	r0, r0, #3
 80004b4:	4318      	orrs	r0, r3
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	08c9      	lsrs	r1, r1, #3
 80004ba:	031b      	lsls	r3, r3, #12
 80004bc:	4219      	tst	r1, r3
 80004be:	d008      	beq.n	80004d2 <__aeabi_dadd+0x1fa>
 80004c0:	4645      	mov	r5, r8
 80004c2:	08ed      	lsrs	r5, r5, #3
 80004c4:	421d      	tst	r5, r3
 80004c6:	d104      	bne.n	80004d2 <__aeabi_dadd+0x1fa>
 80004c8:	4643      	mov	r3, r8
 80004ca:	08d0      	lsrs	r0, r2, #3
 80004cc:	0759      	lsls	r1, r3, #29
 80004ce:	4308      	orrs	r0, r1
 80004d0:	0029      	movs	r1, r5
 80004d2:	0f42      	lsrs	r2, r0, #29
 80004d4:	00c9      	lsls	r1, r1, #3
 80004d6:	4d7f      	ldr	r5, [pc, #508]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80004d8:	4311      	orrs	r1, r2
 80004da:	00c0      	lsls	r0, r0, #3
 80004dc:	074b      	lsls	r3, r1, #29
 80004de:	08ca      	lsrs	r2, r1, #3
 80004e0:	497c      	ldr	r1, [pc, #496]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80004e2:	08c0      	lsrs	r0, r0, #3
 80004e4:	4303      	orrs	r3, r0
 80004e6:	428d      	cmp	r5, r1
 80004e8:	d068      	beq.n	80005bc <__aeabi_dadd+0x2e4>
 80004ea:	0312      	lsls	r2, r2, #12
 80004ec:	056d      	lsls	r5, r5, #21
 80004ee:	0b12      	lsrs	r2, r2, #12
 80004f0:	0d6d      	lsrs	r5, r5, #21
 80004f2:	2100      	movs	r1, #0
 80004f4:	0312      	lsls	r2, r2, #12
 80004f6:	0018      	movs	r0, r3
 80004f8:	0b13      	lsrs	r3, r2, #12
 80004fa:	0d0a      	lsrs	r2, r1, #20
 80004fc:	0512      	lsls	r2, r2, #20
 80004fe:	431a      	orrs	r2, r3
 8000500:	4b76      	ldr	r3, [pc, #472]	; (80006dc <__aeabi_dadd+0x404>)
 8000502:	052d      	lsls	r5, r5, #20
 8000504:	4013      	ands	r3, r2
 8000506:	432b      	orrs	r3, r5
 8000508:	005b      	lsls	r3, r3, #1
 800050a:	07e4      	lsls	r4, r4, #31
 800050c:	085b      	lsrs	r3, r3, #1
 800050e:	4323      	orrs	r3, r4
 8000510:	0019      	movs	r1, r3
 8000512:	bc1c      	pop	{r2, r3, r4}
 8000514:	4690      	mov	r8, r2
 8000516:	4699      	mov	r9, r3
 8000518:	46a2      	mov	sl, r4
 800051a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800051c:	003e      	movs	r6, r7
 800051e:	4316      	orrs	r6, r2
 8000520:	d012      	beq.n	8000548 <__aeabi_dadd+0x270>
 8000522:	1e5e      	subs	r6, r3, #1
 8000524:	2e00      	cmp	r6, #0
 8000526:	d000      	beq.n	800052a <__aeabi_dadd+0x252>
 8000528:	e100      	b.n	800072c <__aeabi_dadd+0x454>
 800052a:	1887      	adds	r7, r0, r2
 800052c:	4287      	cmp	r7, r0
 800052e:	4180      	sbcs	r0, r0
 8000530:	4441      	add	r1, r8
 8000532:	4240      	negs	r0, r0
 8000534:	1809      	adds	r1, r1, r0
 8000536:	2501      	movs	r5, #1
 8000538:	020b      	lsls	r3, r1, #8
 800053a:	d533      	bpl.n	80005a4 <__aeabi_dadd+0x2cc>
 800053c:	2502      	movs	r5, #2
 800053e:	e785      	b.n	800044c <__aeabi_dadd+0x174>
 8000540:	4664      	mov	r4, ip
 8000542:	0033      	movs	r3, r6
 8000544:	4641      	mov	r1, r8
 8000546:	0010      	movs	r0, r2
 8000548:	001d      	movs	r5, r3
 800054a:	e7c7      	b.n	80004dc <__aeabi_dadd+0x204>
 800054c:	2d00      	cmp	r5, #0
 800054e:	d000      	beq.n	8000552 <__aeabi_dadd+0x27a>
 8000550:	e0da      	b.n	8000708 <__aeabi_dadd+0x430>
 8000552:	000c      	movs	r4, r1
 8000554:	4304      	orrs	r4, r0
 8000556:	d0f3      	beq.n	8000540 <__aeabi_dadd+0x268>
 8000558:	1c5c      	adds	r4, r3, #1
 800055a:	d100      	bne.n	800055e <__aeabi_dadd+0x286>
 800055c:	e19f      	b.n	800089e <__aeabi_dadd+0x5c6>
 800055e:	4c5d      	ldr	r4, [pc, #372]	; (80006d4 <__aeabi_dadd+0x3fc>)
 8000560:	42a6      	cmp	r6, r4
 8000562:	d100      	bne.n	8000566 <__aeabi_dadd+0x28e>
 8000564:	e12f      	b.n	80007c6 <__aeabi_dadd+0x4ee>
 8000566:	43db      	mvns	r3, r3
 8000568:	2b38      	cmp	r3, #56	; 0x38
 800056a:	dd00      	ble.n	800056e <__aeabi_dadd+0x296>
 800056c:	e166      	b.n	800083c <__aeabi_dadd+0x564>
 800056e:	2b1f      	cmp	r3, #31
 8000570:	dd00      	ble.n	8000574 <__aeabi_dadd+0x29c>
 8000572:	e183      	b.n	800087c <__aeabi_dadd+0x5a4>
 8000574:	2420      	movs	r4, #32
 8000576:	0005      	movs	r5, r0
 8000578:	1ae4      	subs	r4, r4, r3
 800057a:	000f      	movs	r7, r1
 800057c:	40dd      	lsrs	r5, r3
 800057e:	40d9      	lsrs	r1, r3
 8000580:	40a0      	lsls	r0, r4
 8000582:	4643      	mov	r3, r8
 8000584:	40a7      	lsls	r7, r4
 8000586:	1a5b      	subs	r3, r3, r1
 8000588:	1e44      	subs	r4, r0, #1
 800058a:	41a0      	sbcs	r0, r4
 800058c:	4698      	mov	r8, r3
 800058e:	432f      	orrs	r7, r5
 8000590:	4338      	orrs	r0, r7
 8000592:	1a17      	subs	r7, r2, r0
 8000594:	42ba      	cmp	r2, r7
 8000596:	4192      	sbcs	r2, r2
 8000598:	4643      	mov	r3, r8
 800059a:	4252      	negs	r2, r2
 800059c:	1a99      	subs	r1, r3, r2
 800059e:	4664      	mov	r4, ip
 80005a0:	0035      	movs	r5, r6
 80005a2:	e6ca      	b.n	800033a <__aeabi_dadd+0x62>
 80005a4:	2207      	movs	r2, #7
 80005a6:	403a      	ands	r2, r7
 80005a8:	2a00      	cmp	r2, #0
 80005aa:	d000      	beq.n	80005ae <__aeabi_dadd+0x2d6>
 80005ac:	e6f6      	b.n	800039c <__aeabi_dadd+0xc4>
 80005ae:	074b      	lsls	r3, r1, #29
 80005b0:	08ca      	lsrs	r2, r1, #3
 80005b2:	4948      	ldr	r1, [pc, #288]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005b4:	08ff      	lsrs	r7, r7, #3
 80005b6:	433b      	orrs	r3, r7
 80005b8:	428d      	cmp	r5, r1
 80005ba:	d196      	bne.n	80004ea <__aeabi_dadd+0x212>
 80005bc:	0019      	movs	r1, r3
 80005be:	4311      	orrs	r1, r2
 80005c0:	d100      	bne.n	80005c4 <__aeabi_dadd+0x2ec>
 80005c2:	e19e      	b.n	8000902 <__aeabi_dadd+0x62a>
 80005c4:	2180      	movs	r1, #128	; 0x80
 80005c6:	0309      	lsls	r1, r1, #12
 80005c8:	430a      	orrs	r2, r1
 80005ca:	0312      	lsls	r2, r2, #12
 80005cc:	0b12      	lsrs	r2, r2, #12
 80005ce:	4d41      	ldr	r5, [pc, #260]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005d0:	e78f      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80005d2:	0015      	movs	r5, r2
 80005d4:	2200      	movs	r2, #0
 80005d6:	2300      	movs	r3, #0
 80005d8:	e78b      	b.n	80004f2 <__aeabi_dadd+0x21a>
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_dadd+0x308>
 80005de:	e0c7      	b.n	8000770 <__aeabi_dadd+0x498>
 80005e0:	1c6b      	adds	r3, r5, #1
 80005e2:	055f      	lsls	r7, r3, #21
 80005e4:	0d7f      	lsrs	r7, r7, #21
 80005e6:	2f01      	cmp	r7, #1
 80005e8:	dc00      	bgt.n	80005ec <__aeabi_dadd+0x314>
 80005ea:	e0f1      	b.n	80007d0 <__aeabi_dadd+0x4f8>
 80005ec:	4d39      	ldr	r5, [pc, #228]	; (80006d4 <__aeabi_dadd+0x3fc>)
 80005ee:	42ab      	cmp	r3, r5
 80005f0:	d100      	bne.n	80005f4 <__aeabi_dadd+0x31c>
 80005f2:	e0b9      	b.n	8000768 <__aeabi_dadd+0x490>
 80005f4:	1885      	adds	r5, r0, r2
 80005f6:	000a      	movs	r2, r1
 80005f8:	4285      	cmp	r5, r0
 80005fa:	4189      	sbcs	r1, r1
 80005fc:	4442      	add	r2, r8
 80005fe:	4249      	negs	r1, r1
 8000600:	1851      	adds	r1, r2, r1
 8000602:	2207      	movs	r2, #7
 8000604:	07cf      	lsls	r7, r1, #31
 8000606:	086d      	lsrs	r5, r5, #1
 8000608:	432f      	orrs	r7, r5
 800060a:	0849      	lsrs	r1, r1, #1
 800060c:	403a      	ands	r2, r7
 800060e:	001d      	movs	r5, r3
 8000610:	e6c2      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000612:	2207      	movs	r2, #7
 8000614:	4930      	ldr	r1, [pc, #192]	; (80006d8 <__aeabi_dadd+0x400>)
 8000616:	1aed      	subs	r5, r5, r3
 8000618:	4031      	ands	r1, r6
 800061a:	403a      	ands	r2, r7
 800061c:	e6bc      	b.n	8000398 <__aeabi_dadd+0xc0>
 800061e:	003e      	movs	r6, r7
 8000620:	3828      	subs	r0, #40	; 0x28
 8000622:	4086      	lsls	r6, r0
 8000624:	2700      	movs	r7, #0
 8000626:	e69f      	b.n	8000368 <__aeabi_dadd+0x90>
 8000628:	0038      	movs	r0, r7
 800062a:	f001 f933 	bl	8001894 <__clzsi2>
 800062e:	3020      	adds	r0, #32
 8000630:	e68e      	b.n	8000350 <__aeabi_dadd+0x78>
 8000632:	4643      	mov	r3, r8
 8000634:	4313      	orrs	r3, r2
 8000636:	001f      	movs	r7, r3
 8000638:	1e7a      	subs	r2, r7, #1
 800063a:	4197      	sbcs	r7, r2
 800063c:	1bc7      	subs	r7, r0, r7
 800063e:	42b8      	cmp	r0, r7
 8000640:	4180      	sbcs	r0, r0
 8000642:	4240      	negs	r0, r0
 8000644:	1a09      	subs	r1, r1, r0
 8000646:	e678      	b.n	800033a <__aeabi_dadd+0x62>
 8000648:	000e      	movs	r6, r1
 800064a:	003b      	movs	r3, r7
 800064c:	4306      	orrs	r6, r0
 800064e:	4313      	orrs	r3, r2
 8000650:	2d00      	cmp	r5, #0
 8000652:	d161      	bne.n	8000718 <__aeabi_dadd+0x440>
 8000654:	2e00      	cmp	r6, #0
 8000656:	d000      	beq.n	800065a <__aeabi_dadd+0x382>
 8000658:	e0f4      	b.n	8000844 <__aeabi_dadd+0x56c>
 800065a:	2b00      	cmp	r3, #0
 800065c:	d100      	bne.n	8000660 <__aeabi_dadd+0x388>
 800065e:	e11b      	b.n	8000898 <__aeabi_dadd+0x5c0>
 8000660:	4664      	mov	r4, ip
 8000662:	0039      	movs	r1, r7
 8000664:	0010      	movs	r0, r2
 8000666:	e739      	b.n	80004dc <__aeabi_dadd+0x204>
 8000668:	4f1a      	ldr	r7, [pc, #104]	; (80006d4 <__aeabi_dadd+0x3fc>)
 800066a:	42bb      	cmp	r3, r7
 800066c:	d07a      	beq.n	8000764 <__aeabi_dadd+0x48c>
 800066e:	0033      	movs	r3, r6
 8000670:	e6ff      	b.n	8000472 <__aeabi_dadd+0x19a>
 8000672:	0030      	movs	r0, r6
 8000674:	3d1f      	subs	r5, #31
 8000676:	40e8      	lsrs	r0, r5
 8000678:	2b20      	cmp	r3, #32
 800067a:	d003      	beq.n	8000684 <__aeabi_dadd+0x3ac>
 800067c:	2140      	movs	r1, #64	; 0x40
 800067e:	1acb      	subs	r3, r1, r3
 8000680:	409e      	lsls	r6, r3
 8000682:	4337      	orrs	r7, r6
 8000684:	1e7b      	subs	r3, r7, #1
 8000686:	419f      	sbcs	r7, r3
 8000688:	2207      	movs	r2, #7
 800068a:	4307      	orrs	r7, r0
 800068c:	403a      	ands	r2, r7
 800068e:	2100      	movs	r1, #0
 8000690:	2500      	movs	r5, #0
 8000692:	e789      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 8000694:	1a17      	subs	r7, r2, r0
 8000696:	4643      	mov	r3, r8
 8000698:	42ba      	cmp	r2, r7
 800069a:	41b6      	sbcs	r6, r6
 800069c:	1a59      	subs	r1, r3, r1
 800069e:	4276      	negs	r6, r6
 80006a0:	1b8e      	subs	r6, r1, r6
 80006a2:	4664      	mov	r4, ip
 80006a4:	e64e      	b.n	8000344 <__aeabi_dadd+0x6c>
 80006a6:	2b1f      	cmp	r3, #31
 80006a8:	dd00      	ble.n	80006ac <__aeabi_dadd+0x3d4>
 80006aa:	e0ad      	b.n	8000808 <__aeabi_dadd+0x530>
 80006ac:	2620      	movs	r6, #32
 80006ae:	4647      	mov	r7, r8
 80006b0:	1af6      	subs	r6, r6, r3
 80006b2:	40b7      	lsls	r7, r6
 80006b4:	46b9      	mov	r9, r7
 80006b6:	0017      	movs	r7, r2
 80006b8:	46b2      	mov	sl, r6
 80006ba:	40df      	lsrs	r7, r3
 80006bc:	464e      	mov	r6, r9
 80006be:	433e      	orrs	r6, r7
 80006c0:	0037      	movs	r7, r6
 80006c2:	4656      	mov	r6, sl
 80006c4:	40b2      	lsls	r2, r6
 80006c6:	1e56      	subs	r6, r2, #1
 80006c8:	41b2      	sbcs	r2, r6
 80006ca:	4317      	orrs	r7, r2
 80006cc:	4642      	mov	r2, r8
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	1889      	adds	r1, r1, r2
 80006d2:	e6ae      	b.n	8000432 <__aeabi_dadd+0x15a>
 80006d4:	000007ff 	.word	0x000007ff
 80006d8:	ff7fffff 	.word	0xff7fffff
 80006dc:	800fffff 	.word	0x800fffff
 80006e0:	2620      	movs	r6, #32
 80006e2:	4647      	mov	r7, r8
 80006e4:	1af6      	subs	r6, r6, r3
 80006e6:	40b7      	lsls	r7, r6
 80006e8:	46b9      	mov	r9, r7
 80006ea:	0017      	movs	r7, r2
 80006ec:	46b2      	mov	sl, r6
 80006ee:	40df      	lsrs	r7, r3
 80006f0:	464e      	mov	r6, r9
 80006f2:	433e      	orrs	r6, r7
 80006f4:	0037      	movs	r7, r6
 80006f6:	4656      	mov	r6, sl
 80006f8:	40b2      	lsls	r2, r6
 80006fa:	1e56      	subs	r6, r2, #1
 80006fc:	41b2      	sbcs	r2, r6
 80006fe:	4317      	orrs	r7, r2
 8000700:	4642      	mov	r2, r8
 8000702:	40da      	lsrs	r2, r3
 8000704:	1a89      	subs	r1, r1, r2
 8000706:	e799      	b.n	800063c <__aeabi_dadd+0x364>
 8000708:	4c7f      	ldr	r4, [pc, #508]	; (8000908 <__aeabi_dadd+0x630>)
 800070a:	42a6      	cmp	r6, r4
 800070c:	d05b      	beq.n	80007c6 <__aeabi_dadd+0x4ee>
 800070e:	2480      	movs	r4, #128	; 0x80
 8000710:	0424      	lsls	r4, r4, #16
 8000712:	425b      	negs	r3, r3
 8000714:	4321      	orrs	r1, r4
 8000716:	e727      	b.n	8000568 <__aeabi_dadd+0x290>
 8000718:	2e00      	cmp	r6, #0
 800071a:	d10c      	bne.n	8000736 <__aeabi_dadd+0x45e>
 800071c:	2b00      	cmp	r3, #0
 800071e:	d100      	bne.n	8000722 <__aeabi_dadd+0x44a>
 8000720:	e0cb      	b.n	80008ba <__aeabi_dadd+0x5e2>
 8000722:	4664      	mov	r4, ip
 8000724:	0039      	movs	r1, r7
 8000726:	0010      	movs	r0, r2
 8000728:	4d77      	ldr	r5, [pc, #476]	; (8000908 <__aeabi_dadd+0x630>)
 800072a:	e6d7      	b.n	80004dc <__aeabi_dadd+0x204>
 800072c:	4f76      	ldr	r7, [pc, #472]	; (8000908 <__aeabi_dadd+0x630>)
 800072e:	42bb      	cmp	r3, r7
 8000730:	d018      	beq.n	8000764 <__aeabi_dadd+0x48c>
 8000732:	0033      	movs	r3, r6
 8000734:	e675      	b.n	8000422 <__aeabi_dadd+0x14a>
 8000736:	2b00      	cmp	r3, #0
 8000738:	d014      	beq.n	8000764 <__aeabi_dadd+0x48c>
 800073a:	074b      	lsls	r3, r1, #29
 800073c:	08c0      	lsrs	r0, r0, #3
 800073e:	4318      	orrs	r0, r3
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	08c9      	lsrs	r1, r1, #3
 8000744:	031b      	lsls	r3, r3, #12
 8000746:	4219      	tst	r1, r3
 8000748:	d007      	beq.n	800075a <__aeabi_dadd+0x482>
 800074a:	08fc      	lsrs	r4, r7, #3
 800074c:	421c      	tst	r4, r3
 800074e:	d104      	bne.n	800075a <__aeabi_dadd+0x482>
 8000750:	0779      	lsls	r1, r7, #29
 8000752:	08d0      	lsrs	r0, r2, #3
 8000754:	4308      	orrs	r0, r1
 8000756:	46e1      	mov	r9, ip
 8000758:	0021      	movs	r1, r4
 800075a:	464c      	mov	r4, r9
 800075c:	0f42      	lsrs	r2, r0, #29
 800075e:	00c9      	lsls	r1, r1, #3
 8000760:	4311      	orrs	r1, r2
 8000762:	00c0      	lsls	r0, r0, #3
 8000764:	4d68      	ldr	r5, [pc, #416]	; (8000908 <__aeabi_dadd+0x630>)
 8000766:	e6b9      	b.n	80004dc <__aeabi_dadd+0x204>
 8000768:	001d      	movs	r5, r3
 800076a:	2200      	movs	r2, #0
 800076c:	2300      	movs	r3, #0
 800076e:	e6c0      	b.n	80004f2 <__aeabi_dadd+0x21a>
 8000770:	2d00      	cmp	r5, #0
 8000772:	d15b      	bne.n	800082c <__aeabi_dadd+0x554>
 8000774:	000d      	movs	r5, r1
 8000776:	4305      	orrs	r5, r0
 8000778:	d100      	bne.n	800077c <__aeabi_dadd+0x4a4>
 800077a:	e6e2      	b.n	8000542 <__aeabi_dadd+0x26a>
 800077c:	1c5d      	adds	r5, r3, #1
 800077e:	d100      	bne.n	8000782 <__aeabi_dadd+0x4aa>
 8000780:	e0b0      	b.n	80008e4 <__aeabi_dadd+0x60c>
 8000782:	4d61      	ldr	r5, [pc, #388]	; (8000908 <__aeabi_dadd+0x630>)
 8000784:	42ae      	cmp	r6, r5
 8000786:	d01f      	beq.n	80007c8 <__aeabi_dadd+0x4f0>
 8000788:	43db      	mvns	r3, r3
 800078a:	2b38      	cmp	r3, #56	; 0x38
 800078c:	dc71      	bgt.n	8000872 <__aeabi_dadd+0x59a>
 800078e:	2b1f      	cmp	r3, #31
 8000790:	dd00      	ble.n	8000794 <__aeabi_dadd+0x4bc>
 8000792:	e096      	b.n	80008c2 <__aeabi_dadd+0x5ea>
 8000794:	2520      	movs	r5, #32
 8000796:	000f      	movs	r7, r1
 8000798:	1aed      	subs	r5, r5, r3
 800079a:	40af      	lsls	r7, r5
 800079c:	46b9      	mov	r9, r7
 800079e:	0007      	movs	r7, r0
 80007a0:	46aa      	mov	sl, r5
 80007a2:	40df      	lsrs	r7, r3
 80007a4:	464d      	mov	r5, r9
 80007a6:	433d      	orrs	r5, r7
 80007a8:	002f      	movs	r7, r5
 80007aa:	4655      	mov	r5, sl
 80007ac:	40a8      	lsls	r0, r5
 80007ae:	40d9      	lsrs	r1, r3
 80007b0:	1e45      	subs	r5, r0, #1
 80007b2:	41a8      	sbcs	r0, r5
 80007b4:	4488      	add	r8, r1
 80007b6:	4307      	orrs	r7, r0
 80007b8:	18bf      	adds	r7, r7, r2
 80007ba:	4297      	cmp	r7, r2
 80007bc:	4192      	sbcs	r2, r2
 80007be:	4251      	negs	r1, r2
 80007c0:	4441      	add	r1, r8
 80007c2:	0035      	movs	r5, r6
 80007c4:	e63a      	b.n	800043c <__aeabi_dadd+0x164>
 80007c6:	4664      	mov	r4, ip
 80007c8:	0035      	movs	r5, r6
 80007ca:	4641      	mov	r1, r8
 80007cc:	0010      	movs	r0, r2
 80007ce:	e685      	b.n	80004dc <__aeabi_dadd+0x204>
 80007d0:	000b      	movs	r3, r1
 80007d2:	4303      	orrs	r3, r0
 80007d4:	2d00      	cmp	r5, #0
 80007d6:	d000      	beq.n	80007da <__aeabi_dadd+0x502>
 80007d8:	e663      	b.n	80004a2 <__aeabi_dadd+0x1ca>
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d0f5      	beq.n	80007ca <__aeabi_dadd+0x4f2>
 80007de:	4643      	mov	r3, r8
 80007e0:	4313      	orrs	r3, r2
 80007e2:	d100      	bne.n	80007e6 <__aeabi_dadd+0x50e>
 80007e4:	e67a      	b.n	80004dc <__aeabi_dadd+0x204>
 80007e6:	1887      	adds	r7, r0, r2
 80007e8:	4287      	cmp	r7, r0
 80007ea:	4180      	sbcs	r0, r0
 80007ec:	2207      	movs	r2, #7
 80007ee:	4441      	add	r1, r8
 80007f0:	4240      	negs	r0, r0
 80007f2:	1809      	adds	r1, r1, r0
 80007f4:	403a      	ands	r2, r7
 80007f6:	020b      	lsls	r3, r1, #8
 80007f8:	d400      	bmi.n	80007fc <__aeabi_dadd+0x524>
 80007fa:	e6d5      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 80007fc:	4b43      	ldr	r3, [pc, #268]	; (800090c <__aeabi_dadd+0x634>)
 80007fe:	3501      	adds	r5, #1
 8000800:	4019      	ands	r1, r3
 8000802:	e5c9      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000804:	0038      	movs	r0, r7
 8000806:	e669      	b.n	80004dc <__aeabi_dadd+0x204>
 8000808:	001e      	movs	r6, r3
 800080a:	4647      	mov	r7, r8
 800080c:	3e20      	subs	r6, #32
 800080e:	40f7      	lsrs	r7, r6
 8000810:	46bc      	mov	ip, r7
 8000812:	2b20      	cmp	r3, #32
 8000814:	d004      	beq.n	8000820 <__aeabi_dadd+0x548>
 8000816:	2640      	movs	r6, #64	; 0x40
 8000818:	1af3      	subs	r3, r6, r3
 800081a:	4646      	mov	r6, r8
 800081c:	409e      	lsls	r6, r3
 800081e:	4332      	orrs	r2, r6
 8000820:	0017      	movs	r7, r2
 8000822:	4663      	mov	r3, ip
 8000824:	1e7a      	subs	r2, r7, #1
 8000826:	4197      	sbcs	r7, r2
 8000828:	431f      	orrs	r7, r3
 800082a:	e602      	b.n	8000432 <__aeabi_dadd+0x15a>
 800082c:	4d36      	ldr	r5, [pc, #216]	; (8000908 <__aeabi_dadd+0x630>)
 800082e:	42ae      	cmp	r6, r5
 8000830:	d0ca      	beq.n	80007c8 <__aeabi_dadd+0x4f0>
 8000832:	2580      	movs	r5, #128	; 0x80
 8000834:	042d      	lsls	r5, r5, #16
 8000836:	425b      	negs	r3, r3
 8000838:	4329      	orrs	r1, r5
 800083a:	e7a6      	b.n	800078a <__aeabi_dadd+0x4b2>
 800083c:	4308      	orrs	r0, r1
 800083e:	1e41      	subs	r1, r0, #1
 8000840:	4188      	sbcs	r0, r1
 8000842:	e6a6      	b.n	8000592 <__aeabi_dadd+0x2ba>
 8000844:	2b00      	cmp	r3, #0
 8000846:	d100      	bne.n	800084a <__aeabi_dadd+0x572>
 8000848:	e648      	b.n	80004dc <__aeabi_dadd+0x204>
 800084a:	1a87      	subs	r7, r0, r2
 800084c:	4643      	mov	r3, r8
 800084e:	42b8      	cmp	r0, r7
 8000850:	41b6      	sbcs	r6, r6
 8000852:	1acb      	subs	r3, r1, r3
 8000854:	4276      	negs	r6, r6
 8000856:	1b9e      	subs	r6, r3, r6
 8000858:	0233      	lsls	r3, r6, #8
 800085a:	d54b      	bpl.n	80008f4 <__aeabi_dadd+0x61c>
 800085c:	1a17      	subs	r7, r2, r0
 800085e:	4643      	mov	r3, r8
 8000860:	42ba      	cmp	r2, r7
 8000862:	4192      	sbcs	r2, r2
 8000864:	1a59      	subs	r1, r3, r1
 8000866:	4252      	negs	r2, r2
 8000868:	1a89      	subs	r1, r1, r2
 800086a:	2207      	movs	r2, #7
 800086c:	4664      	mov	r4, ip
 800086e:	403a      	ands	r2, r7
 8000870:	e592      	b.n	8000398 <__aeabi_dadd+0xc0>
 8000872:	4301      	orrs	r1, r0
 8000874:	000f      	movs	r7, r1
 8000876:	1e79      	subs	r1, r7, #1
 8000878:	418f      	sbcs	r7, r1
 800087a:	e79d      	b.n	80007b8 <__aeabi_dadd+0x4e0>
 800087c:	001c      	movs	r4, r3
 800087e:	000f      	movs	r7, r1
 8000880:	3c20      	subs	r4, #32
 8000882:	40e7      	lsrs	r7, r4
 8000884:	2b20      	cmp	r3, #32
 8000886:	d003      	beq.n	8000890 <__aeabi_dadd+0x5b8>
 8000888:	2440      	movs	r4, #64	; 0x40
 800088a:	1ae3      	subs	r3, r4, r3
 800088c:	4099      	lsls	r1, r3
 800088e:	4308      	orrs	r0, r1
 8000890:	1e41      	subs	r1, r0, #1
 8000892:	4188      	sbcs	r0, r1
 8000894:	4338      	orrs	r0, r7
 8000896:	e67c      	b.n	8000592 <__aeabi_dadd+0x2ba>
 8000898:	2200      	movs	r2, #0
 800089a:	2400      	movs	r4, #0
 800089c:	e625      	b.n	80004ea <__aeabi_dadd+0x212>
 800089e:	1a17      	subs	r7, r2, r0
 80008a0:	4643      	mov	r3, r8
 80008a2:	42ba      	cmp	r2, r7
 80008a4:	4192      	sbcs	r2, r2
 80008a6:	1a59      	subs	r1, r3, r1
 80008a8:	4252      	negs	r2, r2
 80008aa:	1a89      	subs	r1, r1, r2
 80008ac:	4664      	mov	r4, ip
 80008ae:	0035      	movs	r5, r6
 80008b0:	e543      	b.n	800033a <__aeabi_dadd+0x62>
 80008b2:	4641      	mov	r1, r8
 80008b4:	0010      	movs	r0, r2
 80008b6:	4d14      	ldr	r5, [pc, #80]	; (8000908 <__aeabi_dadd+0x630>)
 80008b8:	e610      	b.n	80004dc <__aeabi_dadd+0x204>
 80008ba:	2280      	movs	r2, #128	; 0x80
 80008bc:	2400      	movs	r4, #0
 80008be:	0312      	lsls	r2, r2, #12
 80008c0:	e680      	b.n	80005c4 <__aeabi_dadd+0x2ec>
 80008c2:	001d      	movs	r5, r3
 80008c4:	000f      	movs	r7, r1
 80008c6:	3d20      	subs	r5, #32
 80008c8:	40ef      	lsrs	r7, r5
 80008ca:	46bc      	mov	ip, r7
 80008cc:	2b20      	cmp	r3, #32
 80008ce:	d003      	beq.n	80008d8 <__aeabi_dadd+0x600>
 80008d0:	2540      	movs	r5, #64	; 0x40
 80008d2:	1aeb      	subs	r3, r5, r3
 80008d4:	4099      	lsls	r1, r3
 80008d6:	4308      	orrs	r0, r1
 80008d8:	0007      	movs	r7, r0
 80008da:	4663      	mov	r3, ip
 80008dc:	1e78      	subs	r0, r7, #1
 80008de:	4187      	sbcs	r7, r0
 80008e0:	431f      	orrs	r7, r3
 80008e2:	e769      	b.n	80007b8 <__aeabi_dadd+0x4e0>
 80008e4:	1887      	adds	r7, r0, r2
 80008e6:	4297      	cmp	r7, r2
 80008e8:	419b      	sbcs	r3, r3
 80008ea:	4441      	add	r1, r8
 80008ec:	425b      	negs	r3, r3
 80008ee:	18c9      	adds	r1, r1, r3
 80008f0:	0035      	movs	r5, r6
 80008f2:	e5a3      	b.n	800043c <__aeabi_dadd+0x164>
 80008f4:	003b      	movs	r3, r7
 80008f6:	4333      	orrs	r3, r6
 80008f8:	d0ce      	beq.n	8000898 <__aeabi_dadd+0x5c0>
 80008fa:	2207      	movs	r2, #7
 80008fc:	0031      	movs	r1, r6
 80008fe:	403a      	ands	r2, r7
 8000900:	e652      	b.n	80005a8 <__aeabi_dadd+0x2d0>
 8000902:	2300      	movs	r3, #0
 8000904:	001a      	movs	r2, r3
 8000906:	e5f4      	b.n	80004f2 <__aeabi_dadd+0x21a>
 8000908:	000007ff 	.word	0x000007ff
 800090c:	ff7fffff 	.word	0xff7fffff

08000910 <__aeabi_ddiv>:
 8000910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000912:	4657      	mov	r7, sl
 8000914:	46de      	mov	lr, fp
 8000916:	464e      	mov	r6, r9
 8000918:	4645      	mov	r5, r8
 800091a:	b5e0      	push	{r5, r6, r7, lr}
 800091c:	4683      	mov	fp, r0
 800091e:	0007      	movs	r7, r0
 8000920:	030e      	lsls	r6, r1, #12
 8000922:	0048      	lsls	r0, r1, #1
 8000924:	b085      	sub	sp, #20
 8000926:	4692      	mov	sl, r2
 8000928:	001c      	movs	r4, r3
 800092a:	0b36      	lsrs	r6, r6, #12
 800092c:	0d40      	lsrs	r0, r0, #21
 800092e:	0fcd      	lsrs	r5, r1, #31
 8000930:	2800      	cmp	r0, #0
 8000932:	d100      	bne.n	8000936 <__aeabi_ddiv+0x26>
 8000934:	e09d      	b.n	8000a72 <__aeabi_ddiv+0x162>
 8000936:	4b95      	ldr	r3, [pc, #596]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000938:	4298      	cmp	r0, r3
 800093a:	d039      	beq.n	80009b0 <__aeabi_ddiv+0xa0>
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	00f6      	lsls	r6, r6, #3
 8000940:	041b      	lsls	r3, r3, #16
 8000942:	431e      	orrs	r6, r3
 8000944:	4a92      	ldr	r2, [pc, #584]	; (8000b90 <__aeabi_ddiv+0x280>)
 8000946:	0f7b      	lsrs	r3, r7, #29
 8000948:	4333      	orrs	r3, r6
 800094a:	4699      	mov	r9, r3
 800094c:	4694      	mov	ip, r2
 800094e:	0003      	movs	r3, r0
 8000950:	4463      	add	r3, ip
 8000952:	9300      	str	r3, [sp, #0]
 8000954:	2300      	movs	r3, #0
 8000956:	2600      	movs	r6, #0
 8000958:	00ff      	lsls	r7, r7, #3
 800095a:	9302      	str	r3, [sp, #8]
 800095c:	0323      	lsls	r3, r4, #12
 800095e:	0b1b      	lsrs	r3, r3, #12
 8000960:	4698      	mov	r8, r3
 8000962:	0063      	lsls	r3, r4, #1
 8000964:	0fe4      	lsrs	r4, r4, #31
 8000966:	4652      	mov	r2, sl
 8000968:	0d5b      	lsrs	r3, r3, #21
 800096a:	9401      	str	r4, [sp, #4]
 800096c:	d100      	bne.n	8000970 <__aeabi_ddiv+0x60>
 800096e:	e0b3      	b.n	8000ad8 <__aeabi_ddiv+0x1c8>
 8000970:	4986      	ldr	r1, [pc, #536]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000972:	428b      	cmp	r3, r1
 8000974:	d100      	bne.n	8000978 <__aeabi_ddiv+0x68>
 8000976:	e09e      	b.n	8000ab6 <__aeabi_ddiv+0x1a6>
 8000978:	4642      	mov	r2, r8
 800097a:	00d1      	lsls	r1, r2, #3
 800097c:	2280      	movs	r2, #128	; 0x80
 800097e:	0412      	lsls	r2, r2, #16
 8000980:	430a      	orrs	r2, r1
 8000982:	4651      	mov	r1, sl
 8000984:	0f49      	lsrs	r1, r1, #29
 8000986:	4311      	orrs	r1, r2
 8000988:	468b      	mov	fp, r1
 800098a:	4981      	ldr	r1, [pc, #516]	; (8000b90 <__aeabi_ddiv+0x280>)
 800098c:	4652      	mov	r2, sl
 800098e:	468c      	mov	ip, r1
 8000990:	9900      	ldr	r1, [sp, #0]
 8000992:	4463      	add	r3, ip
 8000994:	1acb      	subs	r3, r1, r3
 8000996:	2100      	movs	r1, #0
 8000998:	00d2      	lsls	r2, r2, #3
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	002b      	movs	r3, r5
 800099e:	4063      	eors	r3, r4
 80009a0:	469a      	mov	sl, r3
 80009a2:	2e0f      	cmp	r6, #15
 80009a4:	d900      	bls.n	80009a8 <__aeabi_ddiv+0x98>
 80009a6:	e105      	b.n	8000bb4 <__aeabi_ddiv+0x2a4>
 80009a8:	4b7a      	ldr	r3, [pc, #488]	; (8000b94 <__aeabi_ddiv+0x284>)
 80009aa:	00b6      	lsls	r6, r6, #2
 80009ac:	599b      	ldr	r3, [r3, r6]
 80009ae:	469f      	mov	pc, r3
 80009b0:	465b      	mov	r3, fp
 80009b2:	4333      	orrs	r3, r6
 80009b4:	4699      	mov	r9, r3
 80009b6:	d000      	beq.n	80009ba <__aeabi_ddiv+0xaa>
 80009b8:	e0b8      	b.n	8000b2c <__aeabi_ddiv+0x21c>
 80009ba:	2302      	movs	r3, #2
 80009bc:	2608      	movs	r6, #8
 80009be:	2700      	movs	r7, #0
 80009c0:	9000      	str	r0, [sp, #0]
 80009c2:	9302      	str	r3, [sp, #8]
 80009c4:	e7ca      	b.n	800095c <__aeabi_ddiv+0x4c>
 80009c6:	46cb      	mov	fp, r9
 80009c8:	003a      	movs	r2, r7
 80009ca:	9902      	ldr	r1, [sp, #8]
 80009cc:	9501      	str	r5, [sp, #4]
 80009ce:	9b01      	ldr	r3, [sp, #4]
 80009d0:	469a      	mov	sl, r3
 80009d2:	2902      	cmp	r1, #2
 80009d4:	d027      	beq.n	8000a26 <__aeabi_ddiv+0x116>
 80009d6:	2903      	cmp	r1, #3
 80009d8:	d100      	bne.n	80009dc <__aeabi_ddiv+0xcc>
 80009da:	e280      	b.n	8000ede <__aeabi_ddiv+0x5ce>
 80009dc:	2901      	cmp	r1, #1
 80009de:	d044      	beq.n	8000a6a <__aeabi_ddiv+0x15a>
 80009e0:	496d      	ldr	r1, [pc, #436]	; (8000b98 <__aeabi_ddiv+0x288>)
 80009e2:	9b00      	ldr	r3, [sp, #0]
 80009e4:	468c      	mov	ip, r1
 80009e6:	4463      	add	r3, ip
 80009e8:	001c      	movs	r4, r3
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	dd38      	ble.n	8000a60 <__aeabi_ddiv+0x150>
 80009ee:	0753      	lsls	r3, r2, #29
 80009f0:	d000      	beq.n	80009f4 <__aeabi_ddiv+0xe4>
 80009f2:	e213      	b.n	8000e1c <__aeabi_ddiv+0x50c>
 80009f4:	08d2      	lsrs	r2, r2, #3
 80009f6:	465b      	mov	r3, fp
 80009f8:	01db      	lsls	r3, r3, #7
 80009fa:	d509      	bpl.n	8000a10 <__aeabi_ddiv+0x100>
 80009fc:	4659      	mov	r1, fp
 80009fe:	4b67      	ldr	r3, [pc, #412]	; (8000b9c <__aeabi_ddiv+0x28c>)
 8000a00:	4019      	ands	r1, r3
 8000a02:	468b      	mov	fp, r1
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	00c9      	lsls	r1, r1, #3
 8000a08:	468c      	mov	ip, r1
 8000a0a:	9b00      	ldr	r3, [sp, #0]
 8000a0c:	4463      	add	r3, ip
 8000a0e:	001c      	movs	r4, r3
 8000a10:	4b63      	ldr	r3, [pc, #396]	; (8000ba0 <__aeabi_ddiv+0x290>)
 8000a12:	429c      	cmp	r4, r3
 8000a14:	dc07      	bgt.n	8000a26 <__aeabi_ddiv+0x116>
 8000a16:	465b      	mov	r3, fp
 8000a18:	0564      	lsls	r4, r4, #21
 8000a1a:	075f      	lsls	r7, r3, #29
 8000a1c:	025b      	lsls	r3, r3, #9
 8000a1e:	4317      	orrs	r7, r2
 8000a20:	0b1b      	lsrs	r3, r3, #12
 8000a22:	0d62      	lsrs	r2, r4, #21
 8000a24:	e002      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000a26:	2300      	movs	r3, #0
 8000a28:	2700      	movs	r7, #0
 8000a2a:	4a58      	ldr	r2, [pc, #352]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	031b      	lsls	r3, r3, #12
 8000a30:	0b1c      	lsrs	r4, r3, #12
 8000a32:	0d0b      	lsrs	r3, r1, #20
 8000a34:	051b      	lsls	r3, r3, #20
 8000a36:	4323      	orrs	r3, r4
 8000a38:	0514      	lsls	r4, r2, #20
 8000a3a:	4a5a      	ldr	r2, [pc, #360]	; (8000ba4 <__aeabi_ddiv+0x294>)
 8000a3c:	0038      	movs	r0, r7
 8000a3e:	4013      	ands	r3, r2
 8000a40:	431c      	orrs	r4, r3
 8000a42:	4653      	mov	r3, sl
 8000a44:	0064      	lsls	r4, r4, #1
 8000a46:	07db      	lsls	r3, r3, #31
 8000a48:	0864      	lsrs	r4, r4, #1
 8000a4a:	431c      	orrs	r4, r3
 8000a4c:	0021      	movs	r1, r4
 8000a4e:	b005      	add	sp, #20
 8000a50:	bc3c      	pop	{r2, r3, r4, r5}
 8000a52:	4690      	mov	r8, r2
 8000a54:	4699      	mov	r9, r3
 8000a56:	46a2      	mov	sl, r4
 8000a58:	46ab      	mov	fp, r5
 8000a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	4252      	negs	r2, r2
 8000a60:	2301      	movs	r3, #1
 8000a62:	1b1b      	subs	r3, r3, r4
 8000a64:	2b38      	cmp	r3, #56	; 0x38
 8000a66:	dc00      	bgt.n	8000a6a <__aeabi_ddiv+0x15a>
 8000a68:	e1ad      	b.n	8000dc6 <__aeabi_ddiv+0x4b6>
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	2700      	movs	r7, #0
 8000a70:	e7dc      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000a72:	465b      	mov	r3, fp
 8000a74:	4333      	orrs	r3, r6
 8000a76:	4699      	mov	r9, r3
 8000a78:	d05e      	beq.n	8000b38 <__aeabi_ddiv+0x228>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d100      	bne.n	8000a80 <__aeabi_ddiv+0x170>
 8000a7e:	e18a      	b.n	8000d96 <__aeabi_ddiv+0x486>
 8000a80:	0030      	movs	r0, r6
 8000a82:	f000 ff07 	bl	8001894 <__clzsi2>
 8000a86:	0003      	movs	r3, r0
 8000a88:	3b0b      	subs	r3, #11
 8000a8a:	2b1c      	cmp	r3, #28
 8000a8c:	dd00      	ble.n	8000a90 <__aeabi_ddiv+0x180>
 8000a8e:	e17b      	b.n	8000d88 <__aeabi_ddiv+0x478>
 8000a90:	221d      	movs	r2, #29
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	465a      	mov	r2, fp
 8000a96:	0001      	movs	r1, r0
 8000a98:	40da      	lsrs	r2, r3
 8000a9a:	3908      	subs	r1, #8
 8000a9c:	408e      	lsls	r6, r1
 8000a9e:	0013      	movs	r3, r2
 8000aa0:	465f      	mov	r7, fp
 8000aa2:	4333      	orrs	r3, r6
 8000aa4:	4699      	mov	r9, r3
 8000aa6:	408f      	lsls	r7, r1
 8000aa8:	4b3f      	ldr	r3, [pc, #252]	; (8000ba8 <__aeabi_ddiv+0x298>)
 8000aaa:	2600      	movs	r6, #0
 8000aac:	1a1b      	subs	r3, r3, r0
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	9302      	str	r3, [sp, #8]
 8000ab4:	e752      	b.n	800095c <__aeabi_ddiv+0x4c>
 8000ab6:	4641      	mov	r1, r8
 8000ab8:	4653      	mov	r3, sl
 8000aba:	430b      	orrs	r3, r1
 8000abc:	493b      	ldr	r1, [pc, #236]	; (8000bac <__aeabi_ddiv+0x29c>)
 8000abe:	469b      	mov	fp, r3
 8000ac0:	468c      	mov	ip, r1
 8000ac2:	9b00      	ldr	r3, [sp, #0]
 8000ac4:	4463      	add	r3, ip
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	465b      	mov	r3, fp
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d13b      	bne.n	8000b46 <__aeabi_ddiv+0x236>
 8000ace:	2302      	movs	r3, #2
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	431e      	orrs	r6, r3
 8000ad4:	2102      	movs	r1, #2
 8000ad6:	e761      	b.n	800099c <__aeabi_ddiv+0x8c>
 8000ad8:	4643      	mov	r3, r8
 8000ada:	4313      	orrs	r3, r2
 8000adc:	469b      	mov	fp, r3
 8000ade:	d037      	beq.n	8000b50 <__aeabi_ddiv+0x240>
 8000ae0:	4643      	mov	r3, r8
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d100      	bne.n	8000ae8 <__aeabi_ddiv+0x1d8>
 8000ae6:	e162      	b.n	8000dae <__aeabi_ddiv+0x49e>
 8000ae8:	4640      	mov	r0, r8
 8000aea:	f000 fed3 	bl	8001894 <__clzsi2>
 8000aee:	0003      	movs	r3, r0
 8000af0:	3b0b      	subs	r3, #11
 8000af2:	2b1c      	cmp	r3, #28
 8000af4:	dd00      	ble.n	8000af8 <__aeabi_ddiv+0x1e8>
 8000af6:	e153      	b.n	8000da0 <__aeabi_ddiv+0x490>
 8000af8:	0002      	movs	r2, r0
 8000afa:	4641      	mov	r1, r8
 8000afc:	3a08      	subs	r2, #8
 8000afe:	4091      	lsls	r1, r2
 8000b00:	4688      	mov	r8, r1
 8000b02:	211d      	movs	r1, #29
 8000b04:	1acb      	subs	r3, r1, r3
 8000b06:	4651      	mov	r1, sl
 8000b08:	40d9      	lsrs	r1, r3
 8000b0a:	000b      	movs	r3, r1
 8000b0c:	4641      	mov	r1, r8
 8000b0e:	430b      	orrs	r3, r1
 8000b10:	469b      	mov	fp, r3
 8000b12:	4653      	mov	r3, sl
 8000b14:	4093      	lsls	r3, r2
 8000b16:	001a      	movs	r2, r3
 8000b18:	9b00      	ldr	r3, [sp, #0]
 8000b1a:	4925      	ldr	r1, [pc, #148]	; (8000bb0 <__aeabi_ddiv+0x2a0>)
 8000b1c:	469c      	mov	ip, r3
 8000b1e:	4460      	add	r0, ip
 8000b20:	0003      	movs	r3, r0
 8000b22:	468c      	mov	ip, r1
 8000b24:	4463      	add	r3, ip
 8000b26:	9300      	str	r3, [sp, #0]
 8000b28:	2100      	movs	r1, #0
 8000b2a:	e737      	b.n	800099c <__aeabi_ddiv+0x8c>
 8000b2c:	2303      	movs	r3, #3
 8000b2e:	46b1      	mov	r9, r6
 8000b30:	9000      	str	r0, [sp, #0]
 8000b32:	260c      	movs	r6, #12
 8000b34:	9302      	str	r3, [sp, #8]
 8000b36:	e711      	b.n	800095c <__aeabi_ddiv+0x4c>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	9300      	str	r3, [sp, #0]
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	2604      	movs	r6, #4
 8000b40:	2700      	movs	r7, #0
 8000b42:	9302      	str	r3, [sp, #8]
 8000b44:	e70a      	b.n	800095c <__aeabi_ddiv+0x4c>
 8000b46:	2303      	movs	r3, #3
 8000b48:	46c3      	mov	fp, r8
 8000b4a:	431e      	orrs	r6, r3
 8000b4c:	2103      	movs	r1, #3
 8000b4e:	e725      	b.n	800099c <__aeabi_ddiv+0x8c>
 8000b50:	3301      	adds	r3, #1
 8000b52:	431e      	orrs	r6, r3
 8000b54:	2200      	movs	r2, #0
 8000b56:	2101      	movs	r1, #1
 8000b58:	e720      	b.n	800099c <__aeabi_ddiv+0x8c>
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	469a      	mov	sl, r3
 8000b5e:	2380      	movs	r3, #128	; 0x80
 8000b60:	2700      	movs	r7, #0
 8000b62:	031b      	lsls	r3, r3, #12
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000b66:	e761      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000b68:	2380      	movs	r3, #128	; 0x80
 8000b6a:	4649      	mov	r1, r9
 8000b6c:	031b      	lsls	r3, r3, #12
 8000b6e:	4219      	tst	r1, r3
 8000b70:	d100      	bne.n	8000b74 <__aeabi_ddiv+0x264>
 8000b72:	e0e2      	b.n	8000d3a <__aeabi_ddiv+0x42a>
 8000b74:	4659      	mov	r1, fp
 8000b76:	4219      	tst	r1, r3
 8000b78:	d000      	beq.n	8000b7c <__aeabi_ddiv+0x26c>
 8000b7a:	e0de      	b.n	8000d3a <__aeabi_ddiv+0x42a>
 8000b7c:	430b      	orrs	r3, r1
 8000b7e:	031b      	lsls	r3, r3, #12
 8000b80:	0017      	movs	r7, r2
 8000b82:	0b1b      	lsrs	r3, r3, #12
 8000b84:	46a2      	mov	sl, r4
 8000b86:	4a01      	ldr	r2, [pc, #4]	; (8000b8c <__aeabi_ddiv+0x27c>)
 8000b88:	e750      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	000007ff 	.word	0x000007ff
 8000b90:	fffffc01 	.word	0xfffffc01
 8000b94:	08003d58 	.word	0x08003d58
 8000b98:	000003ff 	.word	0x000003ff
 8000b9c:	feffffff 	.word	0xfeffffff
 8000ba0:	000007fe 	.word	0x000007fe
 8000ba4:	800fffff 	.word	0x800fffff
 8000ba8:	fffffc0d 	.word	0xfffffc0d
 8000bac:	fffff801 	.word	0xfffff801
 8000bb0:	000003f3 	.word	0x000003f3
 8000bb4:	45d9      	cmp	r9, fp
 8000bb6:	d900      	bls.n	8000bba <__aeabi_ddiv+0x2aa>
 8000bb8:	e0cb      	b.n	8000d52 <__aeabi_ddiv+0x442>
 8000bba:	d100      	bne.n	8000bbe <__aeabi_ddiv+0x2ae>
 8000bbc:	e0c6      	b.n	8000d4c <__aeabi_ddiv+0x43c>
 8000bbe:	003c      	movs	r4, r7
 8000bc0:	4648      	mov	r0, r9
 8000bc2:	2700      	movs	r7, #0
 8000bc4:	9b00      	ldr	r3, [sp, #0]
 8000bc6:	3b01      	subs	r3, #1
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	465b      	mov	r3, fp
 8000bcc:	0e16      	lsrs	r6, r2, #24
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	431e      	orrs	r6, r3
 8000bd2:	0213      	lsls	r3, r2, #8
 8000bd4:	4698      	mov	r8, r3
 8000bd6:	0433      	lsls	r3, r6, #16
 8000bd8:	0c1b      	lsrs	r3, r3, #16
 8000bda:	4699      	mov	r9, r3
 8000bdc:	0c31      	lsrs	r1, r6, #16
 8000bde:	9101      	str	r1, [sp, #4]
 8000be0:	f7ff fb18 	bl	8000214 <__aeabi_uidivmod>
 8000be4:	464a      	mov	r2, r9
 8000be6:	4342      	muls	r2, r0
 8000be8:	040b      	lsls	r3, r1, #16
 8000bea:	0c21      	lsrs	r1, r4, #16
 8000bec:	0005      	movs	r5, r0
 8000bee:	4319      	orrs	r1, r3
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	d907      	bls.n	8000c04 <__aeabi_ddiv+0x2f4>
 8000bf4:	1989      	adds	r1, r1, r6
 8000bf6:	3d01      	subs	r5, #1
 8000bf8:	428e      	cmp	r6, r1
 8000bfa:	d803      	bhi.n	8000c04 <__aeabi_ddiv+0x2f4>
 8000bfc:	428a      	cmp	r2, r1
 8000bfe:	d901      	bls.n	8000c04 <__aeabi_ddiv+0x2f4>
 8000c00:	1e85      	subs	r5, r0, #2
 8000c02:	1989      	adds	r1, r1, r6
 8000c04:	1a88      	subs	r0, r1, r2
 8000c06:	9901      	ldr	r1, [sp, #4]
 8000c08:	f7ff fb04 	bl	8000214 <__aeabi_uidivmod>
 8000c0c:	0409      	lsls	r1, r1, #16
 8000c0e:	468c      	mov	ip, r1
 8000c10:	464a      	mov	r2, r9
 8000c12:	0421      	lsls	r1, r4, #16
 8000c14:	4664      	mov	r4, ip
 8000c16:	4342      	muls	r2, r0
 8000c18:	0c09      	lsrs	r1, r1, #16
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	4321      	orrs	r1, r4
 8000c1e:	428a      	cmp	r2, r1
 8000c20:	d904      	bls.n	8000c2c <__aeabi_ddiv+0x31c>
 8000c22:	1989      	adds	r1, r1, r6
 8000c24:	3b01      	subs	r3, #1
 8000c26:	428e      	cmp	r6, r1
 8000c28:	d800      	bhi.n	8000c2c <__aeabi_ddiv+0x31c>
 8000c2a:	e0f1      	b.n	8000e10 <__aeabi_ddiv+0x500>
 8000c2c:	042d      	lsls	r5, r5, #16
 8000c2e:	431d      	orrs	r5, r3
 8000c30:	46ab      	mov	fp, r5
 8000c32:	4643      	mov	r3, r8
 8000c34:	1a89      	subs	r1, r1, r2
 8000c36:	4642      	mov	r2, r8
 8000c38:	0c28      	lsrs	r0, r5, #16
 8000c3a:	0412      	lsls	r2, r2, #16
 8000c3c:	0c1d      	lsrs	r5, r3, #16
 8000c3e:	465b      	mov	r3, fp
 8000c40:	0c14      	lsrs	r4, r2, #16
 8000c42:	0022      	movs	r2, r4
 8000c44:	041b      	lsls	r3, r3, #16
 8000c46:	0c1b      	lsrs	r3, r3, #16
 8000c48:	435a      	muls	r2, r3
 8000c4a:	9403      	str	r4, [sp, #12]
 8000c4c:	436b      	muls	r3, r5
 8000c4e:	4344      	muls	r4, r0
 8000c50:	9502      	str	r5, [sp, #8]
 8000c52:	4368      	muls	r0, r5
 8000c54:	191b      	adds	r3, r3, r4
 8000c56:	0c15      	lsrs	r5, r2, #16
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	429c      	cmp	r4, r3
 8000c5c:	d903      	bls.n	8000c66 <__aeabi_ddiv+0x356>
 8000c5e:	2480      	movs	r4, #128	; 0x80
 8000c60:	0264      	lsls	r4, r4, #9
 8000c62:	46a4      	mov	ip, r4
 8000c64:	4460      	add	r0, ip
 8000c66:	0c1c      	lsrs	r4, r3, #16
 8000c68:	0415      	lsls	r5, r2, #16
 8000c6a:	041b      	lsls	r3, r3, #16
 8000c6c:	0c2d      	lsrs	r5, r5, #16
 8000c6e:	1820      	adds	r0, r4, r0
 8000c70:	195d      	adds	r5, r3, r5
 8000c72:	4281      	cmp	r1, r0
 8000c74:	d377      	bcc.n	8000d66 <__aeabi_ddiv+0x456>
 8000c76:	d073      	beq.n	8000d60 <__aeabi_ddiv+0x450>
 8000c78:	1a0c      	subs	r4, r1, r0
 8000c7a:	4aa2      	ldr	r2, [pc, #648]	; (8000f04 <__aeabi_ddiv+0x5f4>)
 8000c7c:	1b7d      	subs	r5, r7, r5
 8000c7e:	42af      	cmp	r7, r5
 8000c80:	41bf      	sbcs	r7, r7
 8000c82:	4694      	mov	ip, r2
 8000c84:	9b00      	ldr	r3, [sp, #0]
 8000c86:	427f      	negs	r7, r7
 8000c88:	4463      	add	r3, ip
 8000c8a:	1be0      	subs	r0, r4, r7
 8000c8c:	001c      	movs	r4, r3
 8000c8e:	4286      	cmp	r6, r0
 8000c90:	d100      	bne.n	8000c94 <__aeabi_ddiv+0x384>
 8000c92:	e0db      	b.n	8000e4c <__aeabi_ddiv+0x53c>
 8000c94:	9901      	ldr	r1, [sp, #4]
 8000c96:	f7ff fabd 	bl	8000214 <__aeabi_uidivmod>
 8000c9a:	464a      	mov	r2, r9
 8000c9c:	4342      	muls	r2, r0
 8000c9e:	040b      	lsls	r3, r1, #16
 8000ca0:	0c29      	lsrs	r1, r5, #16
 8000ca2:	0007      	movs	r7, r0
 8000ca4:	4319      	orrs	r1, r3
 8000ca6:	428a      	cmp	r2, r1
 8000ca8:	d907      	bls.n	8000cba <__aeabi_ddiv+0x3aa>
 8000caa:	1989      	adds	r1, r1, r6
 8000cac:	3f01      	subs	r7, #1
 8000cae:	428e      	cmp	r6, r1
 8000cb0:	d803      	bhi.n	8000cba <__aeabi_ddiv+0x3aa>
 8000cb2:	428a      	cmp	r2, r1
 8000cb4:	d901      	bls.n	8000cba <__aeabi_ddiv+0x3aa>
 8000cb6:	1e87      	subs	r7, r0, #2
 8000cb8:	1989      	adds	r1, r1, r6
 8000cba:	1a88      	subs	r0, r1, r2
 8000cbc:	9901      	ldr	r1, [sp, #4]
 8000cbe:	f7ff faa9 	bl	8000214 <__aeabi_uidivmod>
 8000cc2:	0409      	lsls	r1, r1, #16
 8000cc4:	464a      	mov	r2, r9
 8000cc6:	4689      	mov	r9, r1
 8000cc8:	0429      	lsls	r1, r5, #16
 8000cca:	464d      	mov	r5, r9
 8000ccc:	4342      	muls	r2, r0
 8000cce:	0c09      	lsrs	r1, r1, #16
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	4329      	orrs	r1, r5
 8000cd4:	428a      	cmp	r2, r1
 8000cd6:	d907      	bls.n	8000ce8 <__aeabi_ddiv+0x3d8>
 8000cd8:	1989      	adds	r1, r1, r6
 8000cda:	3b01      	subs	r3, #1
 8000cdc:	428e      	cmp	r6, r1
 8000cde:	d803      	bhi.n	8000ce8 <__aeabi_ddiv+0x3d8>
 8000ce0:	428a      	cmp	r2, r1
 8000ce2:	d901      	bls.n	8000ce8 <__aeabi_ddiv+0x3d8>
 8000ce4:	1e83      	subs	r3, r0, #2
 8000ce6:	1989      	adds	r1, r1, r6
 8000ce8:	043f      	lsls	r7, r7, #16
 8000cea:	1a89      	subs	r1, r1, r2
 8000cec:	003a      	movs	r2, r7
 8000cee:	9f03      	ldr	r7, [sp, #12]
 8000cf0:	431a      	orrs	r2, r3
 8000cf2:	0038      	movs	r0, r7
 8000cf4:	0413      	lsls	r3, r2, #16
 8000cf6:	0c1b      	lsrs	r3, r3, #16
 8000cf8:	4358      	muls	r0, r3
 8000cfa:	4681      	mov	r9, r0
 8000cfc:	9802      	ldr	r0, [sp, #8]
 8000cfe:	0c15      	lsrs	r5, r2, #16
 8000d00:	436f      	muls	r7, r5
 8000d02:	4343      	muls	r3, r0
 8000d04:	4345      	muls	r5, r0
 8000d06:	4648      	mov	r0, r9
 8000d08:	0c00      	lsrs	r0, r0, #16
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	19db      	adds	r3, r3, r7
 8000d0e:	4463      	add	r3, ip
 8000d10:	429f      	cmp	r7, r3
 8000d12:	d903      	bls.n	8000d1c <__aeabi_ddiv+0x40c>
 8000d14:	2080      	movs	r0, #128	; 0x80
 8000d16:	0240      	lsls	r0, r0, #9
 8000d18:	4684      	mov	ip, r0
 8000d1a:	4465      	add	r5, ip
 8000d1c:	4648      	mov	r0, r9
 8000d1e:	0c1f      	lsrs	r7, r3, #16
 8000d20:	0400      	lsls	r0, r0, #16
 8000d22:	041b      	lsls	r3, r3, #16
 8000d24:	0c00      	lsrs	r0, r0, #16
 8000d26:	197d      	adds	r5, r7, r5
 8000d28:	1818      	adds	r0, r3, r0
 8000d2a:	42a9      	cmp	r1, r5
 8000d2c:	d200      	bcs.n	8000d30 <__aeabi_ddiv+0x420>
 8000d2e:	e084      	b.n	8000e3a <__aeabi_ddiv+0x52a>
 8000d30:	d100      	bne.n	8000d34 <__aeabi_ddiv+0x424>
 8000d32:	e07f      	b.n	8000e34 <__aeabi_ddiv+0x524>
 8000d34:	2301      	movs	r3, #1
 8000d36:	431a      	orrs	r2, r3
 8000d38:	e657      	b.n	80009ea <__aeabi_ddiv+0xda>
 8000d3a:	2380      	movs	r3, #128	; 0x80
 8000d3c:	464a      	mov	r2, r9
 8000d3e:	031b      	lsls	r3, r3, #12
 8000d40:	4313      	orrs	r3, r2
 8000d42:	031b      	lsls	r3, r3, #12
 8000d44:	0b1b      	lsrs	r3, r3, #12
 8000d46:	46aa      	mov	sl, r5
 8000d48:	4a6f      	ldr	r2, [pc, #444]	; (8000f08 <__aeabi_ddiv+0x5f8>)
 8000d4a:	e66f      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000d4c:	42ba      	cmp	r2, r7
 8000d4e:	d900      	bls.n	8000d52 <__aeabi_ddiv+0x442>
 8000d50:	e735      	b.n	8000bbe <__aeabi_ddiv+0x2ae>
 8000d52:	464b      	mov	r3, r9
 8000d54:	07dc      	lsls	r4, r3, #31
 8000d56:	0858      	lsrs	r0, r3, #1
 8000d58:	087b      	lsrs	r3, r7, #1
 8000d5a:	431c      	orrs	r4, r3
 8000d5c:	07ff      	lsls	r7, r7, #31
 8000d5e:	e734      	b.n	8000bca <__aeabi_ddiv+0x2ba>
 8000d60:	2400      	movs	r4, #0
 8000d62:	42af      	cmp	r7, r5
 8000d64:	d289      	bcs.n	8000c7a <__aeabi_ddiv+0x36a>
 8000d66:	4447      	add	r7, r8
 8000d68:	4547      	cmp	r7, r8
 8000d6a:	41a4      	sbcs	r4, r4
 8000d6c:	465b      	mov	r3, fp
 8000d6e:	4264      	negs	r4, r4
 8000d70:	19a4      	adds	r4, r4, r6
 8000d72:	1864      	adds	r4, r4, r1
 8000d74:	3b01      	subs	r3, #1
 8000d76:	42a6      	cmp	r6, r4
 8000d78:	d21e      	bcs.n	8000db8 <__aeabi_ddiv+0x4a8>
 8000d7a:	42a0      	cmp	r0, r4
 8000d7c:	d86d      	bhi.n	8000e5a <__aeabi_ddiv+0x54a>
 8000d7e:	d100      	bne.n	8000d82 <__aeabi_ddiv+0x472>
 8000d80:	e0b6      	b.n	8000ef0 <__aeabi_ddiv+0x5e0>
 8000d82:	1a24      	subs	r4, r4, r0
 8000d84:	469b      	mov	fp, r3
 8000d86:	e778      	b.n	8000c7a <__aeabi_ddiv+0x36a>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	465a      	mov	r2, fp
 8000d8c:	3b28      	subs	r3, #40	; 0x28
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	2700      	movs	r7, #0
 8000d92:	4691      	mov	r9, r2
 8000d94:	e688      	b.n	8000aa8 <__aeabi_ddiv+0x198>
 8000d96:	4658      	mov	r0, fp
 8000d98:	f000 fd7c 	bl	8001894 <__clzsi2>
 8000d9c:	3020      	adds	r0, #32
 8000d9e:	e672      	b.n	8000a86 <__aeabi_ddiv+0x176>
 8000da0:	0003      	movs	r3, r0
 8000da2:	4652      	mov	r2, sl
 8000da4:	3b28      	subs	r3, #40	; 0x28
 8000da6:	409a      	lsls	r2, r3
 8000da8:	4693      	mov	fp, r2
 8000daa:	2200      	movs	r2, #0
 8000dac:	e6b4      	b.n	8000b18 <__aeabi_ddiv+0x208>
 8000dae:	4650      	mov	r0, sl
 8000db0:	f000 fd70 	bl	8001894 <__clzsi2>
 8000db4:	3020      	adds	r0, #32
 8000db6:	e69a      	b.n	8000aee <__aeabi_ddiv+0x1de>
 8000db8:	42a6      	cmp	r6, r4
 8000dba:	d1e2      	bne.n	8000d82 <__aeabi_ddiv+0x472>
 8000dbc:	45b8      	cmp	r8, r7
 8000dbe:	d9dc      	bls.n	8000d7a <__aeabi_ddiv+0x46a>
 8000dc0:	1a34      	subs	r4, r6, r0
 8000dc2:	469b      	mov	fp, r3
 8000dc4:	e759      	b.n	8000c7a <__aeabi_ddiv+0x36a>
 8000dc6:	2b1f      	cmp	r3, #31
 8000dc8:	dc65      	bgt.n	8000e96 <__aeabi_ddiv+0x586>
 8000dca:	4c50      	ldr	r4, [pc, #320]	; (8000f0c <__aeabi_ddiv+0x5fc>)
 8000dcc:	9900      	ldr	r1, [sp, #0]
 8000dce:	46a4      	mov	ip, r4
 8000dd0:	465c      	mov	r4, fp
 8000dd2:	4461      	add	r1, ip
 8000dd4:	0008      	movs	r0, r1
 8000dd6:	408c      	lsls	r4, r1
 8000dd8:	0011      	movs	r1, r2
 8000dda:	4082      	lsls	r2, r0
 8000ddc:	40d9      	lsrs	r1, r3
 8000dde:	1e50      	subs	r0, r2, #1
 8000de0:	4182      	sbcs	r2, r0
 8000de2:	430c      	orrs	r4, r1
 8000de4:	4314      	orrs	r4, r2
 8000de6:	465a      	mov	r2, fp
 8000de8:	40da      	lsrs	r2, r3
 8000dea:	0013      	movs	r3, r2
 8000dec:	0762      	lsls	r2, r4, #29
 8000dee:	d009      	beq.n	8000e04 <__aeabi_ddiv+0x4f4>
 8000df0:	220f      	movs	r2, #15
 8000df2:	4022      	ands	r2, r4
 8000df4:	2a04      	cmp	r2, #4
 8000df6:	d005      	beq.n	8000e04 <__aeabi_ddiv+0x4f4>
 8000df8:	0022      	movs	r2, r4
 8000dfa:	1d14      	adds	r4, r2, #4
 8000dfc:	4294      	cmp	r4, r2
 8000dfe:	4189      	sbcs	r1, r1
 8000e00:	4249      	negs	r1, r1
 8000e02:	185b      	adds	r3, r3, r1
 8000e04:	021a      	lsls	r2, r3, #8
 8000e06:	d562      	bpl.n	8000ece <__aeabi_ddiv+0x5be>
 8000e08:	2201      	movs	r2, #1
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	e60d      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000e10:	428a      	cmp	r2, r1
 8000e12:	d800      	bhi.n	8000e16 <__aeabi_ddiv+0x506>
 8000e14:	e70a      	b.n	8000c2c <__aeabi_ddiv+0x31c>
 8000e16:	1e83      	subs	r3, r0, #2
 8000e18:	1989      	adds	r1, r1, r6
 8000e1a:	e707      	b.n	8000c2c <__aeabi_ddiv+0x31c>
 8000e1c:	230f      	movs	r3, #15
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2b04      	cmp	r3, #4
 8000e22:	d100      	bne.n	8000e26 <__aeabi_ddiv+0x516>
 8000e24:	e5e6      	b.n	80009f4 <__aeabi_ddiv+0xe4>
 8000e26:	1d17      	adds	r7, r2, #4
 8000e28:	4297      	cmp	r7, r2
 8000e2a:	4192      	sbcs	r2, r2
 8000e2c:	4253      	negs	r3, r2
 8000e2e:	449b      	add	fp, r3
 8000e30:	08fa      	lsrs	r2, r7, #3
 8000e32:	e5e0      	b.n	80009f6 <__aeabi_ddiv+0xe6>
 8000e34:	2800      	cmp	r0, #0
 8000e36:	d100      	bne.n	8000e3a <__aeabi_ddiv+0x52a>
 8000e38:	e5d7      	b.n	80009ea <__aeabi_ddiv+0xda>
 8000e3a:	1871      	adds	r1, r6, r1
 8000e3c:	1e53      	subs	r3, r2, #1
 8000e3e:	42b1      	cmp	r1, r6
 8000e40:	d327      	bcc.n	8000e92 <__aeabi_ddiv+0x582>
 8000e42:	42a9      	cmp	r1, r5
 8000e44:	d315      	bcc.n	8000e72 <__aeabi_ddiv+0x562>
 8000e46:	d058      	beq.n	8000efa <__aeabi_ddiv+0x5ea>
 8000e48:	001a      	movs	r2, r3
 8000e4a:	e773      	b.n	8000d34 <__aeabi_ddiv+0x424>
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dc00      	bgt.n	8000e52 <__aeabi_ddiv+0x542>
 8000e50:	e604      	b.n	8000a5c <__aeabi_ddiv+0x14c>
 8000e52:	2301      	movs	r3, #1
 8000e54:	2200      	movs	r2, #0
 8000e56:	449b      	add	fp, r3
 8000e58:	e5cd      	b.n	80009f6 <__aeabi_ddiv+0xe6>
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	4447      	add	r7, r8
 8000e5e:	4547      	cmp	r7, r8
 8000e60:	4189      	sbcs	r1, r1
 8000e62:	425b      	negs	r3, r3
 8000e64:	469c      	mov	ip, r3
 8000e66:	4249      	negs	r1, r1
 8000e68:	1989      	adds	r1, r1, r6
 8000e6a:	190c      	adds	r4, r1, r4
 8000e6c:	44e3      	add	fp, ip
 8000e6e:	1a24      	subs	r4, r4, r0
 8000e70:	e703      	b.n	8000c7a <__aeabi_ddiv+0x36a>
 8000e72:	4643      	mov	r3, r8
 8000e74:	005f      	lsls	r7, r3, #1
 8000e76:	4547      	cmp	r7, r8
 8000e78:	419b      	sbcs	r3, r3
 8000e7a:	46b8      	mov	r8, r7
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	199e      	adds	r6, r3, r6
 8000e80:	3a02      	subs	r2, #2
 8000e82:	1989      	adds	r1, r1, r6
 8000e84:	42a9      	cmp	r1, r5
 8000e86:	d000      	beq.n	8000e8a <__aeabi_ddiv+0x57a>
 8000e88:	e754      	b.n	8000d34 <__aeabi_ddiv+0x424>
 8000e8a:	4540      	cmp	r0, r8
 8000e8c:	d000      	beq.n	8000e90 <__aeabi_ddiv+0x580>
 8000e8e:	e751      	b.n	8000d34 <__aeabi_ddiv+0x424>
 8000e90:	e5ab      	b.n	80009ea <__aeabi_ddiv+0xda>
 8000e92:	001a      	movs	r2, r3
 8000e94:	e7f6      	b.n	8000e84 <__aeabi_ddiv+0x574>
 8000e96:	211f      	movs	r1, #31
 8000e98:	465f      	mov	r7, fp
 8000e9a:	4249      	negs	r1, r1
 8000e9c:	1b0c      	subs	r4, r1, r4
 8000e9e:	40e7      	lsrs	r7, r4
 8000ea0:	2b20      	cmp	r3, #32
 8000ea2:	d007      	beq.n	8000eb4 <__aeabi_ddiv+0x5a4>
 8000ea4:	491a      	ldr	r1, [pc, #104]	; (8000f10 <__aeabi_ddiv+0x600>)
 8000ea6:	9b00      	ldr	r3, [sp, #0]
 8000ea8:	468c      	mov	ip, r1
 8000eaa:	4463      	add	r3, ip
 8000eac:	0018      	movs	r0, r3
 8000eae:	465b      	mov	r3, fp
 8000eb0:	4083      	lsls	r3, r0
 8000eb2:	431a      	orrs	r2, r3
 8000eb4:	1e50      	subs	r0, r2, #1
 8000eb6:	4182      	sbcs	r2, r0
 8000eb8:	433a      	orrs	r2, r7
 8000eba:	2707      	movs	r7, #7
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4017      	ands	r7, r2
 8000ec0:	d009      	beq.n	8000ed6 <__aeabi_ddiv+0x5c6>
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	4011      	ands	r1, r2
 8000ec8:	0014      	movs	r4, r2
 8000eca:	2904      	cmp	r1, #4
 8000ecc:	d195      	bne.n	8000dfa <__aeabi_ddiv+0x4ea>
 8000ece:	0022      	movs	r2, r4
 8000ed0:	075f      	lsls	r7, r3, #29
 8000ed2:	025b      	lsls	r3, r3, #9
 8000ed4:	0b1b      	lsrs	r3, r3, #12
 8000ed6:	08d2      	lsrs	r2, r2, #3
 8000ed8:	4317      	orrs	r7, r2
 8000eda:	2200      	movs	r2, #0
 8000edc:	e5a6      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000ede:	2380      	movs	r3, #128	; 0x80
 8000ee0:	4659      	mov	r1, fp
 8000ee2:	031b      	lsls	r3, r3, #12
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	031b      	lsls	r3, r3, #12
 8000ee8:	0017      	movs	r7, r2
 8000eea:	0b1b      	lsrs	r3, r3, #12
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <__aeabi_ddiv+0x5f8>)
 8000eee:	e59d      	b.n	8000a2c <__aeabi_ddiv+0x11c>
 8000ef0:	42bd      	cmp	r5, r7
 8000ef2:	d8b2      	bhi.n	8000e5a <__aeabi_ddiv+0x54a>
 8000ef4:	469b      	mov	fp, r3
 8000ef6:	2400      	movs	r4, #0
 8000ef8:	e6bf      	b.n	8000c7a <__aeabi_ddiv+0x36a>
 8000efa:	4580      	cmp	r8, r0
 8000efc:	d3b9      	bcc.n	8000e72 <__aeabi_ddiv+0x562>
 8000efe:	001a      	movs	r2, r3
 8000f00:	e7c3      	b.n	8000e8a <__aeabi_ddiv+0x57a>
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	000003ff 	.word	0x000003ff
 8000f08:	000007ff 	.word	0x000007ff
 8000f0c:	0000041e 	.word	0x0000041e
 8000f10:	0000043e 	.word	0x0000043e

08000f14 <__eqdf2>:
 8000f14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f16:	464f      	mov	r7, r9
 8000f18:	4646      	mov	r6, r8
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	4684      	mov	ip, r0
 8000f1e:	b5c0      	push	{r6, r7, lr}
 8000f20:	4680      	mov	r8, r0
 8000f22:	4e19      	ldr	r6, [pc, #100]	; (8000f88 <__eqdf2+0x74>)
 8000f24:	0318      	lsls	r0, r3, #12
 8000f26:	030f      	lsls	r7, r1, #12
 8000f28:	004d      	lsls	r5, r1, #1
 8000f2a:	0b00      	lsrs	r0, r0, #12
 8000f2c:	005c      	lsls	r4, r3, #1
 8000f2e:	4682      	mov	sl, r0
 8000f30:	0b3f      	lsrs	r7, r7, #12
 8000f32:	0d6d      	lsrs	r5, r5, #21
 8000f34:	0fc9      	lsrs	r1, r1, #31
 8000f36:	4691      	mov	r9, r2
 8000f38:	0d64      	lsrs	r4, r4, #21
 8000f3a:	0fdb      	lsrs	r3, r3, #31
 8000f3c:	2001      	movs	r0, #1
 8000f3e:	42b5      	cmp	r5, r6
 8000f40:	d00a      	beq.n	8000f58 <__eqdf2+0x44>
 8000f42:	42b4      	cmp	r4, r6
 8000f44:	d003      	beq.n	8000f4e <__eqdf2+0x3a>
 8000f46:	42a5      	cmp	r5, r4
 8000f48:	d101      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f4a:	4557      	cmp	r7, sl
 8000f4c:	d00c      	beq.n	8000f68 <__eqdf2+0x54>
 8000f4e:	bc1c      	pop	{r2, r3, r4}
 8000f50:	4690      	mov	r8, r2
 8000f52:	4699      	mov	r9, r3
 8000f54:	46a2      	mov	sl, r4
 8000f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f58:	4666      	mov	r6, ip
 8000f5a:	433e      	orrs	r6, r7
 8000f5c:	d1f7      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f5e:	42ac      	cmp	r4, r5
 8000f60:	d1f5      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f62:	4654      	mov	r4, sl
 8000f64:	4314      	orrs	r4, r2
 8000f66:	d1f2      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f68:	2001      	movs	r0, #1
 8000f6a:	45c8      	cmp	r8, r9
 8000f6c:	d1ef      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f6e:	4299      	cmp	r1, r3
 8000f70:	d007      	beq.n	8000f82 <__eqdf2+0x6e>
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	d1eb      	bne.n	8000f4e <__eqdf2+0x3a>
 8000f76:	4663      	mov	r3, ip
 8000f78:	431f      	orrs	r7, r3
 8000f7a:	0038      	movs	r0, r7
 8000f7c:	1e47      	subs	r7, r0, #1
 8000f7e:	41b8      	sbcs	r0, r7
 8000f80:	e7e5      	b.n	8000f4e <__eqdf2+0x3a>
 8000f82:	2000      	movs	r0, #0
 8000f84:	e7e3      	b.n	8000f4e <__eqdf2+0x3a>
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	000007ff 	.word	0x000007ff

08000f8c <__gedf2>:
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8e:	464f      	mov	r7, r9
 8000f90:	4646      	mov	r6, r8
 8000f92:	46d6      	mov	lr, sl
 8000f94:	004d      	lsls	r5, r1, #1
 8000f96:	b5c0      	push	{r6, r7, lr}
 8000f98:	030e      	lsls	r6, r1, #12
 8000f9a:	0fc9      	lsrs	r1, r1, #31
 8000f9c:	468a      	mov	sl, r1
 8000f9e:	492c      	ldr	r1, [pc, #176]	; (8001050 <__gedf2+0xc4>)
 8000fa0:	031f      	lsls	r7, r3, #12
 8000fa2:	005c      	lsls	r4, r3, #1
 8000fa4:	4680      	mov	r8, r0
 8000fa6:	0b36      	lsrs	r6, r6, #12
 8000fa8:	0d6d      	lsrs	r5, r5, #21
 8000faa:	4691      	mov	r9, r2
 8000fac:	0b3f      	lsrs	r7, r7, #12
 8000fae:	0d64      	lsrs	r4, r4, #21
 8000fb0:	0fdb      	lsrs	r3, r3, #31
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	d01e      	beq.n	8000ff4 <__gedf2+0x68>
 8000fb6:	428c      	cmp	r4, r1
 8000fb8:	d016      	beq.n	8000fe8 <__gedf2+0x5c>
 8000fba:	2d00      	cmp	r5, #0
 8000fbc:	d11e      	bne.n	8000ffc <__gedf2+0x70>
 8000fbe:	4330      	orrs	r0, r6
 8000fc0:	4684      	mov	ip, r0
 8000fc2:	2c00      	cmp	r4, #0
 8000fc4:	d101      	bne.n	8000fca <__gedf2+0x3e>
 8000fc6:	433a      	orrs	r2, r7
 8000fc8:	d023      	beq.n	8001012 <__gedf2+0x86>
 8000fca:	4662      	mov	r2, ip
 8000fcc:	2a00      	cmp	r2, #0
 8000fce:	d01a      	beq.n	8001006 <__gedf2+0x7a>
 8000fd0:	459a      	cmp	sl, r3
 8000fd2:	d029      	beq.n	8001028 <__gedf2+0x9c>
 8000fd4:	4651      	mov	r1, sl
 8000fd6:	2002      	movs	r0, #2
 8000fd8:	3901      	subs	r1, #1
 8000fda:	4008      	ands	r0, r1
 8000fdc:	3801      	subs	r0, #1
 8000fde:	bc1c      	pop	{r2, r3, r4}
 8000fe0:	4690      	mov	r8, r2
 8000fe2:	4699      	mov	r9, r3
 8000fe4:	46a2      	mov	sl, r4
 8000fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fe8:	0039      	movs	r1, r7
 8000fea:	4311      	orrs	r1, r2
 8000fec:	d0e5      	beq.n	8000fba <__gedf2+0x2e>
 8000fee:	2002      	movs	r0, #2
 8000ff0:	4240      	negs	r0, r0
 8000ff2:	e7f4      	b.n	8000fde <__gedf2+0x52>
 8000ff4:	4330      	orrs	r0, r6
 8000ff6:	d1fa      	bne.n	8000fee <__gedf2+0x62>
 8000ff8:	42ac      	cmp	r4, r5
 8000ffa:	d00f      	beq.n	800101c <__gedf2+0x90>
 8000ffc:	2c00      	cmp	r4, #0
 8000ffe:	d10f      	bne.n	8001020 <__gedf2+0x94>
 8001000:	433a      	orrs	r2, r7
 8001002:	d0e7      	beq.n	8000fd4 <__gedf2+0x48>
 8001004:	e00c      	b.n	8001020 <__gedf2+0x94>
 8001006:	2201      	movs	r2, #1
 8001008:	3b01      	subs	r3, #1
 800100a:	4393      	bics	r3, r2
 800100c:	0018      	movs	r0, r3
 800100e:	3001      	adds	r0, #1
 8001010:	e7e5      	b.n	8000fde <__gedf2+0x52>
 8001012:	4663      	mov	r3, ip
 8001014:	2000      	movs	r0, #0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0e1      	beq.n	8000fde <__gedf2+0x52>
 800101a:	e7db      	b.n	8000fd4 <__gedf2+0x48>
 800101c:	433a      	orrs	r2, r7
 800101e:	d1e6      	bne.n	8000fee <__gedf2+0x62>
 8001020:	459a      	cmp	sl, r3
 8001022:	d1d7      	bne.n	8000fd4 <__gedf2+0x48>
 8001024:	42a5      	cmp	r5, r4
 8001026:	dcd5      	bgt.n	8000fd4 <__gedf2+0x48>
 8001028:	42a5      	cmp	r5, r4
 800102a:	db05      	blt.n	8001038 <__gedf2+0xac>
 800102c:	42be      	cmp	r6, r7
 800102e:	d8d1      	bhi.n	8000fd4 <__gedf2+0x48>
 8001030:	d008      	beq.n	8001044 <__gedf2+0xb8>
 8001032:	2000      	movs	r0, #0
 8001034:	42be      	cmp	r6, r7
 8001036:	d2d2      	bcs.n	8000fde <__gedf2+0x52>
 8001038:	4650      	mov	r0, sl
 800103a:	2301      	movs	r3, #1
 800103c:	3801      	subs	r0, #1
 800103e:	4398      	bics	r0, r3
 8001040:	3001      	adds	r0, #1
 8001042:	e7cc      	b.n	8000fde <__gedf2+0x52>
 8001044:	45c8      	cmp	r8, r9
 8001046:	d8c5      	bhi.n	8000fd4 <__gedf2+0x48>
 8001048:	2000      	movs	r0, #0
 800104a:	45c8      	cmp	r8, r9
 800104c:	d3f4      	bcc.n	8001038 <__gedf2+0xac>
 800104e:	e7c6      	b.n	8000fde <__gedf2+0x52>
 8001050:	000007ff 	.word	0x000007ff

08001054 <__ledf2>:
 8001054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001056:	464f      	mov	r7, r9
 8001058:	4646      	mov	r6, r8
 800105a:	46d6      	mov	lr, sl
 800105c:	004d      	lsls	r5, r1, #1
 800105e:	b5c0      	push	{r6, r7, lr}
 8001060:	030e      	lsls	r6, r1, #12
 8001062:	0fc9      	lsrs	r1, r1, #31
 8001064:	468a      	mov	sl, r1
 8001066:	492e      	ldr	r1, [pc, #184]	; (8001120 <__ledf2+0xcc>)
 8001068:	031f      	lsls	r7, r3, #12
 800106a:	005c      	lsls	r4, r3, #1
 800106c:	4680      	mov	r8, r0
 800106e:	0b36      	lsrs	r6, r6, #12
 8001070:	0d6d      	lsrs	r5, r5, #21
 8001072:	4691      	mov	r9, r2
 8001074:	0b3f      	lsrs	r7, r7, #12
 8001076:	0d64      	lsrs	r4, r4, #21
 8001078:	0fdb      	lsrs	r3, r3, #31
 800107a:	428d      	cmp	r5, r1
 800107c:	d018      	beq.n	80010b0 <__ledf2+0x5c>
 800107e:	428c      	cmp	r4, r1
 8001080:	d011      	beq.n	80010a6 <__ledf2+0x52>
 8001082:	2d00      	cmp	r5, #0
 8001084:	d118      	bne.n	80010b8 <__ledf2+0x64>
 8001086:	4330      	orrs	r0, r6
 8001088:	4684      	mov	ip, r0
 800108a:	2c00      	cmp	r4, #0
 800108c:	d11e      	bne.n	80010cc <__ledf2+0x78>
 800108e:	433a      	orrs	r2, r7
 8001090:	d11c      	bne.n	80010cc <__ledf2+0x78>
 8001092:	4663      	mov	r3, ip
 8001094:	2000      	movs	r0, #0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d030      	beq.n	80010fc <__ledf2+0xa8>
 800109a:	4651      	mov	r1, sl
 800109c:	2002      	movs	r0, #2
 800109e:	3901      	subs	r1, #1
 80010a0:	4008      	ands	r0, r1
 80010a2:	3801      	subs	r0, #1
 80010a4:	e02a      	b.n	80010fc <__ledf2+0xa8>
 80010a6:	0039      	movs	r1, r7
 80010a8:	4311      	orrs	r1, r2
 80010aa:	d0ea      	beq.n	8001082 <__ledf2+0x2e>
 80010ac:	2002      	movs	r0, #2
 80010ae:	e025      	b.n	80010fc <__ledf2+0xa8>
 80010b0:	4330      	orrs	r0, r6
 80010b2:	d1fb      	bne.n	80010ac <__ledf2+0x58>
 80010b4:	42ac      	cmp	r4, r5
 80010b6:	d026      	beq.n	8001106 <__ledf2+0xb2>
 80010b8:	2c00      	cmp	r4, #0
 80010ba:	d126      	bne.n	800110a <__ledf2+0xb6>
 80010bc:	433a      	orrs	r2, r7
 80010be:	d124      	bne.n	800110a <__ledf2+0xb6>
 80010c0:	4651      	mov	r1, sl
 80010c2:	2002      	movs	r0, #2
 80010c4:	3901      	subs	r1, #1
 80010c6:	4008      	ands	r0, r1
 80010c8:	3801      	subs	r0, #1
 80010ca:	e017      	b.n	80010fc <__ledf2+0xa8>
 80010cc:	4662      	mov	r2, ip
 80010ce:	2a00      	cmp	r2, #0
 80010d0:	d00f      	beq.n	80010f2 <__ledf2+0x9e>
 80010d2:	459a      	cmp	sl, r3
 80010d4:	d1e1      	bne.n	800109a <__ledf2+0x46>
 80010d6:	42a5      	cmp	r5, r4
 80010d8:	db05      	blt.n	80010e6 <__ledf2+0x92>
 80010da:	42be      	cmp	r6, r7
 80010dc:	d8dd      	bhi.n	800109a <__ledf2+0x46>
 80010de:	d019      	beq.n	8001114 <__ledf2+0xc0>
 80010e0:	2000      	movs	r0, #0
 80010e2:	42be      	cmp	r6, r7
 80010e4:	d20a      	bcs.n	80010fc <__ledf2+0xa8>
 80010e6:	4650      	mov	r0, sl
 80010e8:	2301      	movs	r3, #1
 80010ea:	3801      	subs	r0, #1
 80010ec:	4398      	bics	r0, r3
 80010ee:	3001      	adds	r0, #1
 80010f0:	e004      	b.n	80010fc <__ledf2+0xa8>
 80010f2:	2201      	movs	r2, #1
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4393      	bics	r3, r2
 80010f8:	0018      	movs	r0, r3
 80010fa:	3001      	adds	r0, #1
 80010fc:	bc1c      	pop	{r2, r3, r4}
 80010fe:	4690      	mov	r8, r2
 8001100:	4699      	mov	r9, r3
 8001102:	46a2      	mov	sl, r4
 8001104:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001106:	433a      	orrs	r2, r7
 8001108:	d1d0      	bne.n	80010ac <__ledf2+0x58>
 800110a:	459a      	cmp	sl, r3
 800110c:	d1c5      	bne.n	800109a <__ledf2+0x46>
 800110e:	42a5      	cmp	r5, r4
 8001110:	dcc3      	bgt.n	800109a <__ledf2+0x46>
 8001112:	e7e0      	b.n	80010d6 <__ledf2+0x82>
 8001114:	45c8      	cmp	r8, r9
 8001116:	d8c0      	bhi.n	800109a <__ledf2+0x46>
 8001118:	2000      	movs	r0, #0
 800111a:	45c8      	cmp	r8, r9
 800111c:	d3e3      	bcc.n	80010e6 <__ledf2+0x92>
 800111e:	e7ed      	b.n	80010fc <__ledf2+0xa8>
 8001120:	000007ff 	.word	0x000007ff

08001124 <__aeabi_dsub>:
 8001124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001126:	4657      	mov	r7, sl
 8001128:	464e      	mov	r6, r9
 800112a:	4645      	mov	r5, r8
 800112c:	46de      	mov	lr, fp
 800112e:	000c      	movs	r4, r1
 8001130:	0309      	lsls	r1, r1, #12
 8001132:	b5e0      	push	{r5, r6, r7, lr}
 8001134:	0a49      	lsrs	r1, r1, #9
 8001136:	0f46      	lsrs	r6, r0, #29
 8001138:	005f      	lsls	r7, r3, #1
 800113a:	4331      	orrs	r1, r6
 800113c:	031e      	lsls	r6, r3, #12
 800113e:	0fdb      	lsrs	r3, r3, #31
 8001140:	0a76      	lsrs	r6, r6, #9
 8001142:	469b      	mov	fp, r3
 8001144:	0f53      	lsrs	r3, r2, #29
 8001146:	4333      	orrs	r3, r6
 8001148:	4ec8      	ldr	r6, [pc, #800]	; (800146c <__aeabi_dsub+0x348>)
 800114a:	0065      	lsls	r5, r4, #1
 800114c:	00c0      	lsls	r0, r0, #3
 800114e:	0fe4      	lsrs	r4, r4, #31
 8001150:	00d2      	lsls	r2, r2, #3
 8001152:	0d6d      	lsrs	r5, r5, #21
 8001154:	46a2      	mov	sl, r4
 8001156:	4681      	mov	r9, r0
 8001158:	0d7f      	lsrs	r7, r7, #21
 800115a:	469c      	mov	ip, r3
 800115c:	4690      	mov	r8, r2
 800115e:	42b7      	cmp	r7, r6
 8001160:	d100      	bne.n	8001164 <__aeabi_dsub+0x40>
 8001162:	e0b9      	b.n	80012d8 <__aeabi_dsub+0x1b4>
 8001164:	465b      	mov	r3, fp
 8001166:	2601      	movs	r6, #1
 8001168:	4073      	eors	r3, r6
 800116a:	469b      	mov	fp, r3
 800116c:	1bee      	subs	r6, r5, r7
 800116e:	45a3      	cmp	fp, r4
 8001170:	d100      	bne.n	8001174 <__aeabi_dsub+0x50>
 8001172:	e083      	b.n	800127c <__aeabi_dsub+0x158>
 8001174:	2e00      	cmp	r6, #0
 8001176:	dd63      	ble.n	8001240 <__aeabi_dsub+0x11c>
 8001178:	2f00      	cmp	r7, #0
 800117a:	d000      	beq.n	800117e <__aeabi_dsub+0x5a>
 800117c:	e0b1      	b.n	80012e2 <__aeabi_dsub+0x1be>
 800117e:	4663      	mov	r3, ip
 8001180:	4313      	orrs	r3, r2
 8001182:	d100      	bne.n	8001186 <__aeabi_dsub+0x62>
 8001184:	e123      	b.n	80013ce <__aeabi_dsub+0x2aa>
 8001186:	1e73      	subs	r3, r6, #1
 8001188:	2b00      	cmp	r3, #0
 800118a:	d000      	beq.n	800118e <__aeabi_dsub+0x6a>
 800118c:	e1ba      	b.n	8001504 <__aeabi_dsub+0x3e0>
 800118e:	1a86      	subs	r6, r0, r2
 8001190:	4663      	mov	r3, ip
 8001192:	42b0      	cmp	r0, r6
 8001194:	4180      	sbcs	r0, r0
 8001196:	2501      	movs	r5, #1
 8001198:	1ac9      	subs	r1, r1, r3
 800119a:	4240      	negs	r0, r0
 800119c:	1a09      	subs	r1, r1, r0
 800119e:	020b      	lsls	r3, r1, #8
 80011a0:	d400      	bmi.n	80011a4 <__aeabi_dsub+0x80>
 80011a2:	e147      	b.n	8001434 <__aeabi_dsub+0x310>
 80011a4:	0249      	lsls	r1, r1, #9
 80011a6:	0a4b      	lsrs	r3, r1, #9
 80011a8:	4698      	mov	r8, r3
 80011aa:	4643      	mov	r3, r8
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d100      	bne.n	80011b2 <__aeabi_dsub+0x8e>
 80011b0:	e189      	b.n	80014c6 <__aeabi_dsub+0x3a2>
 80011b2:	4640      	mov	r0, r8
 80011b4:	f000 fb6e 	bl	8001894 <__clzsi2>
 80011b8:	0003      	movs	r3, r0
 80011ba:	3b08      	subs	r3, #8
 80011bc:	2b1f      	cmp	r3, #31
 80011be:	dd00      	ble.n	80011c2 <__aeabi_dsub+0x9e>
 80011c0:	e17c      	b.n	80014bc <__aeabi_dsub+0x398>
 80011c2:	2220      	movs	r2, #32
 80011c4:	0030      	movs	r0, r6
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	4641      	mov	r1, r8
 80011ca:	40d0      	lsrs	r0, r2
 80011cc:	4099      	lsls	r1, r3
 80011ce:	0002      	movs	r2, r0
 80011d0:	409e      	lsls	r6, r3
 80011d2:	430a      	orrs	r2, r1
 80011d4:	429d      	cmp	r5, r3
 80011d6:	dd00      	ble.n	80011da <__aeabi_dsub+0xb6>
 80011d8:	e16a      	b.n	80014b0 <__aeabi_dsub+0x38c>
 80011da:	1b5d      	subs	r5, r3, r5
 80011dc:	1c6b      	adds	r3, r5, #1
 80011de:	2b1f      	cmp	r3, #31
 80011e0:	dd00      	ble.n	80011e4 <__aeabi_dsub+0xc0>
 80011e2:	e194      	b.n	800150e <__aeabi_dsub+0x3ea>
 80011e4:	2120      	movs	r1, #32
 80011e6:	0010      	movs	r0, r2
 80011e8:	0035      	movs	r5, r6
 80011ea:	1ac9      	subs	r1, r1, r3
 80011ec:	408e      	lsls	r6, r1
 80011ee:	40da      	lsrs	r2, r3
 80011f0:	4088      	lsls	r0, r1
 80011f2:	40dd      	lsrs	r5, r3
 80011f4:	1e71      	subs	r1, r6, #1
 80011f6:	418e      	sbcs	r6, r1
 80011f8:	0011      	movs	r1, r2
 80011fa:	2207      	movs	r2, #7
 80011fc:	4328      	orrs	r0, r5
 80011fe:	2500      	movs	r5, #0
 8001200:	4306      	orrs	r6, r0
 8001202:	4032      	ands	r2, r6
 8001204:	2a00      	cmp	r2, #0
 8001206:	d009      	beq.n	800121c <__aeabi_dsub+0xf8>
 8001208:	230f      	movs	r3, #15
 800120a:	4033      	ands	r3, r6
 800120c:	2b04      	cmp	r3, #4
 800120e:	d005      	beq.n	800121c <__aeabi_dsub+0xf8>
 8001210:	1d33      	adds	r3, r6, #4
 8001212:	42b3      	cmp	r3, r6
 8001214:	41b6      	sbcs	r6, r6
 8001216:	4276      	negs	r6, r6
 8001218:	1989      	adds	r1, r1, r6
 800121a:	001e      	movs	r6, r3
 800121c:	020b      	lsls	r3, r1, #8
 800121e:	d400      	bmi.n	8001222 <__aeabi_dsub+0xfe>
 8001220:	e23d      	b.n	800169e <__aeabi_dsub+0x57a>
 8001222:	1c6a      	adds	r2, r5, #1
 8001224:	4b91      	ldr	r3, [pc, #580]	; (800146c <__aeabi_dsub+0x348>)
 8001226:	0555      	lsls	r5, r2, #21
 8001228:	0d6d      	lsrs	r5, r5, #21
 800122a:	429a      	cmp	r2, r3
 800122c:	d100      	bne.n	8001230 <__aeabi_dsub+0x10c>
 800122e:	e119      	b.n	8001464 <__aeabi_dsub+0x340>
 8001230:	4a8f      	ldr	r2, [pc, #572]	; (8001470 <__aeabi_dsub+0x34c>)
 8001232:	08f6      	lsrs	r6, r6, #3
 8001234:	400a      	ands	r2, r1
 8001236:	0757      	lsls	r7, r2, #29
 8001238:	0252      	lsls	r2, r2, #9
 800123a:	4337      	orrs	r7, r6
 800123c:	0b12      	lsrs	r2, r2, #12
 800123e:	e09b      	b.n	8001378 <__aeabi_dsub+0x254>
 8001240:	2e00      	cmp	r6, #0
 8001242:	d000      	beq.n	8001246 <__aeabi_dsub+0x122>
 8001244:	e0c5      	b.n	80013d2 <__aeabi_dsub+0x2ae>
 8001246:	1c6e      	adds	r6, r5, #1
 8001248:	0576      	lsls	r6, r6, #21
 800124a:	0d76      	lsrs	r6, r6, #21
 800124c:	2e01      	cmp	r6, #1
 800124e:	dc00      	bgt.n	8001252 <__aeabi_dsub+0x12e>
 8001250:	e148      	b.n	80014e4 <__aeabi_dsub+0x3c0>
 8001252:	4667      	mov	r7, ip
 8001254:	1a86      	subs	r6, r0, r2
 8001256:	1bcb      	subs	r3, r1, r7
 8001258:	42b0      	cmp	r0, r6
 800125a:	41bf      	sbcs	r7, r7
 800125c:	427f      	negs	r7, r7
 800125e:	46b8      	mov	r8, r7
 8001260:	001f      	movs	r7, r3
 8001262:	4643      	mov	r3, r8
 8001264:	1aff      	subs	r7, r7, r3
 8001266:	003b      	movs	r3, r7
 8001268:	46b8      	mov	r8, r7
 800126a:	021b      	lsls	r3, r3, #8
 800126c:	d500      	bpl.n	8001270 <__aeabi_dsub+0x14c>
 800126e:	e15f      	b.n	8001530 <__aeabi_dsub+0x40c>
 8001270:	4337      	orrs	r7, r6
 8001272:	d19a      	bne.n	80011aa <__aeabi_dsub+0x86>
 8001274:	2200      	movs	r2, #0
 8001276:	2400      	movs	r4, #0
 8001278:	2500      	movs	r5, #0
 800127a:	e079      	b.n	8001370 <__aeabi_dsub+0x24c>
 800127c:	2e00      	cmp	r6, #0
 800127e:	dc00      	bgt.n	8001282 <__aeabi_dsub+0x15e>
 8001280:	e0fa      	b.n	8001478 <__aeabi_dsub+0x354>
 8001282:	2f00      	cmp	r7, #0
 8001284:	d100      	bne.n	8001288 <__aeabi_dsub+0x164>
 8001286:	e08d      	b.n	80013a4 <__aeabi_dsub+0x280>
 8001288:	4b78      	ldr	r3, [pc, #480]	; (800146c <__aeabi_dsub+0x348>)
 800128a:	429d      	cmp	r5, r3
 800128c:	d067      	beq.n	800135e <__aeabi_dsub+0x23a>
 800128e:	2380      	movs	r3, #128	; 0x80
 8001290:	4667      	mov	r7, ip
 8001292:	041b      	lsls	r3, r3, #16
 8001294:	431f      	orrs	r7, r3
 8001296:	46bc      	mov	ip, r7
 8001298:	2e38      	cmp	r6, #56	; 0x38
 800129a:	dc00      	bgt.n	800129e <__aeabi_dsub+0x17a>
 800129c:	e152      	b.n	8001544 <__aeabi_dsub+0x420>
 800129e:	4663      	mov	r3, ip
 80012a0:	4313      	orrs	r3, r2
 80012a2:	1e5a      	subs	r2, r3, #1
 80012a4:	4193      	sbcs	r3, r2
 80012a6:	181e      	adds	r6, r3, r0
 80012a8:	4286      	cmp	r6, r0
 80012aa:	4180      	sbcs	r0, r0
 80012ac:	4240      	negs	r0, r0
 80012ae:	1809      	adds	r1, r1, r0
 80012b0:	020b      	lsls	r3, r1, #8
 80012b2:	d400      	bmi.n	80012b6 <__aeabi_dsub+0x192>
 80012b4:	e0be      	b.n	8001434 <__aeabi_dsub+0x310>
 80012b6:	4b6d      	ldr	r3, [pc, #436]	; (800146c <__aeabi_dsub+0x348>)
 80012b8:	3501      	adds	r5, #1
 80012ba:	429d      	cmp	r5, r3
 80012bc:	d100      	bne.n	80012c0 <__aeabi_dsub+0x19c>
 80012be:	e0d2      	b.n	8001466 <__aeabi_dsub+0x342>
 80012c0:	4a6b      	ldr	r2, [pc, #428]	; (8001470 <__aeabi_dsub+0x34c>)
 80012c2:	0873      	lsrs	r3, r6, #1
 80012c4:	400a      	ands	r2, r1
 80012c6:	2101      	movs	r1, #1
 80012c8:	400e      	ands	r6, r1
 80012ca:	431e      	orrs	r6, r3
 80012cc:	0851      	lsrs	r1, r2, #1
 80012ce:	07d3      	lsls	r3, r2, #31
 80012d0:	2207      	movs	r2, #7
 80012d2:	431e      	orrs	r6, r3
 80012d4:	4032      	ands	r2, r6
 80012d6:	e795      	b.n	8001204 <__aeabi_dsub+0xe0>
 80012d8:	001e      	movs	r6, r3
 80012da:	4316      	orrs	r6, r2
 80012dc:	d000      	beq.n	80012e0 <__aeabi_dsub+0x1bc>
 80012de:	e745      	b.n	800116c <__aeabi_dsub+0x48>
 80012e0:	e740      	b.n	8001164 <__aeabi_dsub+0x40>
 80012e2:	4b62      	ldr	r3, [pc, #392]	; (800146c <__aeabi_dsub+0x348>)
 80012e4:	429d      	cmp	r5, r3
 80012e6:	d03a      	beq.n	800135e <__aeabi_dsub+0x23a>
 80012e8:	2380      	movs	r3, #128	; 0x80
 80012ea:	4667      	mov	r7, ip
 80012ec:	041b      	lsls	r3, r3, #16
 80012ee:	431f      	orrs	r7, r3
 80012f0:	46bc      	mov	ip, r7
 80012f2:	2e38      	cmp	r6, #56	; 0x38
 80012f4:	dd00      	ble.n	80012f8 <__aeabi_dsub+0x1d4>
 80012f6:	e0eb      	b.n	80014d0 <__aeabi_dsub+0x3ac>
 80012f8:	2e1f      	cmp	r6, #31
 80012fa:	dc00      	bgt.n	80012fe <__aeabi_dsub+0x1da>
 80012fc:	e13a      	b.n	8001574 <__aeabi_dsub+0x450>
 80012fe:	0033      	movs	r3, r6
 8001300:	4667      	mov	r7, ip
 8001302:	3b20      	subs	r3, #32
 8001304:	40df      	lsrs	r7, r3
 8001306:	003b      	movs	r3, r7
 8001308:	2e20      	cmp	r6, #32
 800130a:	d005      	beq.n	8001318 <__aeabi_dsub+0x1f4>
 800130c:	2740      	movs	r7, #64	; 0x40
 800130e:	1bbf      	subs	r7, r7, r6
 8001310:	4666      	mov	r6, ip
 8001312:	40be      	lsls	r6, r7
 8001314:	4332      	orrs	r2, r6
 8001316:	4690      	mov	r8, r2
 8001318:	4646      	mov	r6, r8
 800131a:	1e72      	subs	r2, r6, #1
 800131c:	4196      	sbcs	r6, r2
 800131e:	4333      	orrs	r3, r6
 8001320:	e0da      	b.n	80014d8 <__aeabi_dsub+0x3b4>
 8001322:	2b00      	cmp	r3, #0
 8001324:	d100      	bne.n	8001328 <__aeabi_dsub+0x204>
 8001326:	e214      	b.n	8001752 <__aeabi_dsub+0x62e>
 8001328:	4663      	mov	r3, ip
 800132a:	4313      	orrs	r3, r2
 800132c:	d100      	bne.n	8001330 <__aeabi_dsub+0x20c>
 800132e:	e168      	b.n	8001602 <__aeabi_dsub+0x4de>
 8001330:	2380      	movs	r3, #128	; 0x80
 8001332:	074e      	lsls	r6, r1, #29
 8001334:	08c0      	lsrs	r0, r0, #3
 8001336:	08c9      	lsrs	r1, r1, #3
 8001338:	031b      	lsls	r3, r3, #12
 800133a:	4306      	orrs	r6, r0
 800133c:	4219      	tst	r1, r3
 800133e:	d008      	beq.n	8001352 <__aeabi_dsub+0x22e>
 8001340:	4660      	mov	r0, ip
 8001342:	08c0      	lsrs	r0, r0, #3
 8001344:	4218      	tst	r0, r3
 8001346:	d104      	bne.n	8001352 <__aeabi_dsub+0x22e>
 8001348:	4663      	mov	r3, ip
 800134a:	0001      	movs	r1, r0
 800134c:	08d2      	lsrs	r2, r2, #3
 800134e:	075e      	lsls	r6, r3, #29
 8001350:	4316      	orrs	r6, r2
 8001352:	00f3      	lsls	r3, r6, #3
 8001354:	4699      	mov	r9, r3
 8001356:	00c9      	lsls	r1, r1, #3
 8001358:	0f72      	lsrs	r2, r6, #29
 800135a:	4d44      	ldr	r5, [pc, #272]	; (800146c <__aeabi_dsub+0x348>)
 800135c:	4311      	orrs	r1, r2
 800135e:	464b      	mov	r3, r9
 8001360:	08de      	lsrs	r6, r3, #3
 8001362:	4b42      	ldr	r3, [pc, #264]	; (800146c <__aeabi_dsub+0x348>)
 8001364:	074f      	lsls	r7, r1, #29
 8001366:	4337      	orrs	r7, r6
 8001368:	08ca      	lsrs	r2, r1, #3
 800136a:	429d      	cmp	r5, r3
 800136c:	d100      	bne.n	8001370 <__aeabi_dsub+0x24c>
 800136e:	e06e      	b.n	800144e <__aeabi_dsub+0x32a>
 8001370:	0312      	lsls	r2, r2, #12
 8001372:	056d      	lsls	r5, r5, #21
 8001374:	0b12      	lsrs	r2, r2, #12
 8001376:	0d6d      	lsrs	r5, r5, #21
 8001378:	2100      	movs	r1, #0
 800137a:	0312      	lsls	r2, r2, #12
 800137c:	0b13      	lsrs	r3, r2, #12
 800137e:	0d0a      	lsrs	r2, r1, #20
 8001380:	0512      	lsls	r2, r2, #20
 8001382:	431a      	orrs	r2, r3
 8001384:	4b3b      	ldr	r3, [pc, #236]	; (8001474 <__aeabi_dsub+0x350>)
 8001386:	052d      	lsls	r5, r5, #20
 8001388:	4013      	ands	r3, r2
 800138a:	432b      	orrs	r3, r5
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	07e4      	lsls	r4, r4, #31
 8001390:	085b      	lsrs	r3, r3, #1
 8001392:	4323      	orrs	r3, r4
 8001394:	0038      	movs	r0, r7
 8001396:	0019      	movs	r1, r3
 8001398:	bc3c      	pop	{r2, r3, r4, r5}
 800139a:	4690      	mov	r8, r2
 800139c:	4699      	mov	r9, r3
 800139e:	46a2      	mov	sl, r4
 80013a0:	46ab      	mov	fp, r5
 80013a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013a4:	4663      	mov	r3, ip
 80013a6:	4313      	orrs	r3, r2
 80013a8:	d011      	beq.n	80013ce <__aeabi_dsub+0x2aa>
 80013aa:	1e73      	subs	r3, r6, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d000      	beq.n	80013b2 <__aeabi_dsub+0x28e>
 80013b0:	e107      	b.n	80015c2 <__aeabi_dsub+0x49e>
 80013b2:	1886      	adds	r6, r0, r2
 80013b4:	4286      	cmp	r6, r0
 80013b6:	4180      	sbcs	r0, r0
 80013b8:	4461      	add	r1, ip
 80013ba:	4240      	negs	r0, r0
 80013bc:	1809      	adds	r1, r1, r0
 80013be:	2501      	movs	r5, #1
 80013c0:	020b      	lsls	r3, r1, #8
 80013c2:	d537      	bpl.n	8001434 <__aeabi_dsub+0x310>
 80013c4:	2502      	movs	r5, #2
 80013c6:	e77b      	b.n	80012c0 <__aeabi_dsub+0x19c>
 80013c8:	003e      	movs	r6, r7
 80013ca:	4661      	mov	r1, ip
 80013cc:	4691      	mov	r9, r2
 80013ce:	0035      	movs	r5, r6
 80013d0:	e7c5      	b.n	800135e <__aeabi_dsub+0x23a>
 80013d2:	465c      	mov	r4, fp
 80013d4:	2d00      	cmp	r5, #0
 80013d6:	d000      	beq.n	80013da <__aeabi_dsub+0x2b6>
 80013d8:	e0e1      	b.n	800159e <__aeabi_dsub+0x47a>
 80013da:	000b      	movs	r3, r1
 80013dc:	4303      	orrs	r3, r0
 80013de:	d0f3      	beq.n	80013c8 <__aeabi_dsub+0x2a4>
 80013e0:	1c73      	adds	r3, r6, #1
 80013e2:	d100      	bne.n	80013e6 <__aeabi_dsub+0x2c2>
 80013e4:	e1ac      	b.n	8001740 <__aeabi_dsub+0x61c>
 80013e6:	4b21      	ldr	r3, [pc, #132]	; (800146c <__aeabi_dsub+0x348>)
 80013e8:	429f      	cmp	r7, r3
 80013ea:	d100      	bne.n	80013ee <__aeabi_dsub+0x2ca>
 80013ec:	e13a      	b.n	8001664 <__aeabi_dsub+0x540>
 80013ee:	43f3      	mvns	r3, r6
 80013f0:	2b38      	cmp	r3, #56	; 0x38
 80013f2:	dd00      	ble.n	80013f6 <__aeabi_dsub+0x2d2>
 80013f4:	e16f      	b.n	80016d6 <__aeabi_dsub+0x5b2>
 80013f6:	2b1f      	cmp	r3, #31
 80013f8:	dd00      	ble.n	80013fc <__aeabi_dsub+0x2d8>
 80013fa:	e18c      	b.n	8001716 <__aeabi_dsub+0x5f2>
 80013fc:	2520      	movs	r5, #32
 80013fe:	000e      	movs	r6, r1
 8001400:	1aed      	subs	r5, r5, r3
 8001402:	40ae      	lsls	r6, r5
 8001404:	46b0      	mov	r8, r6
 8001406:	0006      	movs	r6, r0
 8001408:	46aa      	mov	sl, r5
 800140a:	40de      	lsrs	r6, r3
 800140c:	4645      	mov	r5, r8
 800140e:	4335      	orrs	r5, r6
 8001410:	002e      	movs	r6, r5
 8001412:	4655      	mov	r5, sl
 8001414:	40d9      	lsrs	r1, r3
 8001416:	40a8      	lsls	r0, r5
 8001418:	4663      	mov	r3, ip
 800141a:	1e45      	subs	r5, r0, #1
 800141c:	41a8      	sbcs	r0, r5
 800141e:	1a5b      	subs	r3, r3, r1
 8001420:	469c      	mov	ip, r3
 8001422:	4330      	orrs	r0, r6
 8001424:	1a16      	subs	r6, r2, r0
 8001426:	42b2      	cmp	r2, r6
 8001428:	4192      	sbcs	r2, r2
 800142a:	4663      	mov	r3, ip
 800142c:	4252      	negs	r2, r2
 800142e:	1a99      	subs	r1, r3, r2
 8001430:	003d      	movs	r5, r7
 8001432:	e6b4      	b.n	800119e <__aeabi_dsub+0x7a>
 8001434:	2207      	movs	r2, #7
 8001436:	4032      	ands	r2, r6
 8001438:	2a00      	cmp	r2, #0
 800143a:	d000      	beq.n	800143e <__aeabi_dsub+0x31a>
 800143c:	e6e4      	b.n	8001208 <__aeabi_dsub+0xe4>
 800143e:	4b0b      	ldr	r3, [pc, #44]	; (800146c <__aeabi_dsub+0x348>)
 8001440:	08f6      	lsrs	r6, r6, #3
 8001442:	074f      	lsls	r7, r1, #29
 8001444:	4337      	orrs	r7, r6
 8001446:	08ca      	lsrs	r2, r1, #3
 8001448:	429d      	cmp	r5, r3
 800144a:	d000      	beq.n	800144e <__aeabi_dsub+0x32a>
 800144c:	e790      	b.n	8001370 <__aeabi_dsub+0x24c>
 800144e:	003b      	movs	r3, r7
 8001450:	4313      	orrs	r3, r2
 8001452:	d100      	bne.n	8001456 <__aeabi_dsub+0x332>
 8001454:	e1a6      	b.n	80017a4 <__aeabi_dsub+0x680>
 8001456:	2380      	movs	r3, #128	; 0x80
 8001458:	031b      	lsls	r3, r3, #12
 800145a:	431a      	orrs	r2, r3
 800145c:	0312      	lsls	r2, r2, #12
 800145e:	0b12      	lsrs	r2, r2, #12
 8001460:	4d02      	ldr	r5, [pc, #8]	; (800146c <__aeabi_dsub+0x348>)
 8001462:	e789      	b.n	8001378 <__aeabi_dsub+0x254>
 8001464:	0015      	movs	r5, r2
 8001466:	2200      	movs	r2, #0
 8001468:	2700      	movs	r7, #0
 800146a:	e785      	b.n	8001378 <__aeabi_dsub+0x254>
 800146c:	000007ff 	.word	0x000007ff
 8001470:	ff7fffff 	.word	0xff7fffff
 8001474:	800fffff 	.word	0x800fffff
 8001478:	2e00      	cmp	r6, #0
 800147a:	d000      	beq.n	800147e <__aeabi_dsub+0x35a>
 800147c:	e0c7      	b.n	800160e <__aeabi_dsub+0x4ea>
 800147e:	1c6b      	adds	r3, r5, #1
 8001480:	055e      	lsls	r6, r3, #21
 8001482:	0d76      	lsrs	r6, r6, #21
 8001484:	2e01      	cmp	r6, #1
 8001486:	dc00      	bgt.n	800148a <__aeabi_dsub+0x366>
 8001488:	e0f0      	b.n	800166c <__aeabi_dsub+0x548>
 800148a:	4dc8      	ldr	r5, [pc, #800]	; (80017ac <__aeabi_dsub+0x688>)
 800148c:	42ab      	cmp	r3, r5
 800148e:	d100      	bne.n	8001492 <__aeabi_dsub+0x36e>
 8001490:	e0b9      	b.n	8001606 <__aeabi_dsub+0x4e2>
 8001492:	1885      	adds	r5, r0, r2
 8001494:	000a      	movs	r2, r1
 8001496:	4285      	cmp	r5, r0
 8001498:	4189      	sbcs	r1, r1
 800149a:	4462      	add	r2, ip
 800149c:	4249      	negs	r1, r1
 800149e:	1851      	adds	r1, r2, r1
 80014a0:	2207      	movs	r2, #7
 80014a2:	07ce      	lsls	r6, r1, #31
 80014a4:	086d      	lsrs	r5, r5, #1
 80014a6:	432e      	orrs	r6, r5
 80014a8:	0849      	lsrs	r1, r1, #1
 80014aa:	4032      	ands	r2, r6
 80014ac:	001d      	movs	r5, r3
 80014ae:	e6a9      	b.n	8001204 <__aeabi_dsub+0xe0>
 80014b0:	49bf      	ldr	r1, [pc, #764]	; (80017b0 <__aeabi_dsub+0x68c>)
 80014b2:	1aed      	subs	r5, r5, r3
 80014b4:	4011      	ands	r1, r2
 80014b6:	2207      	movs	r2, #7
 80014b8:	4032      	ands	r2, r6
 80014ba:	e6a3      	b.n	8001204 <__aeabi_dsub+0xe0>
 80014bc:	0032      	movs	r2, r6
 80014be:	3828      	subs	r0, #40	; 0x28
 80014c0:	4082      	lsls	r2, r0
 80014c2:	2600      	movs	r6, #0
 80014c4:	e686      	b.n	80011d4 <__aeabi_dsub+0xb0>
 80014c6:	0030      	movs	r0, r6
 80014c8:	f000 f9e4 	bl	8001894 <__clzsi2>
 80014cc:	3020      	adds	r0, #32
 80014ce:	e673      	b.n	80011b8 <__aeabi_dsub+0x94>
 80014d0:	4663      	mov	r3, ip
 80014d2:	4313      	orrs	r3, r2
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	4193      	sbcs	r3, r2
 80014d8:	1ac6      	subs	r6, r0, r3
 80014da:	42b0      	cmp	r0, r6
 80014dc:	4180      	sbcs	r0, r0
 80014de:	4240      	negs	r0, r0
 80014e0:	1a09      	subs	r1, r1, r0
 80014e2:	e65c      	b.n	800119e <__aeabi_dsub+0x7a>
 80014e4:	000e      	movs	r6, r1
 80014e6:	4667      	mov	r7, ip
 80014e8:	4306      	orrs	r6, r0
 80014ea:	4317      	orrs	r7, r2
 80014ec:	2d00      	cmp	r5, #0
 80014ee:	d15e      	bne.n	80015ae <__aeabi_dsub+0x48a>
 80014f0:	2e00      	cmp	r6, #0
 80014f2:	d000      	beq.n	80014f6 <__aeabi_dsub+0x3d2>
 80014f4:	e0f3      	b.n	80016de <__aeabi_dsub+0x5ba>
 80014f6:	2f00      	cmp	r7, #0
 80014f8:	d100      	bne.n	80014fc <__aeabi_dsub+0x3d8>
 80014fa:	e11e      	b.n	800173a <__aeabi_dsub+0x616>
 80014fc:	465c      	mov	r4, fp
 80014fe:	4661      	mov	r1, ip
 8001500:	4691      	mov	r9, r2
 8001502:	e72c      	b.n	800135e <__aeabi_dsub+0x23a>
 8001504:	4fa9      	ldr	r7, [pc, #676]	; (80017ac <__aeabi_dsub+0x688>)
 8001506:	42be      	cmp	r6, r7
 8001508:	d07b      	beq.n	8001602 <__aeabi_dsub+0x4de>
 800150a:	001e      	movs	r6, r3
 800150c:	e6f1      	b.n	80012f2 <__aeabi_dsub+0x1ce>
 800150e:	0010      	movs	r0, r2
 8001510:	3d1f      	subs	r5, #31
 8001512:	40e8      	lsrs	r0, r5
 8001514:	2b20      	cmp	r3, #32
 8001516:	d003      	beq.n	8001520 <__aeabi_dsub+0x3fc>
 8001518:	2140      	movs	r1, #64	; 0x40
 800151a:	1acb      	subs	r3, r1, r3
 800151c:	409a      	lsls	r2, r3
 800151e:	4316      	orrs	r6, r2
 8001520:	1e73      	subs	r3, r6, #1
 8001522:	419e      	sbcs	r6, r3
 8001524:	2207      	movs	r2, #7
 8001526:	4306      	orrs	r6, r0
 8001528:	4032      	ands	r2, r6
 800152a:	2100      	movs	r1, #0
 800152c:	2500      	movs	r5, #0
 800152e:	e783      	b.n	8001438 <__aeabi_dsub+0x314>
 8001530:	1a16      	subs	r6, r2, r0
 8001532:	4663      	mov	r3, ip
 8001534:	42b2      	cmp	r2, r6
 8001536:	4180      	sbcs	r0, r0
 8001538:	1a59      	subs	r1, r3, r1
 800153a:	4240      	negs	r0, r0
 800153c:	1a0b      	subs	r3, r1, r0
 800153e:	4698      	mov	r8, r3
 8001540:	465c      	mov	r4, fp
 8001542:	e632      	b.n	80011aa <__aeabi_dsub+0x86>
 8001544:	2e1f      	cmp	r6, #31
 8001546:	dd00      	ble.n	800154a <__aeabi_dsub+0x426>
 8001548:	e0ab      	b.n	80016a2 <__aeabi_dsub+0x57e>
 800154a:	2720      	movs	r7, #32
 800154c:	1bbb      	subs	r3, r7, r6
 800154e:	469a      	mov	sl, r3
 8001550:	4663      	mov	r3, ip
 8001552:	4657      	mov	r7, sl
 8001554:	40bb      	lsls	r3, r7
 8001556:	4699      	mov	r9, r3
 8001558:	0013      	movs	r3, r2
 800155a:	464f      	mov	r7, r9
 800155c:	40f3      	lsrs	r3, r6
 800155e:	431f      	orrs	r7, r3
 8001560:	003b      	movs	r3, r7
 8001562:	4657      	mov	r7, sl
 8001564:	40ba      	lsls	r2, r7
 8001566:	1e57      	subs	r7, r2, #1
 8001568:	41ba      	sbcs	r2, r7
 800156a:	4313      	orrs	r3, r2
 800156c:	4662      	mov	r2, ip
 800156e:	40f2      	lsrs	r2, r6
 8001570:	1889      	adds	r1, r1, r2
 8001572:	e698      	b.n	80012a6 <__aeabi_dsub+0x182>
 8001574:	2720      	movs	r7, #32
 8001576:	1bbb      	subs	r3, r7, r6
 8001578:	469a      	mov	sl, r3
 800157a:	4663      	mov	r3, ip
 800157c:	4657      	mov	r7, sl
 800157e:	40bb      	lsls	r3, r7
 8001580:	4699      	mov	r9, r3
 8001582:	0013      	movs	r3, r2
 8001584:	464f      	mov	r7, r9
 8001586:	40f3      	lsrs	r3, r6
 8001588:	431f      	orrs	r7, r3
 800158a:	003b      	movs	r3, r7
 800158c:	4657      	mov	r7, sl
 800158e:	40ba      	lsls	r2, r7
 8001590:	1e57      	subs	r7, r2, #1
 8001592:	41ba      	sbcs	r2, r7
 8001594:	4313      	orrs	r3, r2
 8001596:	4662      	mov	r2, ip
 8001598:	40f2      	lsrs	r2, r6
 800159a:	1a89      	subs	r1, r1, r2
 800159c:	e79c      	b.n	80014d8 <__aeabi_dsub+0x3b4>
 800159e:	4b83      	ldr	r3, [pc, #524]	; (80017ac <__aeabi_dsub+0x688>)
 80015a0:	429f      	cmp	r7, r3
 80015a2:	d05f      	beq.n	8001664 <__aeabi_dsub+0x540>
 80015a4:	2580      	movs	r5, #128	; 0x80
 80015a6:	042d      	lsls	r5, r5, #16
 80015a8:	4273      	negs	r3, r6
 80015aa:	4329      	orrs	r1, r5
 80015ac:	e720      	b.n	80013f0 <__aeabi_dsub+0x2cc>
 80015ae:	2e00      	cmp	r6, #0
 80015b0:	d10c      	bne.n	80015cc <__aeabi_dsub+0x4a8>
 80015b2:	2f00      	cmp	r7, #0
 80015b4:	d100      	bne.n	80015b8 <__aeabi_dsub+0x494>
 80015b6:	e0d0      	b.n	800175a <__aeabi_dsub+0x636>
 80015b8:	465c      	mov	r4, fp
 80015ba:	4661      	mov	r1, ip
 80015bc:	4691      	mov	r9, r2
 80015be:	4d7b      	ldr	r5, [pc, #492]	; (80017ac <__aeabi_dsub+0x688>)
 80015c0:	e6cd      	b.n	800135e <__aeabi_dsub+0x23a>
 80015c2:	4f7a      	ldr	r7, [pc, #488]	; (80017ac <__aeabi_dsub+0x688>)
 80015c4:	42be      	cmp	r6, r7
 80015c6:	d01c      	beq.n	8001602 <__aeabi_dsub+0x4de>
 80015c8:	001e      	movs	r6, r3
 80015ca:	e665      	b.n	8001298 <__aeabi_dsub+0x174>
 80015cc:	2f00      	cmp	r7, #0
 80015ce:	d018      	beq.n	8001602 <__aeabi_dsub+0x4de>
 80015d0:	08c0      	lsrs	r0, r0, #3
 80015d2:	074e      	lsls	r6, r1, #29
 80015d4:	4306      	orrs	r6, r0
 80015d6:	2080      	movs	r0, #128	; 0x80
 80015d8:	08c9      	lsrs	r1, r1, #3
 80015da:	0300      	lsls	r0, r0, #12
 80015dc:	4201      	tst	r1, r0
 80015de:	d008      	beq.n	80015f2 <__aeabi_dsub+0x4ce>
 80015e0:	4663      	mov	r3, ip
 80015e2:	08dc      	lsrs	r4, r3, #3
 80015e4:	4204      	tst	r4, r0
 80015e6:	d104      	bne.n	80015f2 <__aeabi_dsub+0x4ce>
 80015e8:	0021      	movs	r1, r4
 80015ea:	46da      	mov	sl, fp
 80015ec:	08d2      	lsrs	r2, r2, #3
 80015ee:	075e      	lsls	r6, r3, #29
 80015f0:	4316      	orrs	r6, r2
 80015f2:	00f3      	lsls	r3, r6, #3
 80015f4:	4699      	mov	r9, r3
 80015f6:	2401      	movs	r4, #1
 80015f8:	4653      	mov	r3, sl
 80015fa:	00c9      	lsls	r1, r1, #3
 80015fc:	0f72      	lsrs	r2, r6, #29
 80015fe:	4311      	orrs	r1, r2
 8001600:	401c      	ands	r4, r3
 8001602:	4d6a      	ldr	r5, [pc, #424]	; (80017ac <__aeabi_dsub+0x688>)
 8001604:	e6ab      	b.n	800135e <__aeabi_dsub+0x23a>
 8001606:	001d      	movs	r5, r3
 8001608:	2200      	movs	r2, #0
 800160a:	2700      	movs	r7, #0
 800160c:	e6b4      	b.n	8001378 <__aeabi_dsub+0x254>
 800160e:	2d00      	cmp	r5, #0
 8001610:	d159      	bne.n	80016c6 <__aeabi_dsub+0x5a2>
 8001612:	000b      	movs	r3, r1
 8001614:	4303      	orrs	r3, r0
 8001616:	d100      	bne.n	800161a <__aeabi_dsub+0x4f6>
 8001618:	e6d6      	b.n	80013c8 <__aeabi_dsub+0x2a4>
 800161a:	1c73      	adds	r3, r6, #1
 800161c:	d100      	bne.n	8001620 <__aeabi_dsub+0x4fc>
 800161e:	e0b2      	b.n	8001786 <__aeabi_dsub+0x662>
 8001620:	4b62      	ldr	r3, [pc, #392]	; (80017ac <__aeabi_dsub+0x688>)
 8001622:	429f      	cmp	r7, r3
 8001624:	d01e      	beq.n	8001664 <__aeabi_dsub+0x540>
 8001626:	43f3      	mvns	r3, r6
 8001628:	2b38      	cmp	r3, #56	; 0x38
 800162a:	dc6f      	bgt.n	800170c <__aeabi_dsub+0x5e8>
 800162c:	2b1f      	cmp	r3, #31
 800162e:	dd00      	ble.n	8001632 <__aeabi_dsub+0x50e>
 8001630:	e097      	b.n	8001762 <__aeabi_dsub+0x63e>
 8001632:	2520      	movs	r5, #32
 8001634:	000e      	movs	r6, r1
 8001636:	1aed      	subs	r5, r5, r3
 8001638:	40ae      	lsls	r6, r5
 800163a:	46b0      	mov	r8, r6
 800163c:	0006      	movs	r6, r0
 800163e:	46aa      	mov	sl, r5
 8001640:	40de      	lsrs	r6, r3
 8001642:	4645      	mov	r5, r8
 8001644:	4335      	orrs	r5, r6
 8001646:	002e      	movs	r6, r5
 8001648:	4655      	mov	r5, sl
 800164a:	40a8      	lsls	r0, r5
 800164c:	40d9      	lsrs	r1, r3
 800164e:	1e45      	subs	r5, r0, #1
 8001650:	41a8      	sbcs	r0, r5
 8001652:	448c      	add	ip, r1
 8001654:	4306      	orrs	r6, r0
 8001656:	18b6      	adds	r6, r6, r2
 8001658:	4296      	cmp	r6, r2
 800165a:	4192      	sbcs	r2, r2
 800165c:	4251      	negs	r1, r2
 800165e:	4461      	add	r1, ip
 8001660:	003d      	movs	r5, r7
 8001662:	e625      	b.n	80012b0 <__aeabi_dsub+0x18c>
 8001664:	003d      	movs	r5, r7
 8001666:	4661      	mov	r1, ip
 8001668:	4691      	mov	r9, r2
 800166a:	e678      	b.n	800135e <__aeabi_dsub+0x23a>
 800166c:	000b      	movs	r3, r1
 800166e:	4303      	orrs	r3, r0
 8001670:	2d00      	cmp	r5, #0
 8001672:	d000      	beq.n	8001676 <__aeabi_dsub+0x552>
 8001674:	e655      	b.n	8001322 <__aeabi_dsub+0x1fe>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f5      	beq.n	8001666 <__aeabi_dsub+0x542>
 800167a:	4663      	mov	r3, ip
 800167c:	4313      	orrs	r3, r2
 800167e:	d100      	bne.n	8001682 <__aeabi_dsub+0x55e>
 8001680:	e66d      	b.n	800135e <__aeabi_dsub+0x23a>
 8001682:	1886      	adds	r6, r0, r2
 8001684:	4286      	cmp	r6, r0
 8001686:	4180      	sbcs	r0, r0
 8001688:	4461      	add	r1, ip
 800168a:	4240      	negs	r0, r0
 800168c:	1809      	adds	r1, r1, r0
 800168e:	2200      	movs	r2, #0
 8001690:	020b      	lsls	r3, r1, #8
 8001692:	d400      	bmi.n	8001696 <__aeabi_dsub+0x572>
 8001694:	e6d0      	b.n	8001438 <__aeabi_dsub+0x314>
 8001696:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <__aeabi_dsub+0x68c>)
 8001698:	3501      	adds	r5, #1
 800169a:	4019      	ands	r1, r3
 800169c:	e5b2      	b.n	8001204 <__aeabi_dsub+0xe0>
 800169e:	46b1      	mov	r9, r6
 80016a0:	e65d      	b.n	800135e <__aeabi_dsub+0x23a>
 80016a2:	0033      	movs	r3, r6
 80016a4:	4667      	mov	r7, ip
 80016a6:	3b20      	subs	r3, #32
 80016a8:	40df      	lsrs	r7, r3
 80016aa:	003b      	movs	r3, r7
 80016ac:	2e20      	cmp	r6, #32
 80016ae:	d005      	beq.n	80016bc <__aeabi_dsub+0x598>
 80016b0:	2740      	movs	r7, #64	; 0x40
 80016b2:	1bbf      	subs	r7, r7, r6
 80016b4:	4666      	mov	r6, ip
 80016b6:	40be      	lsls	r6, r7
 80016b8:	4332      	orrs	r2, r6
 80016ba:	4690      	mov	r8, r2
 80016bc:	4646      	mov	r6, r8
 80016be:	1e72      	subs	r2, r6, #1
 80016c0:	4196      	sbcs	r6, r2
 80016c2:	4333      	orrs	r3, r6
 80016c4:	e5ef      	b.n	80012a6 <__aeabi_dsub+0x182>
 80016c6:	4b39      	ldr	r3, [pc, #228]	; (80017ac <__aeabi_dsub+0x688>)
 80016c8:	429f      	cmp	r7, r3
 80016ca:	d0cb      	beq.n	8001664 <__aeabi_dsub+0x540>
 80016cc:	2580      	movs	r5, #128	; 0x80
 80016ce:	042d      	lsls	r5, r5, #16
 80016d0:	4273      	negs	r3, r6
 80016d2:	4329      	orrs	r1, r5
 80016d4:	e7a8      	b.n	8001628 <__aeabi_dsub+0x504>
 80016d6:	4308      	orrs	r0, r1
 80016d8:	1e41      	subs	r1, r0, #1
 80016da:	4188      	sbcs	r0, r1
 80016dc:	e6a2      	b.n	8001424 <__aeabi_dsub+0x300>
 80016de:	2f00      	cmp	r7, #0
 80016e0:	d100      	bne.n	80016e4 <__aeabi_dsub+0x5c0>
 80016e2:	e63c      	b.n	800135e <__aeabi_dsub+0x23a>
 80016e4:	4663      	mov	r3, ip
 80016e6:	1a86      	subs	r6, r0, r2
 80016e8:	1acf      	subs	r7, r1, r3
 80016ea:	42b0      	cmp	r0, r6
 80016ec:	419b      	sbcs	r3, r3
 80016ee:	425b      	negs	r3, r3
 80016f0:	1afb      	subs	r3, r7, r3
 80016f2:	4698      	mov	r8, r3
 80016f4:	021b      	lsls	r3, r3, #8
 80016f6:	d54e      	bpl.n	8001796 <__aeabi_dsub+0x672>
 80016f8:	1a16      	subs	r6, r2, r0
 80016fa:	4663      	mov	r3, ip
 80016fc:	42b2      	cmp	r2, r6
 80016fe:	4192      	sbcs	r2, r2
 8001700:	1a59      	subs	r1, r3, r1
 8001702:	4252      	negs	r2, r2
 8001704:	1a89      	subs	r1, r1, r2
 8001706:	465c      	mov	r4, fp
 8001708:	2200      	movs	r2, #0
 800170a:	e57b      	b.n	8001204 <__aeabi_dsub+0xe0>
 800170c:	4301      	orrs	r1, r0
 800170e:	000e      	movs	r6, r1
 8001710:	1e71      	subs	r1, r6, #1
 8001712:	418e      	sbcs	r6, r1
 8001714:	e79f      	b.n	8001656 <__aeabi_dsub+0x532>
 8001716:	001d      	movs	r5, r3
 8001718:	000e      	movs	r6, r1
 800171a:	3d20      	subs	r5, #32
 800171c:	40ee      	lsrs	r6, r5
 800171e:	46b0      	mov	r8, r6
 8001720:	2b20      	cmp	r3, #32
 8001722:	d004      	beq.n	800172e <__aeabi_dsub+0x60a>
 8001724:	2540      	movs	r5, #64	; 0x40
 8001726:	1aeb      	subs	r3, r5, r3
 8001728:	4099      	lsls	r1, r3
 800172a:	4308      	orrs	r0, r1
 800172c:	4681      	mov	r9, r0
 800172e:	4648      	mov	r0, r9
 8001730:	4643      	mov	r3, r8
 8001732:	1e41      	subs	r1, r0, #1
 8001734:	4188      	sbcs	r0, r1
 8001736:	4318      	orrs	r0, r3
 8001738:	e674      	b.n	8001424 <__aeabi_dsub+0x300>
 800173a:	2200      	movs	r2, #0
 800173c:	2400      	movs	r4, #0
 800173e:	e617      	b.n	8001370 <__aeabi_dsub+0x24c>
 8001740:	1a16      	subs	r6, r2, r0
 8001742:	4663      	mov	r3, ip
 8001744:	42b2      	cmp	r2, r6
 8001746:	4192      	sbcs	r2, r2
 8001748:	1a59      	subs	r1, r3, r1
 800174a:	4252      	negs	r2, r2
 800174c:	1a89      	subs	r1, r1, r2
 800174e:	003d      	movs	r5, r7
 8001750:	e525      	b.n	800119e <__aeabi_dsub+0x7a>
 8001752:	4661      	mov	r1, ip
 8001754:	4691      	mov	r9, r2
 8001756:	4d15      	ldr	r5, [pc, #84]	; (80017ac <__aeabi_dsub+0x688>)
 8001758:	e601      	b.n	800135e <__aeabi_dsub+0x23a>
 800175a:	2280      	movs	r2, #128	; 0x80
 800175c:	2400      	movs	r4, #0
 800175e:	0312      	lsls	r2, r2, #12
 8001760:	e679      	b.n	8001456 <__aeabi_dsub+0x332>
 8001762:	001d      	movs	r5, r3
 8001764:	000e      	movs	r6, r1
 8001766:	3d20      	subs	r5, #32
 8001768:	40ee      	lsrs	r6, r5
 800176a:	46b0      	mov	r8, r6
 800176c:	2b20      	cmp	r3, #32
 800176e:	d004      	beq.n	800177a <__aeabi_dsub+0x656>
 8001770:	2540      	movs	r5, #64	; 0x40
 8001772:	1aeb      	subs	r3, r5, r3
 8001774:	4099      	lsls	r1, r3
 8001776:	4308      	orrs	r0, r1
 8001778:	4681      	mov	r9, r0
 800177a:	464e      	mov	r6, r9
 800177c:	4643      	mov	r3, r8
 800177e:	1e71      	subs	r1, r6, #1
 8001780:	418e      	sbcs	r6, r1
 8001782:	431e      	orrs	r6, r3
 8001784:	e767      	b.n	8001656 <__aeabi_dsub+0x532>
 8001786:	1886      	adds	r6, r0, r2
 8001788:	4296      	cmp	r6, r2
 800178a:	419b      	sbcs	r3, r3
 800178c:	4461      	add	r1, ip
 800178e:	425b      	negs	r3, r3
 8001790:	18c9      	adds	r1, r1, r3
 8001792:	003d      	movs	r5, r7
 8001794:	e58c      	b.n	80012b0 <__aeabi_dsub+0x18c>
 8001796:	4647      	mov	r7, r8
 8001798:	4337      	orrs	r7, r6
 800179a:	d0ce      	beq.n	800173a <__aeabi_dsub+0x616>
 800179c:	2207      	movs	r2, #7
 800179e:	4641      	mov	r1, r8
 80017a0:	4032      	ands	r2, r6
 80017a2:	e649      	b.n	8001438 <__aeabi_dsub+0x314>
 80017a4:	2700      	movs	r7, #0
 80017a6:	003a      	movs	r2, r7
 80017a8:	e5e6      	b.n	8001378 <__aeabi_dsub+0x254>
 80017aa:	46c0      	nop			; (mov r8, r8)
 80017ac:	000007ff 	.word	0x000007ff
 80017b0:	ff7fffff 	.word	0xff7fffff

080017b4 <__aeabi_d2iz>:
 80017b4:	b530      	push	{r4, r5, lr}
 80017b6:	4d14      	ldr	r5, [pc, #80]	; (8001808 <__aeabi_d2iz+0x54>)
 80017b8:	030a      	lsls	r2, r1, #12
 80017ba:	004b      	lsls	r3, r1, #1
 80017bc:	0b12      	lsrs	r2, r2, #12
 80017be:	0d5b      	lsrs	r3, r3, #21
 80017c0:	0fc9      	lsrs	r1, r1, #31
 80017c2:	2400      	movs	r4, #0
 80017c4:	42ab      	cmp	r3, r5
 80017c6:	dd11      	ble.n	80017ec <__aeabi_d2iz+0x38>
 80017c8:	4c10      	ldr	r4, [pc, #64]	; (800180c <__aeabi_d2iz+0x58>)
 80017ca:	42a3      	cmp	r3, r4
 80017cc:	dc10      	bgt.n	80017f0 <__aeabi_d2iz+0x3c>
 80017ce:	2480      	movs	r4, #128	; 0x80
 80017d0:	0364      	lsls	r4, r4, #13
 80017d2:	4322      	orrs	r2, r4
 80017d4:	4c0e      	ldr	r4, [pc, #56]	; (8001810 <__aeabi_d2iz+0x5c>)
 80017d6:	1ae4      	subs	r4, r4, r3
 80017d8:	2c1f      	cmp	r4, #31
 80017da:	dd0c      	ble.n	80017f6 <__aeabi_d2iz+0x42>
 80017dc:	480d      	ldr	r0, [pc, #52]	; (8001814 <__aeabi_d2iz+0x60>)
 80017de:	1ac3      	subs	r3, r0, r3
 80017e0:	40da      	lsrs	r2, r3
 80017e2:	0013      	movs	r3, r2
 80017e4:	425c      	negs	r4, r3
 80017e6:	2900      	cmp	r1, #0
 80017e8:	d100      	bne.n	80017ec <__aeabi_d2iz+0x38>
 80017ea:	001c      	movs	r4, r3
 80017ec:	0020      	movs	r0, r4
 80017ee:	bd30      	pop	{r4, r5, pc}
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <__aeabi_d2iz+0x64>)
 80017f2:	18cc      	adds	r4, r1, r3
 80017f4:	e7fa      	b.n	80017ec <__aeabi_d2iz+0x38>
 80017f6:	4d09      	ldr	r5, [pc, #36]	; (800181c <__aeabi_d2iz+0x68>)
 80017f8:	40e0      	lsrs	r0, r4
 80017fa:	46ac      	mov	ip, r5
 80017fc:	4463      	add	r3, ip
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	4303      	orrs	r3, r0
 8001804:	e7ee      	b.n	80017e4 <__aeabi_d2iz+0x30>
 8001806:	46c0      	nop			; (mov r8, r8)
 8001808:	000003fe 	.word	0x000003fe
 800180c:	0000041d 	.word	0x0000041d
 8001810:	00000433 	.word	0x00000433
 8001814:	00000413 	.word	0x00000413
 8001818:	7fffffff 	.word	0x7fffffff
 800181c:	fffffbed 	.word	0xfffffbed

08001820 <__aeabi_i2d>:
 8001820:	b570      	push	{r4, r5, r6, lr}
 8001822:	2800      	cmp	r0, #0
 8001824:	d02d      	beq.n	8001882 <__aeabi_i2d+0x62>
 8001826:	17c3      	asrs	r3, r0, #31
 8001828:	18c5      	adds	r5, r0, r3
 800182a:	405d      	eors	r5, r3
 800182c:	0fc4      	lsrs	r4, r0, #31
 800182e:	0028      	movs	r0, r5
 8001830:	f000 f830 	bl	8001894 <__clzsi2>
 8001834:	4b15      	ldr	r3, [pc, #84]	; (800188c <__aeabi_i2d+0x6c>)
 8001836:	1a1b      	subs	r3, r3, r0
 8001838:	055b      	lsls	r3, r3, #21
 800183a:	0d5b      	lsrs	r3, r3, #21
 800183c:	280a      	cmp	r0, #10
 800183e:	dd15      	ble.n	800186c <__aeabi_i2d+0x4c>
 8001840:	380b      	subs	r0, #11
 8001842:	4085      	lsls	r5, r0
 8001844:	2200      	movs	r2, #0
 8001846:	032d      	lsls	r5, r5, #12
 8001848:	0b2d      	lsrs	r5, r5, #12
 800184a:	2100      	movs	r1, #0
 800184c:	0010      	movs	r0, r2
 800184e:	032d      	lsls	r5, r5, #12
 8001850:	0d0a      	lsrs	r2, r1, #20
 8001852:	0b2d      	lsrs	r5, r5, #12
 8001854:	0512      	lsls	r2, r2, #20
 8001856:	432a      	orrs	r2, r5
 8001858:	4d0d      	ldr	r5, [pc, #52]	; (8001890 <__aeabi_i2d+0x70>)
 800185a:	051b      	lsls	r3, r3, #20
 800185c:	402a      	ands	r2, r5
 800185e:	4313      	orrs	r3, r2
 8001860:	005b      	lsls	r3, r3, #1
 8001862:	07e4      	lsls	r4, r4, #31
 8001864:	085b      	lsrs	r3, r3, #1
 8001866:	4323      	orrs	r3, r4
 8001868:	0019      	movs	r1, r3
 800186a:	bd70      	pop	{r4, r5, r6, pc}
 800186c:	0002      	movs	r2, r0
 800186e:	0029      	movs	r1, r5
 8001870:	3215      	adds	r2, #21
 8001872:	4091      	lsls	r1, r2
 8001874:	000a      	movs	r2, r1
 8001876:	210b      	movs	r1, #11
 8001878:	1a08      	subs	r0, r1, r0
 800187a:	40c5      	lsrs	r5, r0
 800187c:	032d      	lsls	r5, r5, #12
 800187e:	0b2d      	lsrs	r5, r5, #12
 8001880:	e7e3      	b.n	800184a <__aeabi_i2d+0x2a>
 8001882:	2400      	movs	r4, #0
 8001884:	2300      	movs	r3, #0
 8001886:	2500      	movs	r5, #0
 8001888:	2200      	movs	r2, #0
 800188a:	e7de      	b.n	800184a <__aeabi_i2d+0x2a>
 800188c:	0000041e 	.word	0x0000041e
 8001890:	800fffff 	.word	0x800fffff

08001894 <__clzsi2>:
 8001894:	211c      	movs	r1, #28
 8001896:	2301      	movs	r3, #1
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	4298      	cmp	r0, r3
 800189c:	d301      	bcc.n	80018a2 <__clzsi2+0xe>
 800189e:	0c00      	lsrs	r0, r0, #16
 80018a0:	3910      	subs	r1, #16
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	4298      	cmp	r0, r3
 80018a6:	d301      	bcc.n	80018ac <__clzsi2+0x18>
 80018a8:	0a00      	lsrs	r0, r0, #8
 80018aa:	3908      	subs	r1, #8
 80018ac:	091b      	lsrs	r3, r3, #4
 80018ae:	4298      	cmp	r0, r3
 80018b0:	d301      	bcc.n	80018b6 <__clzsi2+0x22>
 80018b2:	0900      	lsrs	r0, r0, #4
 80018b4:	3904      	subs	r1, #4
 80018b6:	a202      	add	r2, pc, #8	; (adr r2, 80018c0 <__clzsi2+0x2c>)
 80018b8:	5c10      	ldrb	r0, [r2, r0]
 80018ba:	1840      	adds	r0, r0, r1
 80018bc:	4770      	bx	lr
 80018be:	46c0      	nop			; (mov r8, r8)
 80018c0:	02020304 	.word	0x02020304
 80018c4:	01010101 	.word	0x01010101
	...

080018d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018d0:	b5b0      	push	{r4, r5, r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018d6:	f000 fb29 	bl	8001f2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018da:	f000 f977 	bl	8001bcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018de:	f000 fa07 	bl	8001cf0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80018e2:	f000 f9d5 	bl	8001c90 <MX_USART1_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

      HAL_UART_Receive_IT(&huart1, (uint8_t*)str, 3); // komanda priema dannih
 80018e6:	49ae      	ldr	r1, [pc, #696]	; (8001ba0 <main+0x2d0>)
 80018e8:	4bae      	ldr	r3, [pc, #696]	; (8001ba4 <main+0x2d4>)
 80018ea:	2203      	movs	r2, #3
 80018ec:	0018      	movs	r0, r3
 80018ee:	f001 fbf7 	bl	80030e0 <HAL_UART_Receive_IT>

      /*proverka na onn ili off*/

      if(str[0] == 0x6F && str[1] == 0x6E && str[2] == 0x6E ) {
 80018f2:	4bab      	ldr	r3, [pc, #684]	; (8001ba0 <main+0x2d0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b6f      	cmp	r3, #111	; 0x6f
 80018f8:	d10e      	bne.n	8001918 <main+0x48>
 80018fa:	4ba9      	ldr	r3, [pc, #676]	; (8001ba0 <main+0x2d0>)
 80018fc:	785b      	ldrb	r3, [r3, #1]
 80018fe:	2b6e      	cmp	r3, #110	; 0x6e
 8001900:	d10a      	bne.n	8001918 <main+0x48>
 8001902:	4ba7      	ldr	r3, [pc, #668]	; (8001ba0 <main+0x2d0>)
 8001904:	789b      	ldrb	r3, [r3, #2]
 8001906:	2b6e      	cmp	r3, #110	; 0x6e
 8001908:	d106      	bne.n	8001918 <main+0x48>
        onn = 1;
 800190a:	4ba7      	ldr	r3, [pc, #668]	; (8001ba8 <main+0x2d8>)
 800190c:	2201      	movs	r2, #1
 800190e:	601a      	str	r2, [r3, #0]
        off = 0;
 8001910:	4ba6      	ldr	r3, [pc, #664]	; (8001bac <main+0x2dc>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e011      	b.n	800193c <main+0x6c>
      } else if(str[0] == 0x6F && str[1] == 0x66 && str[2] == 0x66 ) {
 8001918:	4ba1      	ldr	r3, [pc, #644]	; (8001ba0 <main+0x2d0>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b6f      	cmp	r3, #111	; 0x6f
 800191e:	d10d      	bne.n	800193c <main+0x6c>
 8001920:	4b9f      	ldr	r3, [pc, #636]	; (8001ba0 <main+0x2d0>)
 8001922:	785b      	ldrb	r3, [r3, #1]
 8001924:	2b66      	cmp	r3, #102	; 0x66
 8001926:	d109      	bne.n	800193c <main+0x6c>
 8001928:	4b9d      	ldr	r3, [pc, #628]	; (8001ba0 <main+0x2d0>)
 800192a:	789b      	ldrb	r3, [r3, #2]
 800192c:	2b66      	cmp	r3, #102	; 0x66
 800192e:	d105      	bne.n	800193c <main+0x6c>
        onn = 0;
 8001930:	4b9d      	ldr	r3, [pc, #628]	; (8001ba8 <main+0x2d8>)
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
        off = 1;
 8001936:	4b9d      	ldr	r3, [pc, #628]	; (8001bac <main+0x2dc>)
 8001938:	2201      	movs	r2, #1
 800193a:	601a      	str	r2, [r3, #0]
      }


        /*proverka na f ili q pri vkl flage*/
      if (onn == 1) {
 800193c:	4b9a      	ldr	r3, [pc, #616]	; (8001ba8 <main+0x2d8>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d000      	beq.n	8001946 <main+0x76>
 8001944:	e10c      	b.n	8001b60 <main+0x290>

      if(str[2] == 0x66 && (str[0] >= 0x30 && str[0] <= 0x39) && (str[1] >= 0x30 && str[1] <= 0x39)) {
 8001946:	4b96      	ldr	r3, [pc, #600]	; (8001ba0 <main+0x2d0>)
 8001948:	789b      	ldrb	r3, [r3, #2]
 800194a:	2b66      	cmp	r3, #102	; 0x66
 800194c:	d116      	bne.n	800197c <main+0xac>
 800194e:	4b94      	ldr	r3, [pc, #592]	; (8001ba0 <main+0x2d0>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b2f      	cmp	r3, #47	; 0x2f
 8001954:	d912      	bls.n	800197c <main+0xac>
 8001956:	4b92      	ldr	r3, [pc, #584]	; (8001ba0 <main+0x2d0>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b39      	cmp	r3, #57	; 0x39
 800195c:	d80e      	bhi.n	800197c <main+0xac>
 800195e:	4b90      	ldr	r3, [pc, #576]	; (8001ba0 <main+0x2d0>)
 8001960:	785b      	ldrb	r3, [r3, #1]
 8001962:	2b2f      	cmp	r3, #47	; 0x2f
 8001964:	d90a      	bls.n	800197c <main+0xac>
 8001966:	4b8e      	ldr	r3, [pc, #568]	; (8001ba0 <main+0x2d0>)
 8001968:	785b      	ldrb	r3, [r3, #1]
 800196a:	2b39      	cmp	r3, #57	; 0x39
 800196c:	d806      	bhi.n	800197c <main+0xac>
        f = 1;
 800196e:	4b90      	ldr	r3, [pc, #576]	; (8001bb0 <main+0x2e0>)
 8001970:	2201      	movs	r2, #1
 8001972:	601a      	str	r2, [r3, #0]
        q = 0;
 8001974:	4b8f      	ldr	r3, [pc, #572]	; (8001bb4 <main+0x2e4>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	e028      	b.n	80019ce <main+0xfe>
      } else if(str[2] == 0x71 && (str[0] >= 0x30 && str[0] <= 0x39) && (str[1] >= 0x30 && str[1] <= 0x39)) {
 800197c:	4b88      	ldr	r3, [pc, #544]	; (8001ba0 <main+0x2d0>)
 800197e:	789b      	ldrb	r3, [r3, #2]
 8001980:	2b71      	cmp	r3, #113	; 0x71
 8001982:	d116      	bne.n	80019b2 <main+0xe2>
 8001984:	4b86      	ldr	r3, [pc, #536]	; (8001ba0 <main+0x2d0>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b2f      	cmp	r3, #47	; 0x2f
 800198a:	d912      	bls.n	80019b2 <main+0xe2>
 800198c:	4b84      	ldr	r3, [pc, #528]	; (8001ba0 <main+0x2d0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b39      	cmp	r3, #57	; 0x39
 8001992:	d80e      	bhi.n	80019b2 <main+0xe2>
 8001994:	4b82      	ldr	r3, [pc, #520]	; (8001ba0 <main+0x2d0>)
 8001996:	785b      	ldrb	r3, [r3, #1]
 8001998:	2b2f      	cmp	r3, #47	; 0x2f
 800199a:	d90a      	bls.n	80019b2 <main+0xe2>
 800199c:	4b80      	ldr	r3, [pc, #512]	; (8001ba0 <main+0x2d0>)
 800199e:	785b      	ldrb	r3, [r3, #1]
 80019a0:	2b39      	cmp	r3, #57	; 0x39
 80019a2:	d806      	bhi.n	80019b2 <main+0xe2>
        q = 1;
 80019a4:	4b83      	ldr	r3, [pc, #524]	; (8001bb4 <main+0x2e4>)
 80019a6:	2201      	movs	r2, #1
 80019a8:	601a      	str	r2, [r3, #0]
        f = 0;
 80019aa:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <main+0x2e0>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	e00d      	b.n	80019ce <main+0xfe>
      } else {
        for (int i = 0; i < 3; i ++) {
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	e007      	b.n	80019c8 <main+0xf8>
          str[i] = 0;
 80019b8:	4a79      	ldr	r2, [pc, #484]	; (8001ba0 <main+0x2d0>)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	18d3      	adds	r3, r2, r3
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < 3; i ++) {
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	3301      	adds	r3, #1
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b02      	cmp	r3, #2
 80019cc:	ddf4      	ble.n	80019b8 <main+0xe8>
        }
       }

      /* raschet frequincy*/
        if(f == 1){
 80019ce:	4b78      	ldr	r3, [pc, #480]	; (8001bb0 <main+0x2e0>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d141      	bne.n	8001a5a <main+0x18a>

        if (str[0] == 0x30) {
 80019d6:	4b72      	ldr	r3, [pc, #456]	; (8001ba0 <main+0x2d0>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	2b30      	cmp	r3, #48	; 0x30
 80019dc:	d10b      	bne.n	80019f6 <main+0x126>
        frequency = (str[1] - 48)*2;
 80019de:	4b70      	ldr	r3, [pc, #448]	; (8001ba0 <main+0x2d0>)
 80019e0:	785b      	ldrb	r3, [r3, #1]
 80019e2:	3b30      	subs	r3, #48	; 0x30
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7ff ff1a 	bl	8001820 <__aeabi_i2d>
 80019ec:	0003      	movs	r3, r0
 80019ee:	000c      	movs	r4, r1
 80019f0:	4a71      	ldr	r2, [pc, #452]	; (8001bb8 <main+0x2e8>)
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	6054      	str	r4, [r2, #4]
        }
        if (str[0] > 0x30){
 80019f6:	4b6a      	ldr	r3, [pc, #424]	; (8001ba0 <main+0x2d0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
 80019fa:	2b30      	cmp	r3, #48	; 0x30
 80019fc:	d915      	bls.n	8001a2a <main+0x15a>
        frequency = ((str[0] - 48)*10 + (str[1] - 48))*2;
 80019fe:	4b68      	ldr	r3, [pc, #416]	; (8001ba0 <main+0x2d0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	3b30      	subs	r3, #48	; 0x30
 8001a04:	001a      	movs	r2, r3
 8001a06:	0013      	movs	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	189b      	adds	r3, r3, r2
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	001a      	movs	r2, r3
 8001a10:	4b63      	ldr	r3, [pc, #396]	; (8001ba0 <main+0x2d0>)
 8001a12:	785b      	ldrb	r3, [r3, #1]
 8001a14:	3b30      	subs	r3, #48	; 0x30
 8001a16:	18d3      	adds	r3, r2, r3
 8001a18:	005b      	lsls	r3, r3, #1
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	f7ff ff00 	bl	8001820 <__aeabi_i2d>
 8001a20:	0003      	movs	r3, r0
 8001a22:	000c      	movs	r4, r1
 8001a24:	4a64      	ldr	r2, [pc, #400]	; (8001bb8 <main+0x2e8>)
 8001a26:	6013      	str	r3, [r2, #0]
 8001a28:	6054      	str	r4, [r2, #4]
        }

        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3); // switch led
 8001a2a:	4b64      	ldr	r3, [pc, #400]	; (8001bbc <main+0x2ec>)
 8001a2c:	2108      	movs	r1, #8
 8001a2e:	0018      	movs	r0, r3
 8001a30:	f000 fdab 	bl	800258a <HAL_GPIO_TogglePin>
        HAL_Delay(1000/frequency);       //delay
 8001a34:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <main+0x2e8>)
 8001a36:	685c      	ldr	r4, [r3, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	001a      	movs	r2, r3
 8001a3c:	0023      	movs	r3, r4
 8001a3e:	2000      	movs	r0, #0
 8001a40:	495f      	ldr	r1, [pc, #380]	; (8001bc0 <main+0x2f0>)
 8001a42:	f7fe ff65 	bl	8000910 <__aeabi_ddiv>
 8001a46:	0003      	movs	r3, r0
 8001a48:	000c      	movs	r4, r1
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	0021      	movs	r1, r4
 8001a4e:	f7fe fc25 	bl	800029c <__aeabi_d2uiz>
 8001a52:	0003      	movs	r3, r0
 8001a54:	0018      	movs	r0, r3
 8001a56:	f000 facd 	bl	8001ff4 <HAL_Delay>
        }

        /* raschet quantity*/
        if(q == 1){
 8001a5a:	4b56      	ldr	r3, [pc, #344]	; (8001bb4 <main+0x2e4>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d170      	bne.n	8001b44 <main+0x274>
        if (str[0] == 0x30) {
 8001a62:	4b4f      	ldr	r3, [pc, #316]	; (8001ba0 <main+0x2d0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	2b30      	cmp	r3, #48	; 0x30
 8001a68:	d10a      	bne.n	8001a80 <main+0x1b0>
        quantity = (str[1] - 48);
 8001a6a:	4b4d      	ldr	r3, [pc, #308]	; (8001ba0 <main+0x2d0>)
 8001a6c:	785b      	ldrb	r3, [r3, #1]
 8001a6e:	3b30      	subs	r3, #48	; 0x30
 8001a70:	0018      	movs	r0, r3
 8001a72:	f7ff fed5 	bl	8001820 <__aeabi_i2d>
 8001a76:	0003      	movs	r3, r0
 8001a78:	000c      	movs	r4, r1
 8001a7a:	4a52      	ldr	r2, [pc, #328]	; (8001bc4 <main+0x2f4>)
 8001a7c:	6013      	str	r3, [r2, #0]
 8001a7e:	6054      	str	r4, [r2, #4]
        }
        if (str[0] > 0x30){
 8001a80:	4b47      	ldr	r3, [pc, #284]	; (8001ba0 <main+0x2d0>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b30      	cmp	r3, #48	; 0x30
 8001a86:	d914      	bls.n	8001ab2 <main+0x1e2>
        quantity = (str[0] - 48)*10 + (str[1] - 48);
 8001a88:	4b45      	ldr	r3, [pc, #276]	; (8001ba0 <main+0x2d0>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	3b30      	subs	r3, #48	; 0x30
 8001a8e:	001a      	movs	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	189b      	adds	r3, r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	001a      	movs	r2, r3
 8001a9a:	4b41      	ldr	r3, [pc, #260]	; (8001ba0 <main+0x2d0>)
 8001a9c:	785b      	ldrb	r3, [r3, #1]
 8001a9e:	3b30      	subs	r3, #48	; 0x30
 8001aa0:	18d3      	adds	r3, r2, r3
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f7ff febc 	bl	8001820 <__aeabi_i2d>
 8001aa8:	0003      	movs	r3, r0
 8001aaa:	000c      	movs	r4, r1
 8001aac:	4a45      	ldr	r2, [pc, #276]	; (8001bc4 <main+0x2f4>)
 8001aae:	6013      	str	r3, [r2, #0]
 8001ab0:	6054      	str	r4, [r2, #4]
        }

        for(int i =0; i < (quantity*2)-1; i++ )
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	e00c      	b.n	8001ad2 <main+0x202>
        {
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001ab8:	4b40      	ldr	r3, [pc, #256]	; (8001bbc <main+0x2ec>)
 8001aba:	2108      	movs	r1, #8
 8001abc:	0018      	movs	r0, r3
 8001abe:	f000 fd64 	bl	800258a <HAL_GPIO_TogglePin>
        HAL_Delay(300);
 8001ac2:	2396      	movs	r3, #150	; 0x96
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f000 fa94 	bl	8001ff4 <HAL_Delay>
        for(int i =0; i < (quantity*2)-1; i++ )
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	68b8      	ldr	r0, [r7, #8]
 8001ad4:	f7ff fea4 	bl	8001820 <__aeabi_i2d>
 8001ad8:	0004      	movs	r4, r0
 8001ada:	000d      	movs	r5, r1
 8001adc:	4b39      	ldr	r3, [pc, #228]	; (8001bc4 <main+0x2f4>)
 8001ade:	6818      	ldr	r0, [r3, #0]
 8001ae0:	6859      	ldr	r1, [r3, #4]
 8001ae2:	0002      	movs	r2, r0
 8001ae4:	000b      	movs	r3, r1
 8001ae6:	f7fe fbf7 	bl	80002d8 <__aeabi_dadd>
 8001aea:	0002      	movs	r2, r0
 8001aec:	000b      	movs	r3, r1
 8001aee:	0010      	movs	r0, r2
 8001af0:	0019      	movs	r1, r3
 8001af2:	2200      	movs	r2, #0
 8001af4:	4b34      	ldr	r3, [pc, #208]	; (8001bc8 <main+0x2f8>)
 8001af6:	f7ff fb15 	bl	8001124 <__aeabi_dsub>
 8001afa:	0002      	movs	r2, r0
 8001afc:	000b      	movs	r3, r1
 8001afe:	0020      	movs	r0, r4
 8001b00:	0029      	movs	r1, r5
 8001b02:	f7fe fba3 	bl	800024c <__aeabi_dcmplt>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d1d6      	bne.n	8001ab8 <main+0x1e8>
        }

        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET); //reset led3
 8001b0a:	4b2c      	ldr	r3, [pc, #176]	; (8001bbc <main+0x2ec>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	2108      	movs	r1, #8
 8001b10:	0018      	movs	r0, r3
 8001b12:	f000 fd1d 	bl	8002550 <HAL_GPIO_WritePin>
         for (int i = 0; i < 3; i ++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	e007      	b.n	8001b2c <main+0x25c>
         str[i] = 0;
 8001b1c:	4a20      	ldr	r2, [pc, #128]	; (8001ba0 <main+0x2d0>)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	18d3      	adds	r3, r2, r3
 8001b22:	2200      	movs	r2, #0
 8001b24:	701a      	strb	r2, [r3, #0]
         for (int i = 0; i < 3; i ++) {
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3301      	adds	r3, #1
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	ddf4      	ble.n	8001b1c <main+0x24c>
        }

        off = 1;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <main+0x2dc>)
 8001b34:	2201      	movs	r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
        onn = 0;
 8001b38:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <main+0x2d8>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
        q = 0;
 8001b3e:	4b1d      	ldr	r3, [pc, #116]	; (8001bb4 <main+0x2e4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
      }

      if (f==0) {
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <main+0x2e0>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d109      	bne.n	8001b60 <main+0x290>
        HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001b4c:	4b1b      	ldr	r3, [pc, #108]	; (8001bbc <main+0x2ec>)
 8001b4e:	2108      	movs	r1, #8
 8001b50:	0018      	movs	r0, r3
 8001b52:	f000 fd1a 	bl	800258a <HAL_GPIO_TogglePin>
        HAL_Delay(500);
 8001b56:	23fa      	movs	r3, #250	; 0xfa
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	f000 fa4a 	bl	8001ff4 <HAL_Delay>
      }
      }

      /*vikluchenie */

      if (off == 1) {
 8001b60:	4b12      	ldr	r3, [pc, #72]	; (8001bac <main+0x2dc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d000      	beq.n	8001b6a <main+0x29a>
 8001b68:	e6bd      	b.n	80018e6 <main+0x16>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001b6a:	4b14      	ldr	r3, [pc, #80]	; (8001bbc <main+0x2ec>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2108      	movs	r1, #8
 8001b70:	0018      	movs	r0, r3
 8001b72:	f000 fced 	bl	8002550 <HAL_GPIO_WritePin>
      f = 0;
 8001b76:	4b0e      	ldr	r3, [pc, #56]	; (8001bb0 <main+0x2e0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
      for (int i = 0; i < 3; i ++) {
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	e007      	b.n	8001b92 <main+0x2c2>
      str[i] = 0;
 8001b82:	4a07      	ldr	r2, [pc, #28]	; (8001ba0 <main+0x2d0>)
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	18d3      	adds	r3, r2, r3
 8001b88:	2200      	movs	r2, #0
 8001b8a:	701a      	strb	r2, [r3, #0]
      for (int i = 0; i < 3; i ++) {
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	3301      	adds	r3, #1
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	ddf4      	ble.n	8001b82 <main+0x2b2>
        }
      off = 0;
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <main+0x2dc>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
      HAL_UART_Receive_IT(&huart1, (uint8_t*)str, 3); // komanda priema dannih
 8001b9e:	e6a2      	b.n	80018e6 <main+0x16>
 8001ba0:	200000d0 	.word	0x200000d0
 8001ba4:	2000004c 	.word	0x2000004c
 8001ba8:	20000038 	.word	0x20000038
 8001bac:	200000cc 	.word	0x200000cc
 8001bb0:	20000048 	.word	0x20000048
 8001bb4:	2000002c 	.word	0x2000002c
 8001bb8:	20000040 	.word	0x20000040
 8001bbc:	48000400 	.word	0x48000400
 8001bc0:	408f4000 	.word	0x408f4000
 8001bc4:	20000030 	.word	0x20000030
 8001bc8:	3ff00000 	.word	0x3ff00000

08001bcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bcc:	b590      	push	{r4, r7, lr}
 8001bce:	b095      	sub	sp, #84	; 0x54
 8001bd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bd2:	2420      	movs	r4, #32
 8001bd4:	193b      	adds	r3, r7, r4
 8001bd6:	0018      	movs	r0, r3
 8001bd8:	2330      	movs	r3, #48	; 0x30
 8001bda:	001a      	movs	r2, r3
 8001bdc:	2100      	movs	r1, #0
 8001bde:	f002 f897 	bl	8003d10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001be2:	2310      	movs	r3, #16
 8001be4:	18fb      	adds	r3, r7, r3
 8001be6:	0018      	movs	r0, r3
 8001be8:	2310      	movs	r3, #16
 8001bea:	001a      	movs	r2, r3
 8001bec:	2100      	movs	r1, #0
 8001bee:	f002 f88f 	bl	8003d10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bf2:	003b      	movs	r3, r7
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	2310      	movs	r3, #16
 8001bf8:	001a      	movs	r2, r3
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	f002 f888 	bl	8003d10 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c00:	0021      	movs	r1, r4
 8001c02:	187b      	adds	r3, r7, r1
 8001c04:	2202      	movs	r2, #2
 8001c06:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c08:	187b      	adds	r3, r7, r1
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c0e:	187b      	adds	r3, r7, r1
 8001c10:	2210      	movs	r2, #16
 8001c12:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c14:	187b      	adds	r3, r7, r1
 8001c16:	2202      	movs	r2, #2
 8001c18:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c1a:	187b      	adds	r3, r7, r1
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001c20:	187b      	adds	r3, r7, r1
 8001c22:	22a0      	movs	r2, #160	; 0xa0
 8001c24:	0392      	lsls	r2, r2, #14
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001c28:	187b      	adds	r3, r7, r1
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	0018      	movs	r0, r3
 8001c32:	f000 fcc5 	bl	80025c0 <HAL_RCC_OscConfig>
 8001c36:	1e03      	subs	r3, r0, #0
 8001c38:	d001      	beq.n	8001c3e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001c3a:	f000 f8a1 	bl	8001d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3e:	2110      	movs	r1, #16
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	2207      	movs	r2, #7
 8001c44:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	2202      	movs	r2, #2
 8001c4a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001c58:	187b      	adds	r3, r7, r1
 8001c5a:	2101      	movs	r1, #1
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f000 ffcb 	bl	8002bf8 <HAL_RCC_ClockConfig>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d001      	beq.n	8001c6a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c66:	f000 f88b 	bl	8001d80 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001c6a:	003b      	movs	r3, r7
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001c70:	003b      	movs	r3, r7
 8001c72:	2200      	movs	r2, #0
 8001c74:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c76:	003b      	movs	r3, r7
 8001c78:	0018      	movs	r0, r3
 8001c7a:	f001 f90f 	bl	8002e9c <HAL_RCCEx_PeriphCLKConfig>
 8001c7e:	1e03      	subs	r3, r0, #0
 8001c80:	d001      	beq.n	8001c86 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001c82:	f000 f87d 	bl	8001d80 <Error_Handler>
  }
}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	b015      	add	sp, #84	; 0x54
 8001c8c:	bd90      	pop	{r4, r7, pc}
	...

08001c90 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c94:	4b14      	ldr	r3, [pc, #80]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001c96:	4a15      	ldr	r2, [pc, #84]	; (8001cec <MX_USART1_UART_Init+0x5c>)
 8001c98:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c9a:	4b13      	ldr	r3, [pc, #76]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001c9c:	22e1      	movs	r2, #225	; 0xe1
 8001c9e:	0252      	lsls	r2, r2, #9
 8001ca0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001cb6:	220c      	movs	r2, #12
 8001cb8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ccc:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cd2:	4b05      	ldr	r3, [pc, #20]	; (8001ce8 <MX_USART1_UART_Init+0x58>)
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f001 f9af 	bl	8003038 <HAL_UART_Init>
 8001cda:	1e03      	subs	r3, r0, #0
 8001cdc:	d001      	beq.n	8001ce2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001cde:	f000 f84f 	bl	8001d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001ce2:	46c0      	nop			; (mov r8, r8)
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	2000004c 	.word	0x2000004c
 8001cec:	40013800 	.word	0x40013800

08001cf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cf0:	b590      	push	{r4, r7, lr}
 8001cf2:	b089      	sub	sp, #36	; 0x24
 8001cf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf6:	240c      	movs	r4, #12
 8001cf8:	193b      	adds	r3, r7, r4
 8001cfa:	0018      	movs	r0, r3
 8001cfc:	2314      	movs	r3, #20
 8001cfe:	001a      	movs	r2, r3
 8001d00:	2100      	movs	r1, #0
 8001d02:	f002 f805 	bl	8003d10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <MX_GPIO_Init+0x88>)
 8001d08:	695a      	ldr	r2, [r3, #20]
 8001d0a:	4b1b      	ldr	r3, [pc, #108]	; (8001d78 <MX_GPIO_Init+0x88>)
 8001d0c:	2180      	movs	r1, #128	; 0x80
 8001d0e:	0289      	lsls	r1, r1, #10
 8001d10:	430a      	orrs	r2, r1
 8001d12:	615a      	str	r2, [r3, #20]
 8001d14:	4b18      	ldr	r3, [pc, #96]	; (8001d78 <MX_GPIO_Init+0x88>)
 8001d16:	695a      	ldr	r2, [r3, #20]
 8001d18:	2380      	movs	r3, #128	; 0x80
 8001d1a:	029b      	lsls	r3, r3, #10
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
 8001d20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d22:	4b15      	ldr	r3, [pc, #84]	; (8001d78 <MX_GPIO_Init+0x88>)
 8001d24:	695a      	ldr	r2, [r3, #20]
 8001d26:	4b14      	ldr	r3, [pc, #80]	; (8001d78 <MX_GPIO_Init+0x88>)
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	02c9      	lsls	r1, r1, #11
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	615a      	str	r2, [r3, #20]
 8001d30:	4b11      	ldr	r3, [pc, #68]	; (8001d78 <MX_GPIO_Init+0x88>)
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	2380      	movs	r3, #128	; 0x80
 8001d36:	02db      	lsls	r3, r3, #11
 8001d38:	4013      	ands	r3, r2
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001d3e:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_GPIO_Init+0x8c>)
 8001d40:	2200      	movs	r2, #0
 8001d42:	2108      	movs	r1, #8
 8001d44:	0018      	movs	r0, r3
 8001d46:	f000 fc03 	bl	8002550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001d4a:	0021      	movs	r1, r4
 8001d4c:	187b      	adds	r3, r7, r1
 8001d4e:	2208      	movs	r2, #8
 8001d50:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d52:	187b      	adds	r3, r7, r1
 8001d54:	2201      	movs	r2, #1
 8001d56:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d58:	187b      	adds	r3, r7, r1
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	2200      	movs	r2, #0
 8001d62:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	187b      	adds	r3, r7, r1
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <MX_GPIO_Init+0x8c>)
 8001d68:	0019      	movs	r1, r3
 8001d6a:	0010      	movs	r0, r2
 8001d6c:	f000 fa88 	bl	8002280 <HAL_GPIO_Init>

}
 8001d70:	46c0      	nop			; (mov r8, r8)
 8001d72:	46bd      	mov	sp, r7
 8001d74:	b009      	add	sp, #36	; 0x24
 8001d76:	bd90      	pop	{r4, r7, pc}
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	48000400 	.word	0x48000400

08001d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
	...

08001d8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d92:	4b0f      	ldr	r3, [pc, #60]	; (8001dd0 <HAL_MspInit+0x44>)
 8001d94:	699a      	ldr	r2, [r3, #24]
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_MspInit+0x44>)
 8001d98:	2101      	movs	r1, #1
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	619a      	str	r2, [r3, #24]
 8001d9e:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <HAL_MspInit+0x44>)
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	2201      	movs	r2, #1
 8001da4:	4013      	ands	r3, r2
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b09      	ldr	r3, [pc, #36]	; (8001dd0 <HAL_MspInit+0x44>)
 8001dac:	69da      	ldr	r2, [r3, #28]
 8001dae:	4b08      	ldr	r3, [pc, #32]	; (8001dd0 <HAL_MspInit+0x44>)
 8001db0:	2180      	movs	r1, #128	; 0x80
 8001db2:	0549      	lsls	r1, r1, #21
 8001db4:	430a      	orrs	r2, r1
 8001db6:	61da      	str	r2, [r3, #28]
 8001db8:	4b05      	ldr	r3, [pc, #20]	; (8001dd0 <HAL_MspInit+0x44>)
 8001dba:	69da      	ldr	r2, [r3, #28]
 8001dbc:	2380      	movs	r3, #128	; 0x80
 8001dbe:	055b      	lsls	r3, r3, #21
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	603b      	str	r3, [r7, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001dc6:	46c0      	nop			; (mov r8, r8)
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08a      	sub	sp, #40	; 0x28
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ddc:	2314      	movs	r3, #20
 8001dde:	18fb      	adds	r3, r7, r3
 8001de0:	0018      	movs	r0, r3
 8001de2:	2314      	movs	r3, #20
 8001de4:	001a      	movs	r2, r3
 8001de6:	2100      	movs	r1, #0
 8001de8:	f001 ff92 	bl	8003d10 <memset>
  if(huart->Instance==USART1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <HAL_UART_MspInit+0xa0>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d13a      	bne.n	8001e6c <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001df6:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_UART_MspInit+0xa4>)
 8001df8:	699a      	ldr	r2, [r3, #24]
 8001dfa:	4b1f      	ldr	r3, [pc, #124]	; (8001e78 <HAL_UART_MspInit+0xa4>)
 8001dfc:	2180      	movs	r1, #128	; 0x80
 8001dfe:	01c9      	lsls	r1, r1, #7
 8001e00:	430a      	orrs	r2, r1
 8001e02:	619a      	str	r2, [r3, #24]
 8001e04:	4b1c      	ldr	r3, [pc, #112]	; (8001e78 <HAL_UART_MspInit+0xa4>)
 8001e06:	699a      	ldr	r2, [r3, #24]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	01db      	lsls	r3, r3, #7
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
 8001e10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e12:	4b19      	ldr	r3, [pc, #100]	; (8001e78 <HAL_UART_MspInit+0xa4>)
 8001e14:	695a      	ldr	r2, [r3, #20]
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <HAL_UART_MspInit+0xa4>)
 8001e18:	2180      	movs	r1, #128	; 0x80
 8001e1a:	0289      	lsls	r1, r1, #10
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	615a      	str	r2, [r3, #20]
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_UART_MspInit+0xa4>)
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	029b      	lsls	r3, r3, #10
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60fb      	str	r3, [r7, #12]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA2     ------> USART1_TX
    PA15     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8001e2e:	2114      	movs	r1, #20
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	4a12      	ldr	r2, [pc, #72]	; (8001e7c <HAL_UART_MspInit+0xa8>)
 8001e34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	187b      	adds	r3, r7, r1
 8001e38:	2202      	movs	r2, #2
 8001e3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	187b      	adds	r3, r7, r1
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e42:	187b      	adds	r3, r7, r1
 8001e44:	2203      	movs	r2, #3
 8001e46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e4e:	187a      	adds	r2, r7, r1
 8001e50:	2390      	movs	r3, #144	; 0x90
 8001e52:	05db      	lsls	r3, r3, #23
 8001e54:	0011      	movs	r1, r2
 8001e56:	0018      	movs	r0, r3
 8001e58:	f000 fa12 	bl	8002280 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	2100      	movs	r1, #0
 8001e60:	201b      	movs	r0, #27
 8001e62:	f000 f995 	bl	8002190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e66:	201b      	movs	r0, #27
 8001e68:	f000 f9a7 	bl	80021ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b00a      	add	sp, #40	; 0x28
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	00008004 	.word	0x00008004

08001e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}

08001e8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e8a:	b580      	push	{r7, lr}
 8001e8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8e:	e7fe      	b.n	8001e8e <HardFault_Handler+0x4>

08001e90 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001e94:	46c0      	nop			; (mov r8, r8)
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ea8:	f000 f888 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eac:	46c0      	nop			; (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001eb8:	4b03      	ldr	r3, [pc, #12]	; (8001ec8 <USART1_IRQHandler+0x14>)
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f001 f9b4 	bl	8003228 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001ec0:	46c0      	nop			; (mov r8, r8)
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	2000004c 	.word	0x2000004c

08001ecc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001ed0:	46c0      	nop			; (mov r8, r8)
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
	...

08001ed8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ed8:	480d      	ldr	r0, [pc, #52]	; (8001f10 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eda:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480d      	ldr	r0, [pc, #52]	; (8001f14 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ede:	490e      	ldr	r1, [pc, #56]	; (8001f18 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee0:	4a0e      	ldr	r2, [pc, #56]	; (8001f1c <LoopForever+0xe>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0b      	ldr	r2, [pc, #44]	; (8001f20 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef4:	4c0b      	ldr	r4, [pc, #44]	; (8001f24 <LoopForever+0x16>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f02:	f7ff ffe3 	bl	8001ecc <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f06:	f001 fedf 	bl	8003cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f0a:	f7ff fce1 	bl	80018d0 <main>

08001f0e <LoopForever>:

LoopForever:
    b LoopForever
 8001f0e:	e7fe      	b.n	8001f0e <LoopForever>
  ldr   r0, =_estack
 8001f10:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001f14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f18:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001f1c:	08003db8 	.word	0x08003db8
  ldr r2, =_sbss
 8001f20:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001f24:	200000d8 	.word	0x200000d8

08001f28 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f28:	e7fe      	b.n	8001f28 <ADC1_IRQHandler>
	...

08001f2c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <HAL_Init+0x24>)
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <HAL_Init+0x24>)
 8001f36:	2110      	movs	r1, #16
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	f000 f809 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f42:	f7ff ff23 	bl	8001d8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
}
 8001f48:	0018      	movs	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	46c0      	nop			; (mov r8, r8)
 8001f50:	40022000 	.word	0x40022000

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b590      	push	{r4, r7, lr}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f5c:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_InitTick+0x5c>)
 8001f5e:	681c      	ldr	r4, [r3, #0]
 8001f60:	4b14      	ldr	r3, [pc, #80]	; (8001fb4 <HAL_InitTick+0x60>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	0019      	movs	r1, r3
 8001f66:	23fa      	movs	r3, #250	; 0xfa
 8001f68:	0098      	lsls	r0, r3, #2
 8001f6a:	f7fe f8cd 	bl	8000108 <__udivsi3>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	0019      	movs	r1, r3
 8001f72:	0020      	movs	r0, r4
 8001f74:	f7fe f8c8 	bl	8000108 <__udivsi3>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f000 f92d 	bl	80021da <HAL_SYSTICK_Config>
 8001f80:	1e03      	subs	r3, r0, #0
 8001f82:	d001      	beq.n	8001f88 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	e00f      	b.n	8001fa8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b03      	cmp	r3, #3
 8001f8c:	d80b      	bhi.n	8001fa6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	2301      	movs	r3, #1
 8001f92:	425b      	negs	r3, r3
 8001f94:	2200      	movs	r2, #0
 8001f96:	0018      	movs	r0, r3
 8001f98:	f000 f8fa 	bl	8002190 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <HAL_InitTick+0x64>)
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	0018      	movs	r0, r3
 8001faa:	46bd      	mov	sp, r7
 8001fac:	b003      	add	sp, #12
 8001fae:	bd90      	pop	{r4, r7, pc}
 8001fb0:	20000000 	.word	0x20000000
 8001fb4:	20000008 	.word	0x20000008
 8001fb8:	20000004 	.word	0x20000004

08001fbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_IncTick+0x1c>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	001a      	movs	r2, r3
 8001fc6:	4b05      	ldr	r3, [pc, #20]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	18d2      	adds	r2, r2, r3
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_IncTick+0x20>)
 8001fce:	601a      	str	r2, [r3, #0]
}
 8001fd0:	46c0      	nop			; (mov r8, r8)
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	20000008 	.word	0x20000008
 8001fdc:	200000d4 	.word	0x200000d4

08001fe0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <HAL_GetTick+0x10>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
}
 8001fe8:	0018      	movs	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	200000d4 	.word	0x200000d4

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff fff0 	bl	8001fe0 <HAL_GetTick>
 8002000:	0003      	movs	r3, r0
 8002002:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	3301      	adds	r3, #1
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_Delay+0x40>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	001a      	movs	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	189b      	adds	r3, r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	f7ff ffe0 	bl	8001fe0 <HAL_GetTick>
 8002020:	0002      	movs	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	46c0      	nop			; (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b004      	add	sp, #16
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000008 	.word	0x20000008

08002038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	0002      	movs	r2, r0
 8002040:	1dfb      	adds	r3, r7, #7
 8002042:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002044:	1dfb      	adds	r3, r7, #7
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b7f      	cmp	r3, #127	; 0x7f
 800204a:	d809      	bhi.n	8002060 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800204c:	1dfb      	adds	r3, r7, #7
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	001a      	movs	r2, r3
 8002052:	231f      	movs	r3, #31
 8002054:	401a      	ands	r2, r3
 8002056:	4b04      	ldr	r3, [pc, #16]	; (8002068 <__NVIC_EnableIRQ+0x30>)
 8002058:	2101      	movs	r1, #1
 800205a:	4091      	lsls	r1, r2
 800205c:	000a      	movs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]
  }
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	b002      	add	sp, #8
 8002066:	bd80      	pop	{r7, pc}
 8002068:	e000e100 	.word	0xe000e100

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	0002      	movs	r2, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	1dfb      	adds	r3, r7, #7
 8002078:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800207a:	1dfb      	adds	r3, r7, #7
 800207c:	781b      	ldrb	r3, [r3, #0]
 800207e:	2b7f      	cmp	r3, #127	; 0x7f
 8002080:	d828      	bhi.n	80020d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002082:	4a2f      	ldr	r2, [pc, #188]	; (8002140 <__NVIC_SetPriority+0xd4>)
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	b25b      	sxtb	r3, r3
 800208a:	089b      	lsrs	r3, r3, #2
 800208c:	33c0      	adds	r3, #192	; 0xc0
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	589b      	ldr	r3, [r3, r2]
 8002092:	1dfa      	adds	r2, r7, #7
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	0011      	movs	r1, r2
 8002098:	2203      	movs	r2, #3
 800209a:	400a      	ands	r2, r1
 800209c:	00d2      	lsls	r2, r2, #3
 800209e:	21ff      	movs	r1, #255	; 0xff
 80020a0:	4091      	lsls	r1, r2
 80020a2:	000a      	movs	r2, r1
 80020a4:	43d2      	mvns	r2, r2
 80020a6:	401a      	ands	r2, r3
 80020a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	019b      	lsls	r3, r3, #6
 80020ae:	22ff      	movs	r2, #255	; 0xff
 80020b0:	401a      	ands	r2, r3
 80020b2:	1dfb      	adds	r3, r7, #7
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	0018      	movs	r0, r3
 80020b8:	2303      	movs	r3, #3
 80020ba:	4003      	ands	r3, r0
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020c0:	481f      	ldr	r0, [pc, #124]	; (8002140 <__NVIC_SetPriority+0xd4>)
 80020c2:	1dfb      	adds	r3, r7, #7
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	b25b      	sxtb	r3, r3
 80020c8:	089b      	lsrs	r3, r3, #2
 80020ca:	430a      	orrs	r2, r1
 80020cc:	33c0      	adds	r3, #192	; 0xc0
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020d2:	e031      	b.n	8002138 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d4:	4a1b      	ldr	r2, [pc, #108]	; (8002144 <__NVIC_SetPriority+0xd8>)
 80020d6:	1dfb      	adds	r3, r7, #7
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	0019      	movs	r1, r3
 80020dc:	230f      	movs	r3, #15
 80020de:	400b      	ands	r3, r1
 80020e0:	3b08      	subs	r3, #8
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	3306      	adds	r3, #6
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	18d3      	adds	r3, r2, r3
 80020ea:	3304      	adds	r3, #4
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	1dfa      	adds	r2, r7, #7
 80020f0:	7812      	ldrb	r2, [r2, #0]
 80020f2:	0011      	movs	r1, r2
 80020f4:	2203      	movs	r2, #3
 80020f6:	400a      	ands	r2, r1
 80020f8:	00d2      	lsls	r2, r2, #3
 80020fa:	21ff      	movs	r1, #255	; 0xff
 80020fc:	4091      	lsls	r1, r2
 80020fe:	000a      	movs	r2, r1
 8002100:	43d2      	mvns	r2, r2
 8002102:	401a      	ands	r2, r3
 8002104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	019b      	lsls	r3, r3, #6
 800210a:	22ff      	movs	r2, #255	; 0xff
 800210c:	401a      	ands	r2, r3
 800210e:	1dfb      	adds	r3, r7, #7
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	0018      	movs	r0, r3
 8002114:	2303      	movs	r3, #3
 8002116:	4003      	ands	r3, r0
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800211c:	4809      	ldr	r0, [pc, #36]	; (8002144 <__NVIC_SetPriority+0xd8>)
 800211e:	1dfb      	adds	r3, r7, #7
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	001c      	movs	r4, r3
 8002124:	230f      	movs	r3, #15
 8002126:	4023      	ands	r3, r4
 8002128:	3b08      	subs	r3, #8
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	430a      	orrs	r2, r1
 800212e:	3306      	adds	r3, #6
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	18c3      	adds	r3, r0, r3
 8002134:	3304      	adds	r3, #4
 8002136:	601a      	str	r2, [r3, #0]
}
 8002138:	46c0      	nop			; (mov r8, r8)
 800213a:	46bd      	mov	sp, r7
 800213c:	b003      	add	sp, #12
 800213e:	bd90      	pop	{r4, r7, pc}
 8002140:	e000e100 	.word	0xe000e100
 8002144:	e000ed00 	.word	0xe000ed00

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	4a0c      	ldr	r2, [pc, #48]	; (8002188 <SysTick_Config+0x40>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d901      	bls.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e010      	b.n	8002180 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <SysTick_Config+0x44>)
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	3a01      	subs	r2, #1
 8002164:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	2301      	movs	r3, #1
 8002168:	425b      	negs	r3, r3
 800216a:	2103      	movs	r1, #3
 800216c:	0018      	movs	r0, r3
 800216e:	f7ff ff7d 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <SysTick_Config+0x44>)
 8002174:	2200      	movs	r2, #0
 8002176:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002178:	4b04      	ldr	r3, [pc, #16]	; (800218c <SysTick_Config+0x44>)
 800217a:	2207      	movs	r2, #7
 800217c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217e:	2300      	movs	r3, #0
}
 8002180:	0018      	movs	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}
 8002188:	00ffffff 	.word	0x00ffffff
 800218c:	e000e010 	.word	0xe000e010

08002190 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002190:	b580      	push	{r7, lr}
 8002192:	b084      	sub	sp, #16
 8002194:	af00      	add	r7, sp, #0
 8002196:	60b9      	str	r1, [r7, #8]
 8002198:	607a      	str	r2, [r7, #4]
 800219a:	210f      	movs	r1, #15
 800219c:	187b      	adds	r3, r7, r1
 800219e:	1c02      	adds	r2, r0, #0
 80021a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80021a2:	68ba      	ldr	r2, [r7, #8]
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b25b      	sxtb	r3, r3
 80021aa:	0011      	movs	r1, r2
 80021ac:	0018      	movs	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	46bd      	mov	sp, r7
 80021b6:	b004      	add	sp, #16
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	0002      	movs	r2, r0
 80021c2:	1dfb      	adds	r3, r7, #7
 80021c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021c6:	1dfb      	adds	r3, r7, #7
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	b25b      	sxtb	r3, r3
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff ff33 	bl	8002038 <__NVIC_EnableIRQ>
}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b002      	add	sp, #8
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f7ff ffaf 	bl	8002148 <SysTick_Config>
 80021ea:	0003      	movs	r3, r0
}
 80021ec:	0018      	movs	r0, r3
 80021ee:	46bd      	mov	sp, r7
 80021f0:	b002      	add	sp, #8
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	230f      	movs	r3, #15
 80021fe:	18fb      	adds	r3, r7, r3
 8002200:	2200      	movs	r2, #0
 8002202:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2221      	movs	r2, #33	; 0x21
 8002208:	5c9b      	ldrb	r3, [r3, r2]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b02      	cmp	r3, #2
 800220e:	d007      	beq.n	8002220 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2204      	movs	r2, #4
 8002214:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002216:	230f      	movs	r3, #15
 8002218:	18fb      	adds	r3, r7, r3
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e028      	b.n	8002272 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	210e      	movs	r1, #14
 800222c:	438a      	bics	r2, r1
 800222e:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2101      	movs	r1, #1
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	2101      	movs	r1, #1
 800224a:	4091      	lsls	r1, r2
 800224c:	000a      	movs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2221      	movs	r2, #33	; 0x21
 8002254:	2101      	movs	r1, #1
 8002256:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2220      	movs	r2, #32
 800225c:	2100      	movs	r1, #0
 800225e:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002264:	2b00      	cmp	r3, #0
 8002266:	d004      	beq.n	8002272 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	0010      	movs	r0, r2
 8002270:	4798      	blx	r3
    } 
  }
  return status;
 8002272:	230f      	movs	r3, #15
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	781b      	ldrb	r3, [r3, #0]
}
 8002278:	0018      	movs	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	b004      	add	sp, #16
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800228e:	e149      	b.n	8002524 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2101      	movs	r1, #1
 8002296:	697a      	ldr	r2, [r7, #20]
 8002298:	4091      	lsls	r1, r2
 800229a:	000a      	movs	r2, r1
 800229c:	4013      	ands	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d100      	bne.n	80022a8 <HAL_GPIO_Init+0x28>
 80022a6:	e13a      	b.n	800251e <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d003      	beq.n	80022b8 <HAL_GPIO_Init+0x38>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	2b12      	cmp	r3, #18
 80022b6:	d123      	bne.n	8002300 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	08da      	lsrs	r2, r3, #3
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3208      	adds	r2, #8
 80022c0:	0092      	lsls	r2, r2, #2
 80022c2:	58d3      	ldr	r3, [r2, r3]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	2207      	movs	r2, #7
 80022ca:	4013      	ands	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	409a      	lsls	r2, r3
 80022d2:	0013      	movs	r3, r2
 80022d4:	43da      	mvns	r2, r3
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	691a      	ldr	r2, [r3, #16]
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2107      	movs	r1, #7
 80022e4:	400b      	ands	r3, r1
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	409a      	lsls	r2, r3
 80022ea:	0013      	movs	r3, r2
 80022ec:	693a      	ldr	r2, [r7, #16]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	08da      	lsrs	r2, r3, #3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	3208      	adds	r2, #8
 80022fa:	0092      	lsls	r2, r2, #2
 80022fc:	6939      	ldr	r1, [r7, #16]
 80022fe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002306:	697b      	ldr	r3, [r7, #20]
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	2203      	movs	r2, #3
 800230c:	409a      	lsls	r2, r3
 800230e:	0013      	movs	r3, r2
 8002310:	43da      	mvns	r2, r3
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	2203      	movs	r2, #3
 800231e:	401a      	ands	r2, r3
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	409a      	lsls	r2, r3
 8002326:	0013      	movs	r3, r2
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d00b      	beq.n	8002354 <HAL_GPIO_Init+0xd4>
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b02      	cmp	r3, #2
 8002342:	d007      	beq.n	8002354 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002348:	2b11      	cmp	r3, #17
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b12      	cmp	r3, #18
 8002352:	d130      	bne.n	80023b6 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	2203      	movs	r2, #3
 8002360:	409a      	lsls	r2, r3
 8002362:	0013      	movs	r3, r2
 8002364:	43da      	mvns	r2, r3
 8002366:	693b      	ldr	r3, [r7, #16]
 8002368:	4013      	ands	r3, r2
 800236a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	68da      	ldr	r2, [r3, #12]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	409a      	lsls	r2, r3
 8002376:	0013      	movs	r3, r2
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800238a:	2201      	movs	r2, #1
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	409a      	lsls	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	43da      	mvns	r2, r3
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4013      	ands	r3, r2
 8002398:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	091b      	lsrs	r3, r3, #4
 80023a0:	2201      	movs	r2, #1
 80023a2:	401a      	ands	r2, r3
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	409a      	lsls	r2, r3
 80023a8:	0013      	movs	r3, r2
 80023aa:	693a      	ldr	r2, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	409a      	lsls	r2, r3
 80023c4:	0013      	movs	r3, r2
 80023c6:	43da      	mvns	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	409a      	lsls	r2, r3
 80023d8:	0013      	movs	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685a      	ldr	r2, [r3, #4]
 80023ea:	2380      	movs	r3, #128	; 0x80
 80023ec:	055b      	lsls	r3, r3, #21
 80023ee:	4013      	ands	r3, r2
 80023f0:	d100      	bne.n	80023f4 <HAL_GPIO_Init+0x174>
 80023f2:	e094      	b.n	800251e <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f4:	4b51      	ldr	r3, [pc, #324]	; (800253c <HAL_GPIO_Init+0x2bc>)
 80023f6:	699a      	ldr	r2, [r3, #24]
 80023f8:	4b50      	ldr	r3, [pc, #320]	; (800253c <HAL_GPIO_Init+0x2bc>)
 80023fa:	2101      	movs	r1, #1
 80023fc:	430a      	orrs	r2, r1
 80023fe:	619a      	str	r2, [r3, #24]
 8002400:	4b4e      	ldr	r3, [pc, #312]	; (800253c <HAL_GPIO_Init+0x2bc>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	2201      	movs	r2, #1
 8002406:	4013      	ands	r3, r2
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800240c:	4a4c      	ldr	r2, [pc, #304]	; (8002540 <HAL_GPIO_Init+0x2c0>)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	089b      	lsrs	r3, r3, #2
 8002412:	3302      	adds	r3, #2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	589b      	ldr	r3, [r3, r2]
 8002418:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2203      	movs	r2, #3
 800241e:	4013      	ands	r3, r2
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	220f      	movs	r2, #15
 8002424:	409a      	lsls	r2, r3
 8002426:	0013      	movs	r3, r2
 8002428:	43da      	mvns	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4013      	ands	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	2390      	movs	r3, #144	; 0x90
 8002434:	05db      	lsls	r3, r3, #23
 8002436:	429a      	cmp	r2, r3
 8002438:	d00d      	beq.n	8002456 <HAL_GPIO_Init+0x1d6>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a41      	ldr	r2, [pc, #260]	; (8002544 <HAL_GPIO_Init+0x2c4>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d007      	beq.n	8002452 <HAL_GPIO_Init+0x1d2>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a40      	ldr	r2, [pc, #256]	; (8002548 <HAL_GPIO_Init+0x2c8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d101      	bne.n	800244e <HAL_GPIO_Init+0x1ce>
 800244a:	2302      	movs	r3, #2
 800244c:	e004      	b.n	8002458 <HAL_GPIO_Init+0x1d8>
 800244e:	2305      	movs	r3, #5
 8002450:	e002      	b.n	8002458 <HAL_GPIO_Init+0x1d8>
 8002452:	2301      	movs	r3, #1
 8002454:	e000      	b.n	8002458 <HAL_GPIO_Init+0x1d8>
 8002456:	2300      	movs	r3, #0
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	2103      	movs	r1, #3
 800245c:	400a      	ands	r2, r1
 800245e:	0092      	lsls	r2, r2, #2
 8002460:	4093      	lsls	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002468:	4935      	ldr	r1, [pc, #212]	; (8002540 <HAL_GPIO_Init+0x2c0>)
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	089b      	lsrs	r3, r3, #2
 800246e:	3302      	adds	r3, #2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	693a      	ldr	r2, [r7, #16]
 8002474:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002476:	4b35      	ldr	r3, [pc, #212]	; (800254c <HAL_GPIO_Init+0x2cc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	43da      	mvns	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	025b      	lsls	r3, r3, #9
 800248e:	4013      	ands	r3, r2
 8002490:	d003      	beq.n	800249a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	4313      	orrs	r3, r2
 8002498:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800249a:	4b2c      	ldr	r3, [pc, #176]	; (800254c <HAL_GPIO_Init+0x2cc>)
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80024a0:	4b2a      	ldr	r3, [pc, #168]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	43da      	mvns	r2, r3
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	4013      	ands	r3, r2
 80024ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	2380      	movs	r3, #128	; 0x80
 80024b6:	029b      	lsls	r3, r3, #10
 80024b8:	4013      	ands	r3, r2
 80024ba:	d003      	beq.n	80024c4 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80024bc:	693a      	ldr	r2, [r7, #16]
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80024c4:	4b21      	ldr	r3, [pc, #132]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024ca:	4b20      	ldr	r3, [pc, #128]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	43da      	mvns	r2, r3
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	4013      	ands	r3, r2
 80024d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	2380      	movs	r3, #128	; 0x80
 80024e0:	035b      	lsls	r3, r3, #13
 80024e2:	4013      	ands	r3, r2
 80024e4:	d003      	beq.n	80024ee <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80024ee:	4b17      	ldr	r3, [pc, #92]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80024f4:	4b15      	ldr	r3, [pc, #84]	; (800254c <HAL_GPIO_Init+0x2cc>)
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	43da      	mvns	r2, r3
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	4013      	ands	r3, r2
 8002502:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	2380      	movs	r3, #128	; 0x80
 800250a:	039b      	lsls	r3, r3, #14
 800250c:	4013      	ands	r3, r2
 800250e:	d003      	beq.n	8002518 <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4313      	orrs	r3, r2
 8002516:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002518:	4b0c      	ldr	r3, [pc, #48]	; (800254c <HAL_GPIO_Init+0x2cc>)
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	3301      	adds	r3, #1
 8002522:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	40da      	lsrs	r2, r3
 800252c:	1e13      	subs	r3, r2, #0
 800252e:	d000      	beq.n	8002532 <HAL_GPIO_Init+0x2b2>
 8002530:	e6ae      	b.n	8002290 <HAL_GPIO_Init+0x10>
  } 
}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	46bd      	mov	sp, r7
 8002536:	b006      	add	sp, #24
 8002538:	bd80      	pop	{r7, pc}
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	40021000 	.word	0x40021000
 8002540:	40010000 	.word	0x40010000
 8002544:	48000400 	.word	0x48000400
 8002548:	48000800 	.word	0x48000800
 800254c:	40010400 	.word	0x40010400

08002550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	0008      	movs	r0, r1
 800255a:	0011      	movs	r1, r2
 800255c:	1cbb      	adds	r3, r7, #2
 800255e:	1c02      	adds	r2, r0, #0
 8002560:	801a      	strh	r2, [r3, #0]
 8002562:	1c7b      	adds	r3, r7, #1
 8002564:	1c0a      	adds	r2, r1, #0
 8002566:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002568:	1c7b      	adds	r3, r7, #1
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002570:	1cbb      	adds	r3, r7, #2
 8002572:	881a      	ldrh	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002578:	e003      	b.n	8002582 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800257a:	1cbb      	adds	r3, r7, #2
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	46bd      	mov	sp, r7
 8002586:	b002      	add	sp, #8
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800258a:	b580      	push	{r7, lr}
 800258c:	b082      	sub	sp, #8
 800258e:	af00      	add	r7, sp, #0
 8002590:	6078      	str	r0, [r7, #4]
 8002592:	000a      	movs	r2, r1
 8002594:	1cbb      	adds	r3, r7, #2
 8002596:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	1cba      	adds	r2, r7, #2
 800259e:	8812      	ldrh	r2, [r2, #0]
 80025a0:	4013      	ands	r3, r2
 80025a2:	d005      	beq.n	80025b0 <HAL_GPIO_TogglePin+0x26>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025a4:	1cbb      	adds	r3, r7, #2
 80025a6:	881b      	ldrh	r3, [r3, #0]
 80025a8:	041a      	lsls	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80025ae:	e003      	b.n	80025b8 <HAL_GPIO_TogglePin+0x2e>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025b0:	1cbb      	adds	r3, r7, #2
 80025b2:	881a      	ldrh	r2, [r3, #0]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	619a      	str	r2, [r3, #24]
}
 80025b8:	46c0      	nop			; (mov r8, r8)
 80025ba:	46bd      	mov	sp, r7
 80025bc:	b002      	add	sp, #8
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e303      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2201      	movs	r2, #1
 80025d8:	4013      	ands	r3, r2
 80025da:	d100      	bne.n	80025de <HAL_RCC_OscConfig+0x1e>
 80025dc:	e08d      	b.n	80026fa <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80025de:	4bc4      	ldr	r3, [pc, #784]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	220c      	movs	r2, #12
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d00e      	beq.n	8002608 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025ea:	4bc1      	ldr	r3, [pc, #772]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	220c      	movs	r2, #12
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d116      	bne.n	8002624 <HAL_RCC_OscConfig+0x64>
 80025f6:	4bbe      	ldr	r3, [pc, #760]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	025b      	lsls	r3, r3, #9
 80025fe:	401a      	ands	r2, r3
 8002600:	2380      	movs	r3, #128	; 0x80
 8002602:	025b      	lsls	r3, r3, #9
 8002604:	429a      	cmp	r2, r3
 8002606:	d10d      	bne.n	8002624 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	4bb9      	ldr	r3, [pc, #740]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	2380      	movs	r3, #128	; 0x80
 800260e:	029b      	lsls	r3, r3, #10
 8002610:	4013      	ands	r3, r2
 8002612:	d100      	bne.n	8002616 <HAL_RCC_OscConfig+0x56>
 8002614:	e070      	b.n	80026f8 <HAL_RCC_OscConfig+0x138>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d000      	beq.n	8002620 <HAL_RCC_OscConfig+0x60>
 800261e:	e06b      	b.n	80026f8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e2da      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d107      	bne.n	800263c <HAL_RCC_OscConfig+0x7c>
 800262c:	4bb0      	ldr	r3, [pc, #704]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	4baf      	ldr	r3, [pc, #700]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002632:	2180      	movs	r1, #128	; 0x80
 8002634:	0249      	lsls	r1, r1, #9
 8002636:	430a      	orrs	r2, r1
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e02f      	b.n	800269c <HAL_RCC_OscConfig+0xdc>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10c      	bne.n	800265e <HAL_RCC_OscConfig+0x9e>
 8002644:	4baa      	ldr	r3, [pc, #680]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	4ba9      	ldr	r3, [pc, #676]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800264a:	49aa      	ldr	r1, [pc, #680]	; (80028f4 <HAL_RCC_OscConfig+0x334>)
 800264c:	400a      	ands	r2, r1
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	4ba7      	ldr	r3, [pc, #668]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4ba6      	ldr	r3, [pc, #664]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002656:	49a8      	ldr	r1, [pc, #672]	; (80028f8 <HAL_RCC_OscConfig+0x338>)
 8002658:	400a      	ands	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e01e      	b.n	800269c <HAL_RCC_OscConfig+0xdc>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	2b05      	cmp	r3, #5
 8002664:	d10e      	bne.n	8002684 <HAL_RCC_OscConfig+0xc4>
 8002666:	4ba2      	ldr	r3, [pc, #648]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	4ba1      	ldr	r3, [pc, #644]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	02c9      	lsls	r1, r1, #11
 8002670:	430a      	orrs	r2, r1
 8002672:	601a      	str	r2, [r3, #0]
 8002674:	4b9e      	ldr	r3, [pc, #632]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	4b9d      	ldr	r3, [pc, #628]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800267a:	2180      	movs	r1, #128	; 0x80
 800267c:	0249      	lsls	r1, r1, #9
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0xdc>
 8002684:	4b9a      	ldr	r3, [pc, #616]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	4b99      	ldr	r3, [pc, #612]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800268a:	499a      	ldr	r1, [pc, #616]	; (80028f4 <HAL_RCC_OscConfig+0x334>)
 800268c:	400a      	ands	r2, r1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	4b97      	ldr	r3, [pc, #604]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	4b96      	ldr	r3, [pc, #600]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002696:	4998      	ldr	r1, [pc, #608]	; (80028f8 <HAL_RCC_OscConfig+0x338>)
 8002698:	400a      	ands	r2, r1
 800269a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d014      	beq.n	80026ce <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fc9c 	bl	8001fe0 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026ae:	f7ff fc97 	bl	8001fe0 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b64      	cmp	r3, #100	; 0x64
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e28c      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c0:	4b8b      	ldr	r3, [pc, #556]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0xee>
 80026cc:	e015      	b.n	80026fa <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ce:	f7ff fc87 	bl	8001fe0 <HAL_GetTick>
 80026d2:	0003      	movs	r3, r0
 80026d4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7ff fc82 	bl	8001fe0 <HAL_GetTick>
 80026dc:	0002      	movs	r2, r0
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e277      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	2380      	movs	r3, #128	; 0x80
 80026f0:	029b      	lsls	r3, r3, #10
 80026f2:	4013      	ands	r3, r2
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0x118>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2202      	movs	r2, #2
 8002700:	4013      	ands	r3, r2
 8002702:	d100      	bne.n	8002706 <HAL_RCC_OscConfig+0x146>
 8002704:	e069      	b.n	80027da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002706:	4b7a      	ldr	r3, [pc, #488]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	220c      	movs	r2, #12
 800270c:	4013      	ands	r3, r2
 800270e:	d00b      	beq.n	8002728 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002710:	4b77      	ldr	r3, [pc, #476]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	220c      	movs	r2, #12
 8002716:	4013      	ands	r3, r2
 8002718:	2b08      	cmp	r3, #8
 800271a:	d11c      	bne.n	8002756 <HAL_RCC_OscConfig+0x196>
 800271c:	4b74      	ldr	r3, [pc, #464]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	025b      	lsls	r3, r3, #9
 8002724:	4013      	ands	r3, r2
 8002726:	d116      	bne.n	8002756 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002728:	4b71      	ldr	r3, [pc, #452]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2202      	movs	r2, #2
 800272e:	4013      	ands	r3, r2
 8002730:	d005      	beq.n	800273e <HAL_RCC_OscConfig+0x17e>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d001      	beq.n	800273e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	e24d      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273e:	4b6c      	ldr	r3, [pc, #432]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	22f8      	movs	r2, #248	; 0xf8
 8002744:	4393      	bics	r3, r2
 8002746:	0019      	movs	r1, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	00da      	lsls	r2, r3, #3
 800274e:	4b68      	ldr	r3, [pc, #416]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002750:	430a      	orrs	r2, r1
 8002752:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002754:	e041      	b.n	80027da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d024      	beq.n	80027a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275e:	4b64      	ldr	r3, [pc, #400]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b63      	ldr	r3, [pc, #396]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002764:	2101      	movs	r1, #1
 8002766:	430a      	orrs	r2, r1
 8002768:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7ff fc39 	bl	8001fe0 <HAL_GetTick>
 800276e:	0003      	movs	r3, r0
 8002770:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002774:	f7ff fc34 	bl	8001fe0 <HAL_GetTick>
 8002778:	0002      	movs	r2, r0
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e229      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002786:	4b5a      	ldr	r3, [pc, #360]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2202      	movs	r2, #2
 800278c:	4013      	ands	r3, r2
 800278e:	d0f1      	beq.n	8002774 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	22f8      	movs	r2, #248	; 0xf8
 8002796:	4393      	bics	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	00da      	lsls	r2, r3, #3
 80027a0:	4b53      	ldr	r3, [pc, #332]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80027a2:	430a      	orrs	r2, r1
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	e018      	b.n	80027da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a8:	4b51      	ldr	r3, [pc, #324]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b50      	ldr	r3, [pc, #320]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80027ae:	2101      	movs	r1, #1
 80027b0:	438a      	bics	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7ff fc14 	bl	8001fe0 <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027be:	f7ff fc0f 	bl	8001fe0 <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b02      	cmp	r3, #2
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e204      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d0:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	2202      	movs	r2, #2
 80027d6:	4013      	ands	r3, r2
 80027d8:	d1f1      	bne.n	80027be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	2208      	movs	r2, #8
 80027e0:	4013      	ands	r3, r2
 80027e2:	d036      	beq.n	8002852 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d019      	beq.n	8002820 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ec:	4b40      	ldr	r3, [pc, #256]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80027ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027f0:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80027f2:	2101      	movs	r1, #1
 80027f4:	430a      	orrs	r2, r1
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f8:	f7ff fbf2 	bl	8001fe0 <HAL_GetTick>
 80027fc:	0003      	movs	r3, r0
 80027fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002802:	f7ff fbed 	bl	8001fe0 <HAL_GetTick>
 8002806:	0002      	movs	r2, r0
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1e2      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002818:	2202      	movs	r2, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d0f1      	beq.n	8002802 <HAL_RCC_OscConfig+0x242>
 800281e:	e018      	b.n	8002852 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002826:	2101      	movs	r1, #1
 8002828:	438a      	bics	r2, r1
 800282a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800282c:	f7ff fbd8 	bl	8001fe0 <HAL_GetTick>
 8002830:	0003      	movs	r3, r0
 8002832:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002836:	f7ff fbd3 	bl	8001fe0 <HAL_GetTick>
 800283a:	0002      	movs	r2, r0
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e1c8      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	4b29      	ldr	r3, [pc, #164]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d1f1      	bne.n	8002836 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2204      	movs	r2, #4
 8002858:	4013      	ands	r3, r2
 800285a:	d100      	bne.n	800285e <HAL_RCC_OscConfig+0x29e>
 800285c:	e0b6      	b.n	80029cc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800285e:	231f      	movs	r3, #31
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b22      	ldr	r3, [pc, #136]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002868:	69da      	ldr	r2, [r3, #28]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	055b      	lsls	r3, r3, #21
 800286e:	4013      	ands	r3, r2
 8002870:	d111      	bne.n	8002896 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b1f      	ldr	r3, [pc, #124]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002874:	69da      	ldr	r2, [r3, #28]
 8002876:	4b1e      	ldr	r3, [pc, #120]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002878:	2180      	movs	r1, #128	; 0x80
 800287a:	0549      	lsls	r1, r1, #21
 800287c:	430a      	orrs	r2, r1
 800287e:	61da      	str	r2, [r3, #28]
 8002880:	4b1b      	ldr	r3, [pc, #108]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 8002882:	69da      	ldr	r2, [r3, #28]
 8002884:	2380      	movs	r3, #128	; 0x80
 8002886:	055b      	lsls	r3, r3, #21
 8002888:	4013      	ands	r3, r2
 800288a:	60fb      	str	r3, [r7, #12]
 800288c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800288e:	231f      	movs	r3, #31
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2201      	movs	r2, #1
 8002894:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002896:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_OscConfig+0x33c>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4013      	ands	r3, r2
 80028a0:	d11a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028a2:	4b16      	ldr	r3, [pc, #88]	; (80028fc <HAL_RCC_OscConfig+0x33c>)
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <HAL_RCC_OscConfig+0x33c>)
 80028a8:	2180      	movs	r1, #128	; 0x80
 80028aa:	0049      	lsls	r1, r1, #1
 80028ac:	430a      	orrs	r2, r1
 80028ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028b0:	f7ff fb96 	bl	8001fe0 <HAL_GetTick>
 80028b4:	0003      	movs	r3, r0
 80028b6:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	e008      	b.n	80028cc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ba:	f7ff fb91 	bl	8001fe0 <HAL_GetTick>
 80028be:	0002      	movs	r2, r0
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b64      	cmp	r3, #100	; 0x64
 80028c6:	d901      	bls.n	80028cc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e186      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_OscConfig+0x33c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	2380      	movs	r3, #128	; 0x80
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	4013      	ands	r3, r2
 80028d6:	d0f0      	beq.n	80028ba <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	689b      	ldr	r3, [r3, #8]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d10f      	bne.n	8002900 <HAL_RCC_OscConfig+0x340>
 80028e0:	4b03      	ldr	r3, [pc, #12]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80028e2:	6a1a      	ldr	r2, [r3, #32]
 80028e4:	4b02      	ldr	r3, [pc, #8]	; (80028f0 <HAL_RCC_OscConfig+0x330>)
 80028e6:	2101      	movs	r1, #1
 80028e8:	430a      	orrs	r2, r1
 80028ea:	621a      	str	r2, [r3, #32]
 80028ec:	e036      	b.n	800295c <HAL_RCC_OscConfig+0x39c>
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	40021000 	.word	0x40021000
 80028f4:	fffeffff 	.word	0xfffeffff
 80028f8:	fffbffff 	.word	0xfffbffff
 80028fc:	40007000 	.word	0x40007000
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d10c      	bne.n	8002922 <HAL_RCC_OscConfig+0x362>
 8002908:	4bb6      	ldr	r3, [pc, #728]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 800290a:	6a1a      	ldr	r2, [r3, #32]
 800290c:	4bb5      	ldr	r3, [pc, #724]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 800290e:	2101      	movs	r1, #1
 8002910:	438a      	bics	r2, r1
 8002912:	621a      	str	r2, [r3, #32]
 8002914:	4bb3      	ldr	r3, [pc, #716]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002916:	6a1a      	ldr	r2, [r3, #32]
 8002918:	4bb2      	ldr	r3, [pc, #712]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 800291a:	2104      	movs	r1, #4
 800291c:	438a      	bics	r2, r1
 800291e:	621a      	str	r2, [r3, #32]
 8002920:	e01c      	b.n	800295c <HAL_RCC_OscConfig+0x39c>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	689b      	ldr	r3, [r3, #8]
 8002926:	2b05      	cmp	r3, #5
 8002928:	d10c      	bne.n	8002944 <HAL_RCC_OscConfig+0x384>
 800292a:	4bae      	ldr	r3, [pc, #696]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 800292c:	6a1a      	ldr	r2, [r3, #32]
 800292e:	4bad      	ldr	r3, [pc, #692]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002930:	2104      	movs	r1, #4
 8002932:	430a      	orrs	r2, r1
 8002934:	621a      	str	r2, [r3, #32]
 8002936:	4bab      	ldr	r3, [pc, #684]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002938:	6a1a      	ldr	r2, [r3, #32]
 800293a:	4baa      	ldr	r3, [pc, #680]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 800293c:	2101      	movs	r1, #1
 800293e:	430a      	orrs	r2, r1
 8002940:	621a      	str	r2, [r3, #32]
 8002942:	e00b      	b.n	800295c <HAL_RCC_OscConfig+0x39c>
 8002944:	4ba7      	ldr	r3, [pc, #668]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002946:	6a1a      	ldr	r2, [r3, #32]
 8002948:	4ba6      	ldr	r3, [pc, #664]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 800294a:	2101      	movs	r1, #1
 800294c:	438a      	bics	r2, r1
 800294e:	621a      	str	r2, [r3, #32]
 8002950:	4ba4      	ldr	r3, [pc, #656]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002952:	6a1a      	ldr	r2, [r3, #32]
 8002954:	4ba3      	ldr	r3, [pc, #652]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002956:	2104      	movs	r1, #4
 8002958:	438a      	bics	r2, r1
 800295a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d014      	beq.n	800298e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7ff fb3c 	bl	8001fe0 <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	e009      	b.n	8002982 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7ff fb37 	bl	8001fe0 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	4a9b      	ldr	r2, [pc, #620]	; (8002be8 <HAL_RCC_OscConfig+0x628>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e12b      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002982:	4b98      	ldr	r3, [pc, #608]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	2202      	movs	r2, #2
 8002988:	4013      	ands	r3, r2
 800298a:	d0f0      	beq.n	800296e <HAL_RCC_OscConfig+0x3ae>
 800298c:	e013      	b.n	80029b6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298e:	f7ff fb27 	bl	8001fe0 <HAL_GetTick>
 8002992:	0003      	movs	r3, r0
 8002994:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002996:	e009      	b.n	80029ac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002998:	f7ff fb22 	bl	8001fe0 <HAL_GetTick>
 800299c:	0002      	movs	r2, r0
 800299e:	69bb      	ldr	r3, [r7, #24]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	4a91      	ldr	r2, [pc, #580]	; (8002be8 <HAL_RCC_OscConfig+0x628>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d901      	bls.n	80029ac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	e116      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ac:	4b8d      	ldr	r3, [pc, #564]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	2202      	movs	r2, #2
 80029b2:	4013      	ands	r3, r2
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80029b6:	231f      	movs	r3, #31
 80029b8:	18fb      	adds	r3, r7, r3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d105      	bne.n	80029cc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029c0:	4b88      	ldr	r3, [pc, #544]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 80029c2:	69da      	ldr	r2, [r3, #28]
 80029c4:	4b87      	ldr	r3, [pc, #540]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 80029c6:	4989      	ldr	r1, [pc, #548]	; (8002bec <HAL_RCC_OscConfig+0x62c>)
 80029c8:	400a      	ands	r2, r1
 80029ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2210      	movs	r2, #16
 80029d2:	4013      	ands	r3, r2
 80029d4:	d063      	beq.n	8002a9e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d12a      	bne.n	8002a34 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80029de:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 80029e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029e2:	4b80      	ldr	r3, [pc, #512]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 80029e4:	2104      	movs	r1, #4
 80029e6:	430a      	orrs	r2, r1
 80029e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80029ea:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 80029ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029ee:	4b7d      	ldr	r3, [pc, #500]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 80029f0:	2101      	movs	r1, #1
 80029f2:	430a      	orrs	r2, r1
 80029f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f6:	f7ff faf3 	bl	8001fe0 <HAL_GetTick>
 80029fa:	0003      	movs	r3, r0
 80029fc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a00:	f7ff faee 	bl	8001fe0 <HAL_GetTick>
 8002a04:	0002      	movs	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0e3      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002a12:	4b74      	ldr	r3, [pc, #464]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d0f1      	beq.n	8002a00 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a1c:	4b71      	ldr	r3, [pc, #452]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a20:	22f8      	movs	r2, #248	; 0xf8
 8002a22:	4393      	bics	r3, r2
 8002a24:	0019      	movs	r1, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	699b      	ldr	r3, [r3, #24]
 8002a2a:	00da      	lsls	r2, r3, #3
 8002a2c:	4b6d      	ldr	r3, [pc, #436]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	635a      	str	r2, [r3, #52]	; 0x34
 8002a32:	e034      	b.n	8002a9e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	3305      	adds	r3, #5
 8002a3a:	d111      	bne.n	8002a60 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002a3c:	4b69      	ldr	r3, [pc, #420]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	4b68      	ldr	r3, [pc, #416]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a42:	2104      	movs	r1, #4
 8002a44:	438a      	bics	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	22f8      	movs	r2, #248	; 0xf8
 8002a4e:	4393      	bics	r3, r2
 8002a50:	0019      	movs	r1, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	00da      	lsls	r2, r3, #3
 8002a58:	4b62      	ldr	r3, [pc, #392]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a5a:	430a      	orrs	r2, r1
 8002a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a5e:	e01e      	b.n	8002a9e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002a60:	4b60      	ldr	r3, [pc, #384]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a64:	4b5f      	ldr	r3, [pc, #380]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a66:	2104      	movs	r1, #4
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002a6c:	4b5d      	ldr	r3, [pc, #372]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a70:	4b5c      	ldr	r3, [pc, #368]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a72:	2101      	movs	r1, #1
 8002a74:	438a      	bics	r2, r1
 8002a76:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a78:	f7ff fab2 	bl	8001fe0 <HAL_GetTick>
 8002a7c:	0003      	movs	r3, r0
 8002a7e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002a82:	f7ff faad 	bl	8001fe0 <HAL_GetTick>
 8002a86:	0002      	movs	r2, r0
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e0a2      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a98:	2202      	movs	r2, #2
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d1f1      	bne.n	8002a82 <HAL_RCC_OscConfig+0x4c2>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d100      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4e8>
 8002aa6:	e097      	b.n	8002bd8 <HAL_RCC_OscConfig+0x618>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aa8:	4b4e      	ldr	r3, [pc, #312]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	220c      	movs	r2, #12
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d100      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4f6>
 8002ab4:	e06b      	b.n	8002b8e <HAL_RCC_OscConfig+0x5ce>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a1b      	ldr	r3, [r3, #32]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d14c      	bne.n	8002b58 <HAL_RCC_OscConfig+0x598>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002abe:	4b49      	ldr	r3, [pc, #292]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	4b48      	ldr	r3, [pc, #288]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002ac4:	494a      	ldr	r1, [pc, #296]	; (8002bf0 <HAL_RCC_OscConfig+0x630>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aca:	f7ff fa89 	bl	8001fe0 <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ad2:	e008      	b.n	8002ae6 <HAL_RCC_OscConfig+0x526>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ad4:	f7ff fa84 	bl	8001fe0 <HAL_GetTick>
 8002ad8:	0002      	movs	r2, r0
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x526>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e079      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ae6:	4b3f      	ldr	r3, [pc, #252]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	049b      	lsls	r3, r3, #18
 8002aee:	4013      	ands	r3, r2
 8002af0:	d1f0      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x514>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002af2:	4b3c      	ldr	r3, [pc, #240]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002af6:	220f      	movs	r2, #15
 8002af8:	4393      	bics	r3, r2
 8002afa:	0019      	movs	r1, r3
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b00:	4b38      	ldr	r3, [pc, #224]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b02:	430a      	orrs	r2, r1
 8002b04:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b06:	4b37      	ldr	r3, [pc, #220]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	4a3a      	ldr	r2, [pc, #232]	; (8002bf4 <HAL_RCC_OscConfig+0x634>)
 8002b0c:	4013      	ands	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b20:	4b30      	ldr	r3, [pc, #192]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	4b2f      	ldr	r3, [pc, #188]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	0449      	lsls	r1, r1, #17
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b2e:	f7ff fa57 	bl	8001fe0 <HAL_GetTick>
 8002b32:	0003      	movs	r3, r0
 8002b34:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x58a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b38:	f7ff fa52 	bl	8001fe0 <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x58a>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e047      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b4a:	4b26      	ldr	r3, [pc, #152]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	2380      	movs	r3, #128	; 0x80
 8002b50:	049b      	lsls	r3, r3, #18
 8002b52:	4013      	ands	r3, r2
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x578>
 8002b56:	e03f      	b.n	8002bd8 <HAL_RCC_OscConfig+0x618>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4b21      	ldr	r3, [pc, #132]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b5e:	4924      	ldr	r1, [pc, #144]	; (8002bf0 <HAL_RCC_OscConfig+0x630>)
 8002b60:	400a      	ands	r2, r1
 8002b62:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7ff fa3c 	bl	8001fe0 <HAL_GetTick>
 8002b68:	0003      	movs	r3, r0
 8002b6a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6e:	f7ff fa37 	bl	8001fe0 <HAL_GetTick>
 8002b72:	0002      	movs	r2, r0
 8002b74:	69bb      	ldr	r3, [r7, #24]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e02c      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b80:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	; 0x80
 8002b86:	049b      	lsls	r3, r3, #18
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d1f0      	bne.n	8002b6e <HAL_RCC_OscConfig+0x5ae>
 8002b8c:	e024      	b.n	8002bd8 <HAL_RCC_OscConfig+0x618>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_OscConfig+0x5da>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e01f      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002b9a:	4b12      	ldr	r3, [pc, #72]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <HAL_RCC_OscConfig+0x624>)
 8002ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba4:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	2380      	movs	r3, #128	; 0x80
 8002baa:	025b      	lsls	r3, r3, #9
 8002bac:	401a      	ands	r2, r3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d10e      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	220f      	movs	r2, #15
 8002bba:	401a      	ands	r2, r3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d107      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x614>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002bc4:	697a      	ldr	r2, [r7, #20]
 8002bc6:	23f0      	movs	r3, #240	; 0xf0
 8002bc8:	039b      	lsls	r3, r3, #14
 8002bca:	401a      	ands	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <HAL_RCC_OscConfig+0x61a>
        }
      }
    }
  }

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	0018      	movs	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	b008      	add	sp, #32
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	46c0      	nop			; (mov r8, r8)
 8002be4:	40021000 	.word	0x40021000
 8002be8:	00001388 	.word	0x00001388
 8002bec:	efffffff 	.word	0xefffffff
 8002bf0:	feffffff 	.word	0xfeffffff
 8002bf4:	ffc2ffff 	.word	0xffc2ffff

08002bf8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0b3      	b.n	8002d74 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c0c:	4b5b      	ldr	r3, [pc, #364]	; (8002d7c <HAL_RCC_ClockConfig+0x184>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d911      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c1a:	4b58      	ldr	r3, [pc, #352]	; (8002d7c <HAL_RCC_ClockConfig+0x184>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	4393      	bics	r3, r2
 8002c22:	0019      	movs	r1, r3
 8002c24:	4b55      	ldr	r3, [pc, #340]	; (8002d7c <HAL_RCC_ClockConfig+0x184>)
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c2c:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <HAL_RCC_ClockConfig+0x184>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2201      	movs	r2, #1
 8002c32:	4013      	ands	r3, r2
 8002c34:	683a      	ldr	r2, [r7, #0]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	d001      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e09a      	b.n	8002d74 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2202      	movs	r2, #2
 8002c44:	4013      	ands	r3, r2
 8002c46:	d015      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2204      	movs	r2, #4
 8002c4e:	4013      	ands	r3, r2
 8002c50:	d006      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c52:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002c58:	21e0      	movs	r1, #224	; 0xe0
 8002c5a:	00c9      	lsls	r1, r1, #3
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c60:	4b47      	ldr	r3, [pc, #284]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	22f0      	movs	r2, #240	; 0xf0
 8002c66:	4393      	bics	r3, r2
 8002c68:	0019      	movs	r1, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	4b44      	ldr	r3, [pc, #272]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002c70:	430a      	orrs	r2, r1
 8002c72:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d040      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d107      	bne.n	8002c96 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	4b3e      	ldr	r3, [pc, #248]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	2380      	movs	r3, #128	; 0x80
 8002c8c:	029b      	lsls	r3, r3, #10
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d114      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e06e      	b.n	8002d74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d107      	bne.n	8002cae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9e:	4b38      	ldr	r3, [pc, #224]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	2380      	movs	r3, #128	; 0x80
 8002ca4:	049b      	lsls	r3, r3, #18
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e062      	b.n	8002d74 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cae:	4b34      	ldr	r3, [pc, #208]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d101      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e05b      	b.n	8002d74 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cbc:	4b30      	ldr	r3, [pc, #192]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	2203      	movs	r2, #3
 8002cc2:	4393      	bics	r3, r2
 8002cc4:	0019      	movs	r1, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685a      	ldr	r2, [r3, #4]
 8002cca:	4b2d      	ldr	r3, [pc, #180]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cd0:	f7ff f986 	bl	8001fe0 <HAL_GetTick>
 8002cd4:	0003      	movs	r3, r0
 8002cd6:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd8:	e009      	b.n	8002cee <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cda:	f7ff f981 	bl	8001fe0 <HAL_GetTick>
 8002cde:	0002      	movs	r2, r0
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	4a27      	ldr	r2, [pc, #156]	; (8002d84 <HAL_RCC_ClockConfig+0x18c>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e042      	b.n	8002d74 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cee:	4b24      	ldr	r3, [pc, #144]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	220c      	movs	r2, #12
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d1ec      	bne.n	8002cda <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d00:	4b1e      	ldr	r3, [pc, #120]	; (8002d7c <HAL_RCC_ClockConfig+0x184>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2201      	movs	r2, #1
 8002d06:	4013      	ands	r3, r2
 8002d08:	683a      	ldr	r2, [r7, #0]
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d211      	bcs.n	8002d32 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	; (8002d7c <HAL_RCC_ClockConfig+0x184>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2201      	movs	r2, #1
 8002d14:	4393      	bics	r3, r2
 8002d16:	0019      	movs	r1, r3
 8002d18:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_RCC_ClockConfig+0x184>)
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d20:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <HAL_RCC_ClockConfig+0x184>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2201      	movs	r2, #1
 8002d26:	4013      	ands	r3, r2
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d001      	beq.n	8002d32 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e020      	b.n	8002d74 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2204      	movs	r2, #4
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d009      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d3c:	4b10      	ldr	r3, [pc, #64]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	4a11      	ldr	r2, [pc, #68]	; (8002d88 <HAL_RCC_ClockConfig+0x190>)
 8002d42:	4013      	ands	r3, r2
 8002d44:	0019      	movs	r1, r3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	4b0d      	ldr	r3, [pc, #52]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002d50:	f000 f820 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8002d54:	0001      	movs	r1, r0
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_ClockConfig+0x188>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	091b      	lsrs	r3, r3, #4
 8002d5c:	220f      	movs	r2, #15
 8002d5e:	4013      	ands	r3, r2
 8002d60:	4a0a      	ldr	r2, [pc, #40]	; (8002d8c <HAL_RCC_ClockConfig+0x194>)
 8002d62:	5cd3      	ldrb	r3, [r2, r3]
 8002d64:	000a      	movs	r2, r1
 8002d66:	40da      	lsrs	r2, r3
 8002d68:	4b09      	ldr	r3, [pc, #36]	; (8002d90 <HAL_RCC_ClockConfig+0x198>)
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f7ff f8f1 	bl	8001f54 <HAL_InitTick>
  
  return HAL_OK;
 8002d72:	2300      	movs	r3, #0
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	40021000 	.word	0x40021000
 8002d84:	00001388 	.word	0x00001388
 8002d88:	fffff8ff 	.word	0xfffff8ff
 8002d8c:	08003d98 	.word	0x08003d98
 8002d90:	20000000 	.word	0x20000000

08002d94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b08f      	sub	sp, #60	; 0x3c
 8002d98:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002d9a:	2314      	movs	r3, #20
 8002d9c:	18fb      	adds	r3, r7, r3
 8002d9e:	4a2b      	ldr	r2, [pc, #172]	; (8002e4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002da2:	c313      	stmia	r3!, {r0, r1, r4}
 8002da4:	6812      	ldr	r2, [r2, #0]
 8002da6:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002da8:	1d3b      	adds	r3, r7, #4
 8002daa:	4a29      	ldr	r2, [pc, #164]	; (8002e50 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002dac:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002dae:	c313      	stmia	r3!, {r0, r1, r4}
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db8:	2300      	movs	r3, #0
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	637b      	str	r3, [r7, #52]	; 0x34
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002dc8:	4b22      	ldr	r3, [pc, #136]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd0:	220c      	movs	r2, #12
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d002      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x4a>
 8002dd8:	2b08      	cmp	r3, #8
 8002dda:	d003      	beq.n	8002de4 <HAL_RCC_GetSysClockFreq+0x50>
 8002ddc:	e02d      	b.n	8002e3a <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002de0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002de2:	e02d      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de6:	0c9b      	lsrs	r3, r3, #18
 8002de8:	220f      	movs	r2, #15
 8002dea:	4013      	ands	r3, r2
 8002dec:	2214      	movs	r2, #20
 8002dee:	18ba      	adds	r2, r7, r2
 8002df0:	5cd3      	ldrb	r3, [r2, r3]
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002df4:	4b17      	ldr	r3, [pc, #92]	; (8002e54 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df8:	220f      	movs	r2, #15
 8002dfa:	4013      	ands	r3, r2
 8002dfc:	1d3a      	adds	r2, r7, #4
 8002dfe:	5cd3      	ldrb	r3, [r2, r3]
 8002e00:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002e02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e04:	2380      	movs	r3, #128	; 0x80
 8002e06:	025b      	lsls	r3, r3, #9
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e0e:	4812      	ldr	r0, [pc, #72]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e10:	f7fd f97a 	bl	8000108 <__udivsi3>
 8002e14:	0003      	movs	r3, r0
 8002e16:	001a      	movs	r2, r3
 8002e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e1a:	4353      	muls	r3, r2
 8002e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e1e:	e009      	b.n	8002e34 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e22:	000a      	movs	r2, r1
 8002e24:	0152      	lsls	r2, r2, #5
 8002e26:	1a52      	subs	r2, r2, r1
 8002e28:	0193      	lsls	r3, r2, #6
 8002e2a:	1a9b      	subs	r3, r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	185b      	adds	r3, r3, r1
 8002e30:	021b      	lsls	r3, r3, #8
 8002e32:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002e34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e38:	e002      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e3a:	4b07      	ldr	r3, [pc, #28]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e3c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002e3e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002e42:	0018      	movs	r0, r3
 8002e44:	46bd      	mov	sp, r7
 8002e46:	b00f      	add	sp, #60	; 0x3c
 8002e48:	bd90      	pop	{r4, r7, pc}
 8002e4a:	46c0      	nop			; (mov r8, r8)
 8002e4c:	08003d38 	.word	0x08003d38
 8002e50:	08003d48 	.word	0x08003d48
 8002e54:	40021000 	.word	0x40021000
 8002e58:	007a1200 	.word	0x007a1200

08002e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e60:	4b02      	ldr	r3, [pc, #8]	; (8002e6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002e62:	681b      	ldr	r3, [r3, #0]
}
 8002e64:	0018      	movs	r0, r3
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	46c0      	nop			; (mov r8, r8)
 8002e6c:	20000000 	.word	0x20000000

08002e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002e74:	f7ff fff2 	bl	8002e5c <HAL_RCC_GetHCLKFreq>
 8002e78:	0001      	movs	r1, r0
 8002e7a:	4b06      	ldr	r3, [pc, #24]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	0a1b      	lsrs	r3, r3, #8
 8002e80:	2207      	movs	r2, #7
 8002e82:	4013      	ands	r3, r2
 8002e84:	4a04      	ldr	r2, [pc, #16]	; (8002e98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	40d9      	lsrs	r1, r3
 8002e8a:	000b      	movs	r3, r1
}    
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000
 8002e98:	08003da8 	.word	0x08003da8

08002e9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2380      	movs	r3, #128	; 0x80
 8002eb2:	025b      	lsls	r3, r3, #9
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	d100      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002eb8:	e08f      	b.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002eba:	2317      	movs	r3, #23
 8002ebc:	18fb      	adds	r3, r7, r3
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ec2:	4b57      	ldr	r3, [pc, #348]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ec4:	69da      	ldr	r2, [r3, #28]
 8002ec6:	2380      	movs	r3, #128	; 0x80
 8002ec8:	055b      	lsls	r3, r3, #21
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d111      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ece:	4b54      	ldr	r3, [pc, #336]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ed0:	69da      	ldr	r2, [r3, #28]
 8002ed2:	4b53      	ldr	r3, [pc, #332]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	0549      	lsls	r1, r1, #21
 8002ed8:	430a      	orrs	r2, r1
 8002eda:	61da      	str	r2, [r3, #28]
 8002edc:	4b50      	ldr	r3, [pc, #320]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	055b      	lsls	r3, r3, #21
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	60bb      	str	r3, [r7, #8]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eea:	2317      	movs	r3, #23
 8002eec:	18fb      	adds	r3, r7, r3
 8002eee:	2201      	movs	r2, #1
 8002ef0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b4c      	ldr	r3, [pc, #304]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	2380      	movs	r3, #128	; 0x80
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	4013      	ands	r3, r2
 8002efc:	d11a      	bne.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b49      	ldr	r3, [pc, #292]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	4b48      	ldr	r3, [pc, #288]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f04:	2180      	movs	r1, #128	; 0x80
 8002f06:	0049      	lsls	r1, r1, #1
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0c:	f7ff f868 	bl	8001fe0 <HAL_GetTick>
 8002f10:	0003      	movs	r3, r0
 8002f12:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f14:	e008      	b.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f16:	f7ff f863 	bl	8001fe0 <HAL_GetTick>
 8002f1a:	0002      	movs	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b64      	cmp	r3, #100	; 0x64
 8002f22:	d901      	bls.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e077      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x17c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f28:	4b3e      	ldr	r3, [pc, #248]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	4013      	ands	r3, r2
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f34:	4b3a      	ldr	r3, [pc, #232]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f36:	6a1a      	ldr	r2, [r3, #32]
 8002f38:	23c0      	movs	r3, #192	; 0xc0
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d034      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	23c0      	movs	r3, #192	; 0xc0
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4013      	ands	r3, r2
 8002f50:	68fa      	ldr	r2, [r7, #12]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d02c      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f56:	4b32      	ldr	r3, [pc, #200]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4a33      	ldr	r2, [pc, #204]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f60:	4b2f      	ldr	r3, [pc, #188]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f62:	6a1a      	ldr	r2, [r3, #32]
 8002f64:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	0249      	lsls	r1, r1, #9
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6e:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f70:	6a1a      	ldr	r2, [r3, #32]
 8002f72:	4b2b      	ldr	r3, [pc, #172]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f74:	492d      	ldr	r1, [pc, #180]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002f76:	400a      	ands	r2, r1
 8002f78:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002f7a:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2201      	movs	r2, #1
 8002f84:	4013      	ands	r3, r2
 8002f86:	d013      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f88:	f7ff f82a 	bl	8001fe0 <HAL_GetTick>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f90:	e009      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f92:	f7ff f825 	bl	8001fe0 <HAL_GetTick>
 8002f96:	0002      	movs	r2, r0
 8002f98:	693b      	ldr	r3, [r7, #16]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	4a24      	ldr	r2, [pc, #144]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e038      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x17c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa6:	4b1e      	ldr	r3, [pc, #120]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	2202      	movs	r2, #2
 8002fac:	4013      	ands	r3, r2
 8002fae:	d0f0      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fb0:	4b1b      	ldr	r3, [pc, #108]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	4a1c      	ldr	r2, [pc, #112]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	0019      	movs	r1, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002fc4:	2317      	movs	r3, #23
 8002fc6:	18fb      	adds	r3, r7, r3
 8002fc8:	781b      	ldrb	r3, [r3, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d105      	bne.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fce:	4b14      	ldr	r3, [pc, #80]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fd0:	69da      	ldr	r2, [r3, #28]
 8002fd2:	4b13      	ldr	r3, [pc, #76]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fd4:	4917      	ldr	r1, [pc, #92]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002fd6:	400a      	ands	r2, r1
 8002fd8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d009      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fe4:	4b0e      	ldr	r3, [pc, #56]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe8:	2203      	movs	r2, #3
 8002fea:	4393      	bics	r3, r2
 8002fec:	0019      	movs	r1, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	4013      	ands	r3, r2
 8003000:	d009      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003006:	2210      	movs	r2, #16
 8003008:	4393      	bics	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	4b03      	ldr	r3, [pc, #12]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003012:	430a      	orrs	r2, r1
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	0018      	movs	r0, r3
 800301a:	46bd      	mov	sp, r7
 800301c:	b006      	add	sp, #24
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40021000 	.word	0x40021000
 8003024:	40007000 	.word	0x40007000
 8003028:	fffffcff 	.word	0xfffffcff
 800302c:	fffeffff 	.word	0xfffeffff
 8003030:	00001388 	.word	0x00001388
 8003034:	efffffff 	.word	0xefffffff

08003038 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e044      	b.n	80030d4 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800304e:	2b00      	cmp	r3, #0
 8003050:	d107      	bne.n	8003062 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2270      	movs	r2, #112	; 0x70
 8003056:	2100      	movs	r1, #0
 8003058:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	0018      	movs	r0, r3
 800305e:	f7fe feb9 	bl	8001dd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2224      	movs	r2, #36	; 0x24
 8003066:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2101      	movs	r1, #1
 8003074:	438a      	bics	r2, r1
 8003076:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	0018      	movs	r0, r3
 800307c:	f000 fa28 	bl	80034d0 <UART_SetConfig>
 8003080:	0003      	movs	r3, r0
 8003082:	2b01      	cmp	r3, #1
 8003084:	d101      	bne.n	800308a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e024      	b.n	80030d4 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	0018      	movs	r0, r3
 8003096:	f000 fb89 	bl	80037ac <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	490d      	ldr	r1, [pc, #52]	; (80030dc <HAL_UART_Init+0xa4>)
 80030a6:	400a      	ands	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	212a      	movs	r1, #42	; 0x2a
 80030b6:	438a      	bics	r2, r1
 80030b8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2101      	movs	r1, #1
 80030c6:	430a      	orrs	r2, r1
 80030c8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 fc21 	bl	8003914 <UART_CheckIdleState>
 80030d2:	0003      	movs	r3, r0
}
 80030d4:	0018      	movs	r0, r3
 80030d6:	46bd      	mov	sp, r7
 80030d8:	b002      	add	sp, #8
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	ffffb7ff 	.word	0xffffb7ff

080030e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	1dbb      	adds	r3, r7, #6
 80030ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f2:	2b20      	cmp	r3, #32
 80030f4:	d000      	beq.n	80030f8 <HAL_UART_Receive_IT+0x18>
 80030f6:	e08b      	b.n	8003210 <HAL_UART_Receive_IT+0x130>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d003      	beq.n	8003106 <HAL_UART_Receive_IT+0x26>
 80030fe:	1dbb      	adds	r3, r7, #6
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e083      	b.n	8003212 <HAL_UART_Receive_IT+0x132>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	2380      	movs	r3, #128	; 0x80
 8003110:	015b      	lsls	r3, r3, #5
 8003112:	429a      	cmp	r2, r3
 8003114:	d109      	bne.n	800312a <HAL_UART_Receive_IT+0x4a>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	691b      	ldr	r3, [r3, #16]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	2201      	movs	r2, #1
 8003122:	4013      	ands	r3, r2
 8003124:	d001      	beq.n	800312a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e073      	b.n	8003212 <HAL_UART_Receive_IT+0x132>
      }
    }

    __HAL_LOCK(huart);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2270      	movs	r2, #112	; 0x70
 800312e:	5c9b      	ldrb	r3, [r3, r2]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_UART_Receive_IT+0x58>
 8003134:	2302      	movs	r3, #2
 8003136:	e06c      	b.n	8003212 <HAL_UART_Receive_IT+0x132>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2270      	movs	r2, #112	; 0x70
 800313c:	2101      	movs	r1, #1
 800313e:	5499      	strb	r1, [r3, r2]

    huart->pRxBuffPtr  = pData;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	1dba      	adds	r2, r7, #6
 800314a:	2158      	movs	r1, #88	; 0x58
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	1dba      	adds	r2, r7, #6
 8003154:	215a      	movs	r1, #90	; 0x5a
 8003156:	8812      	ldrh	r2, [r2, #0]
 8003158:	525a      	strh	r2, [r3, r1]
    huart->RxISR       = NULL;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2200      	movs	r2, #0
 800315e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	689a      	ldr	r2, [r3, #8]
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	015b      	lsls	r3, r3, #5
 8003168:	429a      	cmp	r2, r3
 800316a:	d10d      	bne.n	8003188 <HAL_UART_Receive_IT+0xa8>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <HAL_UART_Receive_IT+0x9e>
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	225c      	movs	r2, #92	; 0x5c
 8003178:	4928      	ldr	r1, [pc, #160]	; (800321c <HAL_UART_Receive_IT+0x13c>)
 800317a:	5299      	strh	r1, [r3, r2]
 800317c:	e01a      	b.n	80031b4 <HAL_UART_Receive_IT+0xd4>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	225c      	movs	r2, #92	; 0x5c
 8003182:	21ff      	movs	r1, #255	; 0xff
 8003184:	5299      	strh	r1, [r3, r2]
 8003186:	e015      	b.n	80031b4 <HAL_UART_Receive_IT+0xd4>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_UART_Receive_IT+0xcc>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d104      	bne.n	80031a2 <HAL_UART_Receive_IT+0xc2>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	225c      	movs	r2, #92	; 0x5c
 800319c:	21ff      	movs	r1, #255	; 0xff
 800319e:	5299      	strh	r1, [r3, r2]
 80031a0:	e008      	b.n	80031b4 <HAL_UART_Receive_IT+0xd4>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	225c      	movs	r2, #92	; 0x5c
 80031a6:	217f      	movs	r1, #127	; 0x7f
 80031a8:	5299      	strh	r1, [r3, r2]
 80031aa:	e003      	b.n	80031b4 <HAL_UART_Receive_IT+0xd4>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	225c      	movs	r2, #92	; 0x5c
 80031b0:	2100      	movs	r1, #0
 80031b2:	5299      	strh	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2222      	movs	r2, #34	; 0x22
 80031be:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2101      	movs	r1, #1
 80031cc:	430a      	orrs	r2, r1
 80031ce:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	2380      	movs	r3, #128	; 0x80
 80031d6:	015b      	lsls	r3, r3, #5
 80031d8:	429a      	cmp	r2, r3
 80031da:	d107      	bne.n	80031ec <HAL_UART_Receive_IT+0x10c>
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d103      	bne.n	80031ec <HAL_UART_Receive_IT+0x10c>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	4a0e      	ldr	r2, [pc, #56]	; (8003220 <HAL_UART_Receive_IT+0x140>)
 80031e8:	661a      	str	r2, [r3, #96]	; 0x60
 80031ea:	e002      	b.n	80031f2 <HAL_UART_Receive_IT+0x112>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4a0d      	ldr	r2, [pc, #52]	; (8003224 <HAL_UART_Receive_IT+0x144>)
 80031f0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2270      	movs	r2, #112	; 0x70
 80031f6:	2100      	movs	r1, #0
 80031f8:	5499      	strb	r1, [r3, r2]

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2190      	movs	r1, #144	; 0x90
 8003206:	0049      	lsls	r1, r1, #1
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800320c:	2300      	movs	r3, #0
 800320e:	e000      	b.n	8003212 <HAL_UART_Receive_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
  }
}
 8003212:	0018      	movs	r0, r3
 8003214:	46bd      	mov	sp, r7
 8003216:	b004      	add	sp, #16
 8003218:	bd80      	pop	{r7, pc}
 800321a:	46c0      	nop			; (mov r8, r8)
 800321c:	000001ff 	.word	0x000001ff
 8003220:	08003bfd 	.word	0x08003bfd
 8003224:	08003b41 	.word	0x08003b41

08003228 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b088      	sub	sp, #32
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	69db      	ldr	r3, [r3, #28]
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	4a93      	ldr	r2, [pc, #588]	; (8003498 <HAL_UART_IRQHandler+0x270>)
 800324c:	4013      	ands	r3, r2
 800324e:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d112      	bne.n	800327c <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	2220      	movs	r2, #32
 800325a:	4013      	ands	r3, r2
 800325c:	d00e      	beq.n	800327c <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2220      	movs	r2, #32
 8003262:	4013      	ands	r3, r2
 8003264:	d00a      	beq.n	800327c <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326a:	2b00      	cmp	r3, #0
 800326c:	d100      	bne.n	8003270 <HAL_UART_IRQHandler+0x48>
 800326e:	e10b      	b.n	8003488 <HAL_UART_IRQHandler+0x260>
      {
        huart->RxISR(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	0010      	movs	r0, r2
 8003278:	4798      	blx	r3
      }
      return;
 800327a:	e105      	b.n	8003488 <HAL_UART_IRQHandler+0x260>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d100      	bne.n	8003284 <HAL_UART_IRQHandler+0x5c>
 8003282:	e0cd      	b.n	8003420 <HAL_UART_IRQHandler+0x1f8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	2201      	movs	r2, #1
 8003288:	4013      	ands	r3, r2
 800328a:	d105      	bne.n	8003298 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	2390      	movs	r3, #144	; 0x90
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	4013      	ands	r3, r2
 8003294:	d100      	bne.n	8003298 <HAL_UART_IRQHandler+0x70>
 8003296:	e0c3      	b.n	8003420 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	2201      	movs	r2, #1
 800329c:	4013      	ands	r3, r2
 800329e:	d00e      	beq.n	80032be <HAL_UART_IRQHandler+0x96>
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	2380      	movs	r3, #128	; 0x80
 80032a4:	005b      	lsls	r3, r3, #1
 80032a6:	4013      	ands	r3, r2
 80032a8:	d009      	beq.n	80032be <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2201      	movs	r2, #1
 80032b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032b6:	2201      	movs	r2, #1
 80032b8:	431a      	orrs	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	2202      	movs	r2, #2
 80032c2:	4013      	ands	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_UART_IRQHandler+0xba>
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2201      	movs	r2, #1
 80032ca:	4013      	ands	r3, r2
 80032cc:	d009      	beq.n	80032e2 <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2202      	movs	r2, #2
 80032d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032da:	2204      	movs	r2, #4
 80032dc:	431a      	orrs	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	2204      	movs	r2, #4
 80032e6:	4013      	ands	r3, r2
 80032e8:	d00d      	beq.n	8003306 <HAL_UART_IRQHandler+0xde>
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2201      	movs	r2, #1
 80032ee:	4013      	ands	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2204      	movs	r2, #4
 80032f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fe:	2202      	movs	r2, #2
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2208      	movs	r2, #8
 800330a:	4013      	ands	r3, r2
 800330c:	d011      	beq.n	8003332 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2220      	movs	r2, #32
 8003312:	4013      	ands	r3, r2
 8003314:	d103      	bne.n	800331e <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2201      	movs	r2, #1
 800331a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800331c:	d009      	beq.n	8003332 <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2208      	movs	r2, #8
 8003324:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800332a:	2208      	movs	r2, #8
 800332c:	431a      	orrs	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	4013      	ands	r3, r2
 800333a:	d00f      	beq.n	800335c <HAL_UART_IRQHandler+0x134>
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	04db      	lsls	r3, r3, #19
 8003342:	4013      	ands	r3, r2
 8003344:	d00a      	beq.n	800335c <HAL_UART_IRQHandler+0x134>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2280      	movs	r2, #128	; 0x80
 800334c:	0112      	lsls	r2, r2, #4
 800334e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003354:	2220      	movs	r2, #32
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003360:	2b00      	cmp	r3, #0
 8003362:	d100      	bne.n	8003366 <HAL_UART_IRQHandler+0x13e>
 8003364:	e092      	b.n	800348c <HAL_UART_IRQHandler+0x264>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	2220      	movs	r2, #32
 800336a:	4013      	ands	r3, r2
 800336c:	d00c      	beq.n	8003388 <HAL_UART_IRQHandler+0x160>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2220      	movs	r2, #32
 8003372:	4013      	ands	r3, r2
 8003374:	d008      	beq.n	8003388 <HAL_UART_IRQHandler+0x160>
      {
        if (huart->RxISR != NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <HAL_UART_IRQHandler+0x160>
        {
          huart->RxISR(huart);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003382:	687a      	ldr	r2, [r7, #4]
 8003384:	0010      	movs	r0, r2
 8003386:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800338c:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	2240      	movs	r2, #64	; 0x40
 8003396:	4013      	ands	r3, r2
 8003398:	2b40      	cmp	r3, #64	; 0x40
 800339a:	d003      	beq.n	80033a4 <HAL_UART_IRQHandler+0x17c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2228      	movs	r2, #40	; 0x28
 80033a0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033a2:	d033      	beq.n	800340c <HAL_UART_IRQHandler+0x1e4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 fb78 	bl	8003a9c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	2240      	movs	r2, #64	; 0x40
 80033b4:	4013      	ands	r3, r2
 80033b6:	2b40      	cmp	r3, #64	; 0x40
 80033b8:	d123      	bne.n	8003402 <HAL_UART_IRQHandler+0x1da>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	689a      	ldr	r2, [r3, #8]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2140      	movs	r1, #64	; 0x40
 80033c6:	438a      	bics	r2, r1
 80033c8:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d012      	beq.n	80033f8 <HAL_UART_IRQHandler+0x1d0>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d6:	4a31      	ldr	r2, [pc, #196]	; (800349c <HAL_UART_IRQHandler+0x274>)
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033de:	0018      	movs	r0, r3
 80033e0:	f7fe ff08 	bl	80021f4 <HAL_DMA_Abort_IT>
 80033e4:	1e03      	subs	r3, r0, #0
 80033e6:	d019      	beq.n	800341c <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033f2:	0018      	movs	r0, r3
 80033f4:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f6:	e011      	b.n	800341c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 f860 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	e00c      	b.n	800341c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0018      	movs	r0, r3
 8003406:	f000 f85b 	bl	80034c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800340a:	e007      	b.n	800341c <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f856 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800341a:	e037      	b.n	800348c <HAL_UART_IRQHandler+0x264>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	46c0      	nop			; (mov r8, r8)
    return;
 800341e:	e035      	b.n	800348c <HAL_UART_IRQHandler+0x264>

  } /* End if some error occurs */
#if defined(USART_CR1_UESM)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	2380      	movs	r3, #128	; 0x80
 8003424:	035b      	lsls	r3, r3, #13
 8003426:	4013      	ands	r3, r2
 8003428:	d00e      	beq.n	8003448 <HAL_UART_IRQHandler+0x220>
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	2380      	movs	r3, #128	; 0x80
 800342e:	03db      	lsls	r3, r3, #15
 8003430:	4013      	ands	r3, r2
 8003432:	d009      	beq.n	8003448 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2280      	movs	r2, #128	; 0x80
 800343a:	0352      	lsls	r2, r2, #13
 800343c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	0018      	movs	r0, r3
 8003442:	f000 fc39 	bl	8003cb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003446:	e024      	b.n	8003492 <HAL_UART_IRQHandler+0x26a>
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2280      	movs	r2, #128	; 0x80
 800344c:	4013      	ands	r3, r2
 800344e:	d00d      	beq.n	800346c <HAL_UART_IRQHandler+0x244>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003450:	69bb      	ldr	r3, [r7, #24]
 8003452:	2280      	movs	r2, #128	; 0x80
 8003454:	4013      	ands	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_UART_IRQHandler+0x244>
  {
    if (huart->TxISR != NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800345c:	2b00      	cmp	r3, #0
 800345e:	d017      	beq.n	8003490 <HAL_UART_IRQHandler+0x268>
    {
      huart->TxISR(huart);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	0010      	movs	r0, r2
 8003468:	4798      	blx	r3
    }
    return;
 800346a:	e011      	b.n	8003490 <HAL_UART_IRQHandler+0x268>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800346c:	69fb      	ldr	r3, [r7, #28]
 800346e:	2240      	movs	r2, #64	; 0x40
 8003470:	4013      	ands	r3, r2
 8003472:	d00e      	beq.n	8003492 <HAL_UART_IRQHandler+0x26a>
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	2240      	movs	r2, #64	; 0x40
 8003478:	4013      	ands	r3, r2
 800347a:	d00a      	beq.n	8003492 <HAL_UART_IRQHandler+0x26a>
  {
    UART_EndTransmit_IT(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	0018      	movs	r0, r3
 8003480:	f000 fb43 	bl	8003b0a <UART_EndTransmit_IT>
    return;
 8003484:	46c0      	nop			; (mov r8, r8)
 8003486:	e004      	b.n	8003492 <HAL_UART_IRQHandler+0x26a>
      return;
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	e002      	b.n	8003492 <HAL_UART_IRQHandler+0x26a>
    return;
 800348c:	46c0      	nop			; (mov r8, r8)
 800348e:	e000      	b.n	8003492 <HAL_UART_IRQHandler+0x26a>
    return;
 8003490:	46c0      	nop			; (mov r8, r8)
  }

}
 8003492:	46bd      	mov	sp, r7
 8003494:	b008      	add	sp, #32
 8003496:	bd80      	pop	{r7, pc}
 8003498:	0000080f 	.word	0x0000080f
 800349c:	08003add 	.word	0x08003add

080034a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034a8:	46c0      	nop			; (mov r8, r8)
 80034aa:	46bd      	mov	sp, r7
 80034ac:	b002      	add	sp, #8
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}

080034c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034c8:	46c0      	nop			; (mov r8, r8)
 80034ca:	46bd      	mov	sp, r7
 80034cc:	b002      	add	sp, #8
 80034ce:	bd80      	pop	{r7, pc}

080034d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b088      	sub	sp, #32
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80034dc:	2317      	movs	r3, #23
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4aa3      	ldr	r2, [pc, #652]	; (8003790 <UART_SetConfig+0x2c0>)
 8003504:	4013      	ands	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4a9e      	ldr	r2, [pc, #632]	; (8003794 <UART_SetConfig+0x2c4>)
 800351a:	4013      	ands	r3, r2
 800351c:	0019      	movs	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	693a      	ldr	r2, [r7, #16]
 8003536:	4313      	orrs	r3, r2
 8003538:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a95      	ldr	r2, [pc, #596]	; (8003798 <UART_SetConfig+0x2c8>)
 8003542:	4013      	ands	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003550:	4b92      	ldr	r3, [pc, #584]	; (800379c <UART_SetConfig+0x2cc>)
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	2203      	movs	r2, #3
 8003556:	4013      	ands	r3, r2
 8003558:	2b01      	cmp	r3, #1
 800355a:	d00f      	beq.n	800357c <UART_SetConfig+0xac>
 800355c:	d304      	bcc.n	8003568 <UART_SetConfig+0x98>
 800355e:	2b02      	cmp	r3, #2
 8003560:	d011      	beq.n	8003586 <UART_SetConfig+0xb6>
 8003562:	2b03      	cmp	r3, #3
 8003564:	d005      	beq.n	8003572 <UART_SetConfig+0xa2>
 8003566:	e013      	b.n	8003590 <UART_SetConfig+0xc0>
 8003568:	231f      	movs	r3, #31
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2200      	movs	r2, #0
 800356e:	701a      	strb	r2, [r3, #0]
 8003570:	e012      	b.n	8003598 <UART_SetConfig+0xc8>
 8003572:	231f      	movs	r3, #31
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	2202      	movs	r2, #2
 8003578:	701a      	strb	r2, [r3, #0]
 800357a:	e00d      	b.n	8003598 <UART_SetConfig+0xc8>
 800357c:	231f      	movs	r3, #31
 800357e:	18fb      	adds	r3, r7, r3
 8003580:	2204      	movs	r2, #4
 8003582:	701a      	strb	r2, [r3, #0]
 8003584:	e008      	b.n	8003598 <UART_SetConfig+0xc8>
 8003586:	231f      	movs	r3, #31
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	2208      	movs	r2, #8
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	e003      	b.n	8003598 <UART_SetConfig+0xc8>
 8003590:	231f      	movs	r3, #31
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2210      	movs	r2, #16
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	021b      	lsls	r3, r3, #8
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d000      	beq.n	80035a8 <UART_SetConfig+0xd8>
 80035a6:	e07d      	b.n	80036a4 <UART_SetConfig+0x1d4>
  {
    switch (clocksource)
 80035a8:	231f      	movs	r3, #31
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d01c      	beq.n	80035ec <UART_SetConfig+0x11c>
 80035b2:	dc02      	bgt.n	80035ba <UART_SetConfig+0xea>
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d005      	beq.n	80035c4 <UART_SetConfig+0xf4>
 80035b8:	e04b      	b.n	8003652 <UART_SetConfig+0x182>
 80035ba:	2b04      	cmp	r3, #4
 80035bc:	d025      	beq.n	800360a <UART_SetConfig+0x13a>
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d037      	beq.n	8003632 <UART_SetConfig+0x162>
 80035c2:	e046      	b.n	8003652 <UART_SetConfig+0x182>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035c4:	f7ff fc54 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 80035c8:	0003      	movs	r3, r0
 80035ca:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	005a      	lsls	r2, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	085b      	lsrs	r3, r3, #1
 80035d6:	18d2      	adds	r2, r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0019      	movs	r1, r3
 80035de:	0010      	movs	r0, r2
 80035e0:	f7fc fd92 	bl	8000108 <__udivsi3>
 80035e4:	0003      	movs	r3, r0
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	61bb      	str	r3, [r7, #24]
        break;
 80035ea:	e037      	b.n	800365c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	085b      	lsrs	r3, r3, #1
 80035f2:	4a6b      	ldr	r2, [pc, #428]	; (80037a0 <UART_SetConfig+0x2d0>)
 80035f4:	189a      	adds	r2, r3, r2
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	0019      	movs	r1, r3
 80035fc:	0010      	movs	r0, r2
 80035fe:	f7fc fd83 	bl	8000108 <__udivsi3>
 8003602:	0003      	movs	r3, r0
 8003604:	b29b      	uxth	r3, r3
 8003606:	61bb      	str	r3, [r7, #24]
        break;
 8003608:	e028      	b.n	800365c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800360a:	f7ff fbc3 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 800360e:	0003      	movs	r3, r0
 8003610:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	005a      	lsls	r2, r3, #1
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	085b      	lsrs	r3, r3, #1
 800361c:	18d2      	adds	r2, r2, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	0019      	movs	r1, r3
 8003624:	0010      	movs	r0, r2
 8003626:	f7fc fd6f 	bl	8000108 <__udivsi3>
 800362a:	0003      	movs	r3, r0
 800362c:	b29b      	uxth	r3, r3
 800362e:	61bb      	str	r3, [r7, #24]
        break;
 8003630:	e014      	b.n	800365c <UART_SetConfig+0x18c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	085b      	lsrs	r3, r3, #1
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	0252      	lsls	r2, r2, #9
 800363c:	189a      	adds	r2, r3, r2
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	0019      	movs	r1, r3
 8003644:	0010      	movs	r0, r2
 8003646:	f7fc fd5f 	bl	8000108 <__udivsi3>
 800364a:	0003      	movs	r3, r0
 800364c:	b29b      	uxth	r3, r3
 800364e:	61bb      	str	r3, [r7, #24]
        break;
 8003650:	e004      	b.n	800365c <UART_SetConfig+0x18c>
      default:
        ret = HAL_ERROR;
 8003652:	2317      	movs	r3, #23
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2201      	movs	r2, #1
 8003658:	701a      	strb	r2, [r3, #0]
        break;
 800365a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	d91b      	bls.n	800369a <UART_SetConfig+0x1ca>
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	4a4f      	ldr	r2, [pc, #316]	; (80037a4 <UART_SetConfig+0x2d4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d817      	bhi.n	800369a <UART_SetConfig+0x1ca>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800366a:	69bb      	ldr	r3, [r7, #24]
 800366c:	b29a      	uxth	r2, r3
 800366e:	200a      	movs	r0, #10
 8003670:	183b      	adds	r3, r7, r0
 8003672:	210f      	movs	r1, #15
 8003674:	438a      	bics	r2, r1
 8003676:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	b29b      	uxth	r3, r3
 800367e:	2207      	movs	r2, #7
 8003680:	4013      	ands	r3, r2
 8003682:	b299      	uxth	r1, r3
 8003684:	183b      	adds	r3, r7, r0
 8003686:	183a      	adds	r2, r7, r0
 8003688:	8812      	ldrh	r2, [r2, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	183a      	adds	r2, r7, r0
 8003694:	8812      	ldrh	r2, [r2, #0]
 8003696:	60da      	str	r2, [r3, #12]
 8003698:	e06c      	b.n	8003774 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 800369a:	2317      	movs	r3, #23
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	2201      	movs	r2, #1
 80036a0:	701a      	strb	r2, [r3, #0]
 80036a2:	e067      	b.n	8003774 <UART_SetConfig+0x2a4>
    }
  }
  else
  {
    switch (clocksource)
 80036a4:	231f      	movs	r3, #31
 80036a6:	18fb      	adds	r3, r7, r3
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	2b02      	cmp	r3, #2
 80036ac:	d01b      	beq.n	80036e6 <UART_SetConfig+0x216>
 80036ae:	dc02      	bgt.n	80036b6 <UART_SetConfig+0x1e6>
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <UART_SetConfig+0x1f0>
 80036b4:	e049      	b.n	800374a <UART_SetConfig+0x27a>
 80036b6:	2b04      	cmp	r3, #4
 80036b8:	d024      	beq.n	8003704 <UART_SetConfig+0x234>
 80036ba:	2b08      	cmp	r3, #8
 80036bc:	d035      	beq.n	800372a <UART_SetConfig+0x25a>
 80036be:	e044      	b.n	800374a <UART_SetConfig+0x27a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036c0:	f7ff fbd6 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 80036c4:	0003      	movs	r3, r0
 80036c6:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	085a      	lsrs	r2, r3, #1
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	18d2      	adds	r2, r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	0019      	movs	r1, r3
 80036d8:	0010      	movs	r0, r2
 80036da:	f7fc fd15 	bl	8000108 <__udivsi3>
 80036de:	0003      	movs	r3, r0
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	61bb      	str	r3, [r7, #24]
        break;
 80036e4:	e036      	b.n	8003754 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	085b      	lsrs	r3, r3, #1
 80036ec:	4a2e      	ldr	r2, [pc, #184]	; (80037a8 <UART_SetConfig+0x2d8>)
 80036ee:	189a      	adds	r2, r3, r2
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	0019      	movs	r1, r3
 80036f6:	0010      	movs	r0, r2
 80036f8:	f7fc fd06 	bl	8000108 <__udivsi3>
 80036fc:	0003      	movs	r3, r0
 80036fe:	b29b      	uxth	r3, r3
 8003700:	61bb      	str	r3, [r7, #24]
        break;
 8003702:	e027      	b.n	8003754 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003704:	f7ff fb46 	bl	8002d94 <HAL_RCC_GetSysClockFreq>
 8003708:	0003      	movs	r3, r0
 800370a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	085a      	lsrs	r2, r3, #1
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	18d2      	adds	r2, r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	0019      	movs	r1, r3
 800371c:	0010      	movs	r0, r2
 800371e:	f7fc fcf3 	bl	8000108 <__udivsi3>
 8003722:	0003      	movs	r3, r0
 8003724:	b29b      	uxth	r3, r3
 8003726:	61bb      	str	r3, [r7, #24]
        break;
 8003728:	e014      	b.n	8003754 <UART_SetConfig+0x284>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	085b      	lsrs	r3, r3, #1
 8003730:	2280      	movs	r2, #128	; 0x80
 8003732:	0212      	lsls	r2, r2, #8
 8003734:	189a      	adds	r2, r3, r2
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	685b      	ldr	r3, [r3, #4]
 800373a:	0019      	movs	r1, r3
 800373c:	0010      	movs	r0, r2
 800373e:	f7fc fce3 	bl	8000108 <__udivsi3>
 8003742:	0003      	movs	r3, r0
 8003744:	b29b      	uxth	r3, r3
 8003746:	61bb      	str	r3, [r7, #24]
        break;
 8003748:	e004      	b.n	8003754 <UART_SetConfig+0x284>
      default:
        ret = HAL_ERROR;
 800374a:	2317      	movs	r3, #23
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2201      	movs	r2, #1
 8003750:	701a      	strb	r2, [r3, #0]
        break;
 8003752:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	2b0f      	cmp	r3, #15
 8003758:	d908      	bls.n	800376c <UART_SetConfig+0x29c>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	4a11      	ldr	r2, [pc, #68]	; (80037a4 <UART_SetConfig+0x2d4>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d804      	bhi.n	800376c <UART_SetConfig+0x29c>
    {
      huart->Instance->BRR = usartdiv;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	e003      	b.n	8003774 <UART_SetConfig+0x2a4>
    }
    else
    {
      ret = HAL_ERROR;
 800376c:	2317      	movs	r3, #23
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2201      	movs	r2, #1
 8003772:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003780:	2317      	movs	r3, #23
 8003782:	18fb      	adds	r3, r7, r3
 8003784:	781b      	ldrb	r3, [r3, #0]
}
 8003786:	0018      	movs	r0, r3
 8003788:	46bd      	mov	sp, r7
 800378a:	b008      	add	sp, #32
 800378c:	bd80      	pop	{r7, pc}
 800378e:	46c0      	nop			; (mov r8, r8)
 8003790:	ffff69f3 	.word	0xffff69f3
 8003794:	ffffcfff 	.word	0xffffcfff
 8003798:	fffff4ff 	.word	0xfffff4ff
 800379c:	40021000 	.word	0x40021000
 80037a0:	00f42400 	.word	0x00f42400
 80037a4:	0000ffff 	.word	0x0000ffff
 80037a8:	007a1200 	.word	0x007a1200

080037ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b8:	2201      	movs	r2, #1
 80037ba:	4013      	ands	r3, r2
 80037bc:	d00b      	beq.n	80037d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4a4a      	ldr	r2, [pc, #296]	; (80038f0 <UART_AdvFeatureConfig+0x144>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037da:	2202      	movs	r2, #2
 80037dc:	4013      	ands	r3, r2
 80037de:	d00b      	beq.n	80037f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	4a43      	ldr	r2, [pc, #268]	; (80038f4 <UART_AdvFeatureConfig+0x148>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	0019      	movs	r1, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	2204      	movs	r2, #4
 80037fe:	4013      	ands	r3, r2
 8003800:	d00b      	beq.n	800381a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a3b      	ldr	r2, [pc, #236]	; (80038f8 <UART_AdvFeatureConfig+0x14c>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381e:	2208      	movs	r2, #8
 8003820:	4013      	ands	r3, r2
 8003822:	d00b      	beq.n	800383c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a34      	ldr	r2, [pc, #208]	; (80038fc <UART_AdvFeatureConfig+0x150>)
 800382c:	4013      	ands	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003840:	2210      	movs	r2, #16
 8003842:	4013      	ands	r3, r2
 8003844:	d00b      	beq.n	800385e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	4a2c      	ldr	r2, [pc, #176]	; (8003900 <UART_AdvFeatureConfig+0x154>)
 800384e:	4013      	ands	r3, r2
 8003850:	0019      	movs	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003862:	2220      	movs	r2, #32
 8003864:	4013      	ands	r3, r2
 8003866:	d00b      	beq.n	8003880 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	4a25      	ldr	r2, [pc, #148]	; (8003904 <UART_AdvFeatureConfig+0x158>)
 8003870:	4013      	ands	r3, r2
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003884:	2240      	movs	r2, #64	; 0x40
 8003886:	4013      	ands	r3, r2
 8003888:	d01d      	beq.n	80038c6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	4a1d      	ldr	r2, [pc, #116]	; (8003908 <UART_AdvFeatureConfig+0x15c>)
 8003892:	4013      	ands	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	035b      	lsls	r3, r3, #13
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d10b      	bne.n	80038c6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a15      	ldr	r2, [pc, #84]	; (800390c <UART_AdvFeatureConfig+0x160>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	4013      	ands	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	4a0e      	ldr	r2, [pc, #56]	; (8003910 <UART_AdvFeatureConfig+0x164>)
 80038d8:	4013      	ands	r3, r2
 80038da:	0019      	movs	r1, r3
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	605a      	str	r2, [r3, #4]
  }
}
 80038e8:	46c0      	nop			; (mov r8, r8)
 80038ea:	46bd      	mov	sp, r7
 80038ec:	b002      	add	sp, #8
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	fffdffff 	.word	0xfffdffff
 80038f4:	fffeffff 	.word	0xfffeffff
 80038f8:	fffbffff 	.word	0xfffbffff
 80038fc:	ffff7fff 	.word	0xffff7fff
 8003900:	ffffefff 	.word	0xffffefff
 8003904:	ffffdfff 	.word	0xffffdfff
 8003908:	ffefffff 	.word	0xffefffff
 800390c:	ff9fffff 	.word	0xff9fffff
 8003910:	fff7ffff 	.word	0xfff7ffff

08003914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af02      	add	r7, sp, #8
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003922:	f7fe fb5d 	bl	8001fe0 <HAL_GetTick>
 8003926:	0003      	movs	r3, r0
 8003928:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2208      	movs	r2, #8
 8003932:	4013      	ands	r3, r2
 8003934:	2b08      	cmp	r3, #8
 8003936:	d10d      	bne.n	8003954 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003938:	68fa      	ldr	r2, [r7, #12]
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	0399      	lsls	r1, r3, #14
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4b16      	ldr	r3, [pc, #88]	; (800399c <UART_CheckIdleState+0x88>)
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	0013      	movs	r3, r2
 8003946:	2200      	movs	r2, #0
 8003948:	f000 f82a 	bl	80039a0 <UART_WaitOnFlagUntilTimeout>
 800394c:	1e03      	subs	r3, r0, #0
 800394e:	d001      	beq.n	8003954 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e01f      	b.n	8003994 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	2204      	movs	r2, #4
 800395c:	4013      	ands	r3, r2
 800395e:	2b04      	cmp	r3, #4
 8003960:	d10d      	bne.n	800397e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	2380      	movs	r3, #128	; 0x80
 8003966:	03d9      	lsls	r1, r3, #15
 8003968:	6878      	ldr	r0, [r7, #4]
 800396a:	4b0c      	ldr	r3, [pc, #48]	; (800399c <UART_CheckIdleState+0x88>)
 800396c:	9300      	str	r3, [sp, #0]
 800396e:	0013      	movs	r3, r2
 8003970:	2200      	movs	r2, #0
 8003972:	f000 f815 	bl	80039a0 <UART_WaitOnFlagUntilTimeout>
 8003976:	1e03      	subs	r3, r0, #0
 8003978:	d001      	beq.n	800397e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e00a      	b.n	8003994 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2220      	movs	r2, #32
 8003988:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2270      	movs	r2, #112	; 0x70
 800398e:	2100      	movs	r1, #0
 8003990:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	0018      	movs	r0, r3
 8003996:	46bd      	mov	sp, r7
 8003998:	b004      	add	sp, #16
 800399a:	bd80      	pop	{r7, pc}
 800399c:	01ffffff 	.word	0x01ffffff

080039a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	60f8      	str	r0, [r7, #12]
 80039a8:	60b9      	str	r1, [r7, #8]
 80039aa:	603b      	str	r3, [r7, #0]
 80039ac:	1dfb      	adds	r3, r7, #7
 80039ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039b0:	e05d      	b.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	3301      	adds	r3, #1
 80039b6:	d05a      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b8:	f7fe fb12 	bl	8001fe0 <HAL_GetTick>
 80039bc:	0002      	movs	r2, r0
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d302      	bcc.n	80039ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d11b      	bne.n	8003a06 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	492f      	ldr	r1, [pc, #188]	; (8003a98 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80039da:	400a      	ands	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2101      	movs	r1, #1
 80039ea:	438a      	bics	r2, r1
 80039ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2220      	movs	r2, #32
 80039f2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2220      	movs	r2, #32
 80039f8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2270      	movs	r2, #112	; 0x70
 80039fe:	2100      	movs	r1, #0
 8003a00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e043      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2204      	movs	r2, #4
 8003a0e:	4013      	ands	r3, r2
 8003a10:	d02d      	beq.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69da      	ldr	r2, [r3, #28]
 8003a18:	2380      	movs	r3, #128	; 0x80
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	2380      	movs	r3, #128	; 0x80
 8003a20:	011b      	lsls	r3, r3, #4
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d123      	bne.n	8003a6e <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2280      	movs	r2, #128	; 0x80
 8003a2c:	0112      	lsls	r2, r2, #4
 8003a2e:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4917      	ldr	r1, [pc, #92]	; (8003a98 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003a3c:	400a      	ands	r2, r1
 8003a3e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689a      	ldr	r2, [r3, #8]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	438a      	bics	r2, r1
 8003a4e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2220      	movs	r2, #32
 8003a54:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2220      	movs	r2, #32
 8003a5a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2220      	movs	r2, #32
 8003a60:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2270      	movs	r2, #112	; 0x70
 8003a66:	2100      	movs	r1, #0
 8003a68:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e00f      	b.n	8003a8e <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	4013      	ands	r3, r2
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	425a      	negs	r2, r3
 8003a7e:	4153      	adcs	r3, r2
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	001a      	movs	r2, r3
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d092      	beq.n	80039b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	0018      	movs	r0, r3
 8003a90:	46bd      	mov	sp, r7
 8003a92:	b004      	add	sp, #16
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	fffffe5f 	.word	0xfffffe5f

08003a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	490a      	ldr	r1, [pc, #40]	; (8003ad8 <UART_EndRxTransfer+0x3c>)
 8003ab0:	400a      	ands	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689a      	ldr	r2, [r3, #8]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	2101      	movs	r1, #1
 8003ac0:	438a      	bics	r2, r1
 8003ac2:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2220      	movs	r2, #32
 8003ac8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2200      	movs	r2, #0
 8003ace:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003ad0:	46c0      	nop			; (mov r8, r8)
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b002      	add	sp, #8
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	fffffedf 	.word	0xfffffedf

08003adc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	225a      	movs	r2, #90	; 0x5a
 8003aee:	2100      	movs	r1, #0
 8003af0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2252      	movs	r2, #82	; 0x52
 8003af6:	2100      	movs	r1, #0
 8003af8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	0018      	movs	r0, r3
 8003afe:	f7ff fcdf 	bl	80034c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b02:	46c0      	nop			; (mov r8, r8)
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b004      	add	sp, #16
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b082      	sub	sp, #8
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	2140      	movs	r1, #64	; 0x40
 8003b1e:	438a      	bics	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0018      	movs	r0, r3
 8003b32:	f7ff fcb5 	bl	80034a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b36:	46c0      	nop			; (mov r8, r8)
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b48:	230e      	movs	r3, #14
 8003b4a:	18fb      	adds	r3, r7, r3
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	215c      	movs	r1, #92	; 0x5c
 8003b50:	5a52      	ldrh	r2, [r2, r1]
 8003b52:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003b58:	2b22      	cmp	r3, #34	; 0x22
 8003b5a:	d140      	bne.n	8003bde <UART_RxISR_8BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	210c      	movs	r1, #12
 8003b62:	187b      	adds	r3, r7, r1
 8003b64:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003b66:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b68:	187b      	adds	r3, r7, r1
 8003b6a:	881b      	ldrh	r3, [r3, #0]
 8003b6c:	b2da      	uxtb	r2, r3
 8003b6e:	230e      	movs	r3, #14
 8003b70:	18fb      	adds	r3, r7, r3
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b2d9      	uxtb	r1, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b7a:	400a      	ands	r2, r1
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	225a      	movs	r2, #90	; 0x5a
 8003b8e:	5a9b      	ldrh	r3, [r3, r2]
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	3b01      	subs	r3, #1
 8003b94:	b299      	uxth	r1, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	225a      	movs	r2, #90	; 0x5a
 8003b9a:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	225a      	movs	r2, #90	; 0x5a
 8003ba0:	5a9b      	ldrh	r3, [r3, r2]
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d122      	bne.n	8003bee <UART_RxISR_8BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4911      	ldr	r1, [pc, #68]	; (8003bf8 <UART_RxISR_8BIT+0xb8>)
 8003bb4:	400a      	ands	r2, r1
 8003bb6:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689a      	ldr	r2, [r3, #8]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2101      	movs	r1, #1
 8003bc4:	438a      	bics	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2220      	movs	r2, #32
 8003bcc:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7ff fc6a 	bl	80034b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003bdc:	e007      	b.n	8003bee <UART_RxISR_8BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	699a      	ldr	r2, [r3, #24]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2108      	movs	r1, #8
 8003bea:	430a      	orrs	r2, r1
 8003bec:	619a      	str	r2, [r3, #24]
}
 8003bee:	46c0      	nop			; (mov r8, r8)
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b004      	add	sp, #16
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	fffffedf 	.word	0xfffffedf

08003bfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003c04:	230e      	movs	r3, #14
 8003c06:	18fb      	adds	r3, r7, r3
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	215c      	movs	r1, #92	; 0x5c
 8003c0c:	5a52      	ldrh	r2, [r2, r1]
 8003c0e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c14:	2b22      	cmp	r3, #34	; 0x22
 8003c16:	d140      	bne.n	8003c9a <UART_RxISR_16BIT+0x9e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	210c      	movs	r1, #12
 8003c1e:	187b      	adds	r3, r7, r1
 8003c20:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8003c22:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c28:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	220e      	movs	r2, #14
 8003c2e:	18ba      	adds	r2, r7, r2
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	8812      	ldrh	r2, [r2, #0]
 8003c34:	4013      	ands	r3, r2
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c40:	1c9a      	adds	r2, r3, #2
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	225a      	movs	r2, #90	; 0x5a
 8003c4a:	5a9b      	ldrh	r3, [r3, r2]
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	b299      	uxth	r1, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	225a      	movs	r2, #90	; 0x5a
 8003c56:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	225a      	movs	r2, #90	; 0x5a
 8003c5c:	5a9b      	ldrh	r3, [r3, r2]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d122      	bne.n	8003caa <UART_RxISR_16BIT+0xae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681a      	ldr	r2, [r3, #0]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4911      	ldr	r1, [pc, #68]	; (8003cb4 <UART_RxISR_16BIT+0xb8>)
 8003c70:	400a      	ands	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	689a      	ldr	r2, [r3, #8]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2101      	movs	r1, #1
 8003c80:	438a      	bics	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2220      	movs	r2, #32
 8003c88:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	0018      	movs	r0, r3
 8003c94:	f7ff fc0c 	bl	80034b0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003c98:	e007      	b.n	8003caa <UART_RxISR_16BIT+0xae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	699a      	ldr	r2, [r3, #24]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2108      	movs	r1, #8
 8003ca6:	430a      	orrs	r2, r1
 8003ca8:	619a      	str	r2, [r3, #24]
}
 8003caa:	46c0      	nop			; (mov r8, r8)
 8003cac:	46bd      	mov	sp, r7
 8003cae:	b004      	add	sp, #16
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	46c0      	nop			; (mov r8, r8)
 8003cb4:	fffffedf 	.word	0xfffffedf

08003cb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cc0:	46c0      	nop			; (mov r8, r8)
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	b002      	add	sp, #8
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <__libc_init_array>:
 8003cc8:	b570      	push	{r4, r5, r6, lr}
 8003cca:	2600      	movs	r6, #0
 8003ccc:	4d0c      	ldr	r5, [pc, #48]	; (8003d00 <__libc_init_array+0x38>)
 8003cce:	4c0d      	ldr	r4, [pc, #52]	; (8003d04 <__libc_init_array+0x3c>)
 8003cd0:	1b64      	subs	r4, r4, r5
 8003cd2:	10a4      	asrs	r4, r4, #2
 8003cd4:	42a6      	cmp	r6, r4
 8003cd6:	d109      	bne.n	8003cec <__libc_init_array+0x24>
 8003cd8:	2600      	movs	r6, #0
 8003cda:	f000 f821 	bl	8003d20 <_init>
 8003cde:	4d0a      	ldr	r5, [pc, #40]	; (8003d08 <__libc_init_array+0x40>)
 8003ce0:	4c0a      	ldr	r4, [pc, #40]	; (8003d0c <__libc_init_array+0x44>)
 8003ce2:	1b64      	subs	r4, r4, r5
 8003ce4:	10a4      	asrs	r4, r4, #2
 8003ce6:	42a6      	cmp	r6, r4
 8003ce8:	d105      	bne.n	8003cf6 <__libc_init_array+0x2e>
 8003cea:	bd70      	pop	{r4, r5, r6, pc}
 8003cec:	00b3      	lsls	r3, r6, #2
 8003cee:	58eb      	ldr	r3, [r5, r3]
 8003cf0:	4798      	blx	r3
 8003cf2:	3601      	adds	r6, #1
 8003cf4:	e7ee      	b.n	8003cd4 <__libc_init_array+0xc>
 8003cf6:	00b3      	lsls	r3, r6, #2
 8003cf8:	58eb      	ldr	r3, [r5, r3]
 8003cfa:	4798      	blx	r3
 8003cfc:	3601      	adds	r6, #1
 8003cfe:	e7f2      	b.n	8003ce6 <__libc_init_array+0x1e>
 8003d00:	08003db0 	.word	0x08003db0
 8003d04:	08003db0 	.word	0x08003db0
 8003d08:	08003db0 	.word	0x08003db0
 8003d0c:	08003db4 	.word	0x08003db4

08003d10 <memset>:
 8003d10:	0003      	movs	r3, r0
 8003d12:	1812      	adds	r2, r2, r0
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d100      	bne.n	8003d1a <memset+0xa>
 8003d18:	4770      	bx	lr
 8003d1a:	7019      	strb	r1, [r3, #0]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	e7f9      	b.n	8003d14 <memset+0x4>

08003d20 <_init>:
 8003d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d26:	bc08      	pop	{r3}
 8003d28:	469e      	mov	lr, r3
 8003d2a:	4770      	bx	lr

08003d2c <_fini>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr
